bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(n);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	23	None	replace
2	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(n);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	23	None	replace
3	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  n  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	n  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(n);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	23	None	replace
4	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getFirstValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getFirstValue();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getFirstValue();	  TernaryValue    rightVal    =    NodeUtil.getLastValue();    	non-compiled	[CE]  	58	None	replace
5	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue();	  TernaryValue    rightVal    =    NodeUtil.getLastValue();    	non-compiled	[CE]  	58	None	replace
6	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue()  +  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastValue()  +  1;	  TernaryValue    rightVal    =    NodeUtil.getLastValue();    	non-compiled	[CE]  	58	None	replace
7	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
8	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(leftParent);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(leftParent);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(leftParent);  right  =  tryMinimizeCondition(right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
9	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
10	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(left);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
11	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
12	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
13	[BUG]  [BUGGY]  Node  rightParent  =  left.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  left.getParent();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  left.getParent();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
14	[BUG]  [BUGGY]  Node  rightParent  =  left.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  left.getNext();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  left.getNext();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
15	[BUG]  [BUGGY]  Node  rightParent  =  n.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  n.getParent();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  n.getParent();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
16	[BUG]  [BUGGY]  Node  rightParent  =  right.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  right.getLastChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  right.getLastChild();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
17	[BUG]  [BUGGY]  Node  rightParent  =  parent.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  parent.getParent();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  parent.getParent();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
18	[BUG]  [BUGGY]  Node  rightParent  =  right.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  right.getNext();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  right.getNext();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
19	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  trueNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    falseNode);    	non-compiled	[CE]  	57	None	replace
20	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    falseNode);    	non-compiled	[CE]  	57	None	replace
21	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    falseNode);    	non-compiled	[CE]  	57	None	replace
22	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    falseNode);    	non-compiled	[CE]  	57	None	replace
23	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode,  n);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    falseNode);    	non-compiled	[CE]  	57	None	replace
24	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(right);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
25	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
26	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
27	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
28	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(right,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
29	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(left,  right);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	26	None	replace
30	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	rightParent  =  tryMinimizeCondition(right);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	26	None	replace
31	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(left);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  rightParent  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	rightParent  =  tryMinimizeCondition(left);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	26	None	replace
32	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  leftParent);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(right,  leftParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right,  leftParent);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	26	None	replace
33	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right,  falseNode);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	26	None	replace
34	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(right);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
35	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
36	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  left);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
37	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
38	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLowerValue(left);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLowerValue(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLowerValue(left);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
39	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  false,  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  false,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  false,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
43	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode,  trueNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
44	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode,  trueNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
45	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    n);    	non-compiled	[CE]  	14	None	replace
46	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    n);    	non-compiled	[CE]  	14	None	replace
47	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    n);    	non-compiled	[CE]  	14	None	replace
48	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(right);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
49	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
50	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
51	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
52	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(right,  left);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
53	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Right  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Right  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);	  Right    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	65	None	replace
54	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Right  =  tryMinimizeCondition(right);	  Right    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	65	None	replace
55	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Right  =  tryMinimizeCondition(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Right  =  tryMinimizeCondition(left,  right);	  Right    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	65	None	replace
56	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    right);    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  rightParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  rightParent);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    right);    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  right)+  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  right)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  right)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    right);    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  TernaryValue  rightVal  =  right.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  right.getLastChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  right.getLastChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
60	[BUG]  [BUGGY]  TernaryValue  rightVal  =  n.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  n.getFirstChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
61	[BUG]  [BUGGY]  TernaryValue  rightVal  =  left.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  left.getLastChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  left.getLastChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
62	[BUG]  [BUGGY]  TernaryValue  rightVal  =  left.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  left.getFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  left.getFirstChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
63	[BUG]  [BUGGY]  TernaryValue  rightVal  =  rightParent.getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  rightParent.getLastChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  rightParent.getLastChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
64	[BUG]  [BUGGY]  TernaryValue  rightVal  =  right.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  right.getFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  right.getFirstChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
65	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
66	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  rightParent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  rightParent);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
67	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right  +  1);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
68	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right,  falseNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
69	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(right);    	non-compiled	[CE]  	34	None	replace
70	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  trueNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    falseNode);    	non-compiled	[CE]  	56	None	replace
71	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    falseNode);    	non-compiled	[CE]  	56	None	replace
72	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    falseNode);    	non-compiled	[CE]  	56	None	replace
73	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode,  trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    falseNode);    	non-compiled	[CE]  	56	None	replace
74	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  falseNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    falseNode);    	non-compiled	[CE]  	56	None	replace
75	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode,  n);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    falseNode);    	non-compiled	[CE]  	56	None	replace
76	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    n);    	non-compiled	[CE]  	36	None	replace
77	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    false);    	non-compiled	[CE]  	54	None	replace
78	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    false);    	non-compiled	[CE]  	54	None	replace
79	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
80	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
81	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
82	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  rval);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  rval);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  rval);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
83	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  null);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  null);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
84	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  trueNode,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  trueNode,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  trueNode,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
85	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getLightValue(left);    	non-compiled	[CE]  	49	None	replace
86	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getLightValue(left);    	non-compiled	[CE]  	49	None	replace
87	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  2);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  2);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    +    1);    	non-compiled	[CE]  	32	None	replace
88	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    +    1);    	non-compiled	[CE]  	32	None	replace
89	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  *  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  *  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  *  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    +    1);    	non-compiled	[CE]  	32	None	replace
90	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  3);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  3);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  3);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    +    1);    	non-compiled	[CE]  	32	None	replace
91	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
92	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
93	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
94	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n,  left);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
95	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  left);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(right,  left);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(right,  left);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
96	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
97	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightVal);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left,  rightVal);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left,  rightVal);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
98	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
99	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  falseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	16	None	replace
100	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  right);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	16	None	replace
101	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
102	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
103	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
104	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  left);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
105	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  left);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
106	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getLeftValue(n);    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastValue(n);	  TernaryValue    rightVal    =    NodeUtil.getLeftValue(n);    	non-compiled	[CE]  	1	None	replace
108	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastValue(left);	  TernaryValue    rightVal    =    NodeUtil.getLeftValue(n);    	non-compiled	[CE]  	1	None	replace
109	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);	  right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	69	None	replace
110	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(rightParent);	  right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	69	None	replace
111	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  trueNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(right,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right,  trueNode);	  right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	69	None	replace
112	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    true);    	non-compiled	[CE]  	73	None	replace
113	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    true);    	non-compiled	[CE]  	73	None	replace
114	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    true);    	non-compiled	[CE]  	73	None	replace
115	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    true);    	non-compiled	[CE]  	73	None	replace
116	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    true);    	non-compiled	[CE]  	73	None	replace
117	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  rightParent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  rightParent);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    right);    	non-compiled	[CE]  	13	None	replace
118	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right  +  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    right);    	non-compiled	[CE]  	13	None	replace
119	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(n);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(right);    	non-compiled	[CE]  	11	None	replace
120	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
121	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
122	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
123	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  left);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
124	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n,  false);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
125	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getAssignedValue(left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getAssignedValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getAssignedValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    left);    	non-compiled	[CE]  	12	None	replace
126	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    left);    	non-compiled	[CE]  	12	None	replace
127	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(right,    left);    	non-compiled	[CE]  	15	None	replace
128	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(right,    left);    	non-compiled	[CE]  	15	None	replace
129	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	22	None	replace
130	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  n);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	22	None	replace
131	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  n  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	n  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	22	None	replace
132	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getRawValue(left,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getRawValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getRawValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    left);    	non-compiled	[CE]  	29	None	replace
133	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    left);    	non-compiled	[CE]  	29	None	replace
134	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left)+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    left);    	non-compiled	[CE]  	29	None	replace
135	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(right  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    -    1);    	non-compiled	[CE]  	50	None	replace
136	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    -    1);    	non-compiled	[CE]  	50	None	replace
137	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  *  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  *  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left  *  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    -    1);    	non-compiled	[CE]  	50	None	replace
138	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  -  2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  -  2);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left  -  2);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    -    1);    	non-compiled	[CE]  	50	None	replace
139	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getLocalValue(left,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getLocalValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getLocalValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    left);    	non-compiled	[CE]  	45	None	replace
140	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    left);    	non-compiled	[CE]  	45	None	replace
141	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    left);    	non-compiled	[CE]  	45	None	replace
142	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    left);    	non-compiled	[CE]  	7	None	replace
143	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getRightValue(left,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getRightValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getRightValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    left);    	non-compiled	[CE]  	7	None	replace
144	[BUG]  [BUGGY]  Node  rightVal  =  NodeUtil.getRightValue(left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightVal  =  NodeUtil.getRightValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightVal  =  NodeUtil.getRightValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    left);    	non-compiled	[CE]  	7	None	replace
145	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptFirstChild();	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
146	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOpt(0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOpt(0);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOpt(0);	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
147	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptBooleanValue(left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptBooleanValue(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptBooleanValue(left);	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
148	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptBooleanValue(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptBooleanValue(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptBooleanValue(right);	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
149	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  n  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	n  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	27	None	replace
150	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  trueNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  trueNode);	  TernaryValue    leftVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	52	None	replace
151	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  falseNode);	  TernaryValue    leftVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	52	None	replace
152	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  trueNode);	  TernaryValue    leftVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	52	None	replace
153	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(falseNode,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(falseNode,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(falseNode,  right);	  TernaryValue    leftVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	52	None	replace
154	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  falseNode,  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  falseNode,  trueNode);	  TernaryValue    leftVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	52	None	replace
155	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(right,  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getLightValue(right);    	non-compiled	[CE]  	71	None	replace
156	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    -    1);    	non-compiled	[CE]  	59	None	replace
157	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  2);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  2);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    -    1);    	non-compiled	[CE]  	59	None	replace
158	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    -    1);    	non-compiled	[CE]  	59	None	replace
159	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(n);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(right);    	non-compiled	[CE]  	44	None	replace
160	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    +    1);    	non-compiled	[CE]  	9	None	replace
161	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  +  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  +  2);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left  +  2);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    +    1);    	non-compiled	[CE]  	9	None	replace
162	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(right  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    +    1);    	non-compiled	[CE]  	9	None	replace
163	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    n);    	non-compiled	[CE]  	10	None	replace
164	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    n);    	non-compiled	[CE]  	10	None	replace
165	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    n);    	non-compiled	[CE]  	10	None	replace
166	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(n);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(n);    	non-compiled	[CE]  	3	None	replace
167	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode,  falseNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    trueNode);    	non-compiled	[CE]  	6	None	replace
168	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    trueNode);    	non-compiled	[CE]  	6	None	replace
169	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    falseNode);    	non-compiled	[CE]  	60	None	replace
170	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    falseNode);    	non-compiled	[CE]  	60	None	replace
171	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode,  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    falseNode);    	non-compiled	[CE]  	60	None	replace
172	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    falseNode);    	non-compiled	[CE]  	60	None	replace
173	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode,  n);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    falseNode);    	non-compiled	[CE]  	60	None	replace
174	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(n);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right);    	non-compiled	[CE]  	28	None	replace
175	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    falseNode);    	non-compiled	[CE]  	18	None	replace
176	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	21	None	replace
177	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(left);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	21	None	replace
178	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  rightParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  rightParent);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    right);    	non-compiled	[CE]  	37	None	replace
179	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(right,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right,    left);    	non-compiled	[CE]  	5	None	replace
180	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getLeftValue(left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getLeftValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getLeftValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right,    left);    	non-compiled	[CE]  	5	None	replace
181	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getOptValue(left,  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getOptValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getOptValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    left);    	non-compiled	[CE]  	35	None	replace
182	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
183	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
184	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  left);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
185	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
186	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
187	[BUG]  [BUGGY]  TernaryValue  rightVal  =  leftParent.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  leftParent.getLastChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  leftParent.getLastChild();	  TernaryValue    rightVal    =    node.getLastChild();    	non-compiled	[CE]  	43	None	replace
188	[BUG]  [BUGGY]  TernaryValue  rightVal  =  node.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  node.getFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  node.getFirstChild();	  TernaryValue    rightVal    =    node.getLastChild();    	non-compiled	[CE]  	43	None	replace
189	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(right);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	24	None	replace
190	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  n  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	n  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(right);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	24	None	replace
191	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
192	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
193	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(leftParent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(leftParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(leftParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
194	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(last);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(last);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(last);  rightParent  =  tryMinimizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
195	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(n);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(n);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(n);  rightParent  =  tryMinimizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
196	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    trueNode);    	non-compiled	[CE]  	47	None	replace
197	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    trueNode);    	non-compiled	[CE]  	47	None	replace
198	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode,  n);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    trueNode);    	non-compiled	[CE]  	47	None	replace
199	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  trueNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(right,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    trueNode);    	non-compiled	[CE]  	47	None	replace
200	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftChild();	  TernaryValue    rightVal    =    NodeUtil.getFirstChild();    	non-compiled	[CE]  	38	None	replace
201	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeastChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeastChild();	  TernaryValue    rightVal    =    NodeUtil.getFirstChild();    	non-compiled	[CE]  	38	None	replace
202	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  rightParent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  rightParent);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    right);    	non-compiled	[CE]  	30	None	replace
203	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    right);    	non-compiled	[CE]  	30	None	replace
204	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    right);    	non-compiled	[CE]  	30	None	replace
205	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
206	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(left);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
207	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
208	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(second);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(second);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(first);  rightParent  =  tryMinimizeCondition(second);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
209	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(second);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(second);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(second);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
210	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    falseNode);    	non-compiled	[CE]  	53	None	replace
211	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  n);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    falseNode);    	non-compiled	[CE]  	53	None	replace
212	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue();	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue();    	non-compiled	[CE]  	39	None	replace
213	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right,    left);    	non-compiled	[CE]  	33	None	replace
214	[BUG]  [BUGGY]  Node  rightVal  =  NodeUtil.getRawValue(left,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightVal  =  NodeUtil.getRawValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightVal  =  NodeUtil.getRawValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right,    left);    	non-compiled	[CE]  	33	None	replace
215	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left,  falseNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right,    left);    	non-compiled	[CE]  	33	None	replace
216	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(right);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
217	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left,  right);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
218	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(n);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
219	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left,  left);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(left,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left,  left);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
220	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left,  leftParent);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(left,  leftParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left,  leftParent);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
221	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(right,  leftParent);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(right,  leftParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(right,  leftParent);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
222	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left    +    1);    	non-compiled	[CE]  	66	None	replace
223	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right  +  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left    +    1);    	non-compiled	[CE]  	66	None	replace
224	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  2);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  2);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left    +    1);    	non-compiled	[CE]  	66	None	replace
225	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(RIGHT,    falseNode);    	non-compiled	[CE]  	51	None	replace
226	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode,  trueNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(RIGHT,    falseNode);    	non-compiled	[CE]  	51	None	replace
227	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  RIGHT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  RIGHT);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  RIGHT);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(RIGHT,    falseNode);    	non-compiled	[CE]  	51	None	replace
228	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(rightParent);	  left    =    tryMinimizeCondition(right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	27	None	replace
229	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode)+  1;	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    falseNode);    	non-compiled	[CE]  	18	None	replace
230	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right)+  1;	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    right);    	non-compiled	[CE]  	37	None	replace
231	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right,    left);    	non-compiled	[CE]  	33	None	replace
232	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left)+  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right,    left);    	non-compiled	[CE]  	33	None	replace
233	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getAssignedValue(left,  trueNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getAssignedValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getAssignedValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    falseNode);    	non-compiled	[CE]  	57	None	replace
234	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  1  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  1  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  1  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left    -    1);    	non-compiled	[CE]  	59	None	replace
235	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left)+  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left)+  1;	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    left);    	non-compiled	[CE]  	45	None	replace
236	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode)+  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode)+  1;	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(RIGHT,    falseNode);    	non-compiled	[CE]  	51	None	replace
237	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode)+  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode)+  1;	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(RIGHT,    falseNode);    	non-compiled	[CE]  	51	None	replace
238	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  parent);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left,  parent);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left,  parent);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
239	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(rightParent);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
240	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left);  n  =  tryMinimizeCondition(n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  n  =  tryMinimizeCondition(left);  n  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	n  =  tryMinimizeCondition(left);  n  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(n);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	25	None	replace
241	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(rightParent);  right  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(rightParent);  right  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(rightParent);  right  =  tryMinimizeCondition(rightParent);	  left    =    tryMinimizeCondition(n);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	25	None	replace
242	[BUG]  [BUGGY]  Node  rightParent  =  node.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  node.getParent();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  node.getParent();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
243	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right)+  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right)+  1;	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    right);    	non-compiled	[CE]  	13	None	replace
244	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(right,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(right,  n);	  TernaryValue    rightVal    =    NodeUtil.getLeftValue(right);    	non-compiled	[CE]  	4	None	replace
245	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left)+  1;	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    left);    	non-compiled	[CE]  	12	None	replace
246	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
247	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
248	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  leftParent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  leftParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  leftParent);	  Right    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	65	None	replace
249	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Right  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Right  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  falseNode);	  Right    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	65	None	replace
250	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Right  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Right  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);	  Right    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	65	None	replace
251	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	26	None	replace
252	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n)+  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    n);    	non-compiled	[CE]  	10	None	replace
253	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    n);    	non-compiled	[CE]  	10	None	replace
254	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n  +  1);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
255	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n)+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n)+  1;	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    n);    	non-compiled	[CE]  	46	None	replace
256	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	22	None	replace
257	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  n  =  tryMinimizeCondition(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	n  =  tryMinimizeCondition(left);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	22	None	replace
258	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n  +  1);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    n);    	non-compiled	[CE]  	36	None	replace
259	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n)+  1;	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    n);    	non-compiled	[CE]  	36	None	replace
260	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    n);    	non-compiled	[CE]  	36	None	replace
261	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	16	None	replace
262	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  *  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  *  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  *  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left    +    1);    	non-compiled	[CE]  	66	None	replace
263	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  3);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  3);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left    +    1);    	non-compiled	[CE]  	66	None	replace
264	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(right,  falseNode);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
265	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left,  falseNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left,  falseNode);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
266	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left  +  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left  +  1);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
267	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(parent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(parent);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(right);    	non-compiled	[CE]  	44	None	replace
268	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent,  falseNode);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
269	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
270	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue();	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue();    	non-compiled	[CE]  	39	None	replace
271	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right)+  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    right);    	non-compiled	[CE]  	30	None	replace
272	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode,    false);    	non-compiled	[CE]  	20	None	replace
273	[BUG]  [BUGGY]  Node  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
274	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(rightParent);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
275	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(right,    left);    	non-compiled	[CE]  	15	None	replace
276	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(right,    left);    	non-compiled	[CE]  	15	None	replace
277	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode,  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode,  left);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
278	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  n);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(falseNode,    trueNode);    	non-compiled	[CE]  	17	None	replace
279	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    true);    	non-compiled	[CE]  	73	None	replace
280	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
281	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n)+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
282	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(right);  rightParent  =  tryMinimizeCondition(n);	  left    =    tryMinimizeCondition(right);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	24	None	replace
283	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastValue(1);	  TernaryValue    rightVal    =    NodeUtil.getLastValue();    	non-compiled	[CE]  	58	None	replace
284	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
285	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
286	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(false,  right);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
287	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right,    left);    	non-compiled	[CE]  	5	None	replace
288	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(left,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    false);    	non-compiled	[CE]  	54	None	replace
289	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  true);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    false);    	non-compiled	[CE]  	54	None	replace
290	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n  +  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    n);    	non-compiled	[CE]  	14	None	replace
291	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n)+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n)+  1;	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    n);    	non-compiled	[CE]  	14	None	replace
292	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(falseNode);	  TernaryValue    leftVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	52	None	replace
293	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptLeftChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptLeftChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptLeftChild();	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
294	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptLastChild(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptLastChild(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptLastChild(left);	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
295	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getLeftValue(left);    	non-compiled	[CE]  	2	None	replace
296	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  falseNode);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
297	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightVal);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightVal);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
298	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
299	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(last);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(last);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(last);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
300	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  falseNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
301	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  trueNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
302	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getLocalValue(left,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getLocalValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getLocalValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
303	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
304	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getImmutableValue(left);    	non-compiled	[CE]  	67	None	replace
305	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(right,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right,  right);	  right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	69	None	replace
306	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  rightParent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(right,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right,  rightParent);	  right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	69	None	replace
307	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  right  =  tryMinimizeCondition(right,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right,  left);	  right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	69	None	replace
308	[BUG]  [BUGGY]  TernaryValue  rightVal  =  n.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  n.removeFirstChild();	  TernaryValue    rightVal    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
309	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right  -  1);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
310	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right)+  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right)+  1;	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    right);    	non-compiled	[CE]  	48	None	replace
311	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
312	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left,  right);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
313	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left  +  1);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left  +  1);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left  +  1);  rightParent  =  tryMinimizeCondition(right);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	68	None	replace
314	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left,  right);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	21	None	replace
315	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right,  right);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	21	None	replace
316	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMaximizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMaximizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  right  =  tryMaximizeCondition(right);	  left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	21	None	replace
317	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode),  trueNode;  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode),  trueNode;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode),  trueNode;	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    falseNode);    	non-compiled	[CE]  	16	None	replace
318	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left,  n);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(right,    left);    	non-compiled	[CE]  	33	None	replace
319	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.removeFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.removeFirstChild();	  TernaryValue    rightVal    =    NodeUtil.getFirstChild();    	non-compiled	[CE]  	38	None	replace
320	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(right,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(right,  right);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
321	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left,  rightParent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  right  =  tryMinimizeCondition(left,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left,  rightParent);	  Node    right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	64	None	replace
322	[BUG]  [BUGGY]  NeighborValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  NeighborValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	NeighborValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    falseNode);    	non-compiled	[CE]  	18	None	replace
323	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getLightValue(left);    	non-compiled	[CE]  	49	None	replace
324	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n,  left);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    n);    	non-compiled	[CE]  	14	None	replace
325	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(n,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(n,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(n,  right);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(trueNode,    right);    	non-compiled	[CE]  	19	None	replace
326	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  right);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    left);    	non-compiled	[CE]  	29	None	replace
327	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  false);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(left,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    false);    	non-compiled	[CE]  	54	None	replace
328	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  rightVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  rightVal);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  rightVal);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left,    right);    	non-compiled	[CE]  	8	None	replace
329	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left)+  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left)+  1;	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left    +    1);    	non-compiled	[CE]  	9	None	replace
330	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getNestValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getNestValue();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getNestValue();	  TernaryValue    rightVal    =    NodeUtil.getLastValue();    	non-compiled	[CE]  	58	None	replace
331	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOpt1();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOpt1();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOpt1();	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
332	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOpt(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOpt(left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOpt(left);	  TernaryValue    rightVal    =    NodeUtil.getOptLastChild();    	non-compiled	[CE]  	55	None	replace
333	[BUG]  [BUGGY]  NeighborValue  rightVal  =  NodeUtil.getRightValue(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  NeighborValue  rightVal  =  NodeUtil.getRightValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	NeighborValue  rightVal  =  NodeUtil.getRightValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right,    left);    	non-compiled	[CE]  	5	None	replace
334	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getOwnerValue(left);    	non-compiled	[CE]  	40	None	replace
335	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left,    trueNode);    	non-compiled	[CE]  	6	None	replace
336	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right,  n);	  left    =    tryMinimizeCondition(right);    right    =    tryMinimizeCondition(n);    	non-compiled	[CE]  	24	None	replace
337	[BUG]  [BUGGY]  NeighborValue  rightVal  =  NodeUtil.getAssignedValue(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  NeighborValue  rightVal  =  NodeUtil.getAssignedValue(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	NeighborValue  rightVal  =  NodeUtil.getAssignedValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(right,    left);    	non-compiled	[CE]  	15	None	replace
338	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right  -  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right  -  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    right);    	non-compiled	[CE]  	13	None	replace
339	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right,  n);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left,    right);    	non-compiled	[CE]  	13	None	replace
340	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left  +  1);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getOwnValue(left);    	non-compiled	[CE]  	41	None	replace
341	[BUG]  [BUGGY]  Node  rightParent  =  left.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  left.removeFirstChild();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  left.removeFirstChild();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
342	[BUG]  [BUGGY]  Node  rightParent  =  right.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  rightParent  =  right.cloneTree();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  right.cloneTree();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
343	[BUG]  [BUGGY]  Node  leftParent  =  right.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  leftParent  =  right.getParent();  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  leftParent  =  right.getParent();	  Node    rightParent    =    right.getParent();    	non-compiled	[CE]  	70	None	replace
344	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  this.left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  this.left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  this.left);	  TernaryValue    rightVal    =    NodeUtil.getStringValue(right,    trueNode);    	non-compiled	[CE]  	72	None	replace
345	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n)-  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n)-  1;  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n)-  1;	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left,    n);    	non-compiled	[CE]  	31	None	replace
346	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(second);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(second);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(second);  rightParent  =  tryMinimizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
347	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMaximizeCondition(rightParent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMaximizeCondition(rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMaximizeCondition(rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
348	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  rightParent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  rightParent);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right,  rightParent);	  leftParent    =    tryMinimizeCondition(left);    rightParent    =    tryMinimizeCondition(rightParent);    	non-compiled	[CE]  	62	None	replace
349	[BUG]  [BUGGY]  Neighbor  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Neighbor  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Neighbor  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);	  left    =    tryMinimizeCondition(left,    right);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	63	None	replace
350	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left,  right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left,  right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
351	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMaximizeCondition(right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMaximizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left);  right  =  tryMaximizeCondition(right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
352	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left  +  1);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  Node  left  =  tryMinimizeCondition(left  +  1);  right  =  tryMinimizeCondition(right);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left  +  1);  right  =  tryMinimizeCondition(right);	  Node    left    =    tryMinimizeCondition(left);    right    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	61	None	replace
353	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right,  n);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right,  n);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left,    right);    	non-compiled	[CE]  	37	None	replace
354	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);            [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  left);  [BUGGY]      if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode,  left);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left,    falseNode);    	non-compiled	[CE]  	53	None	replace
