bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(n);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(left);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(n);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLeftValue(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLeftValue(right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right,  left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left);    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  left);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left);    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  right);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left);    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  +  1);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left);    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left);    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(falseNode,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(trueNode,  right);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode,  false);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode,  false);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(n);	      	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(n);	      	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(n);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(n);  right  =  tryMinimizeCondition(n);	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  right  =  tryMinimizeCondition(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(left);	      	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(right);  right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
31	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
32	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  1);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  1);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(right,  left);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(right);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left);    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  left);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left);    	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left);    	non-compiled	[CE]  	8	None	replace
37	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left);    	non-compiled	[CE]  	8	None	replace
38	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getFirstChild();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getFirstChild();	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue();	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnerValue(left);	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
41	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOwnValue(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOwnValue(left);	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
42	[BUG]  [BUGGY]  TernaryValue  rightVal  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  n.getLastChild();	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
43	[BUG]  [BUGGY]  TernaryValue  rightVal  =  node.getLastChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  node.getLastChild();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  node.getLastChild();	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(right);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left);    	non-compiled	[CE]  	5	None	replace
45	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  left);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left);    	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  n);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left);    	non-compiled	[CE]  	5	None	replace
47	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left);    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  right);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left);    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(left);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left);    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  -  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left  -  1);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(left);    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(RIGHT,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  falseNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  leftVal  =  NodeUtil.getBooleanValue(right,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getLocalValue(left);    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  false);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  false);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  false);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left);    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptLastChild();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptLastChild();	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getOptValue(left);    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue();  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastValue();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastValue();	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  1);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left  -  1);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left,  falseNode);	  TernaryValue    rightVal    =    NodeUtil.getRawValue(left);    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(rightParent);	      	non-compiled	[CE]  	7	None	replace
63	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	left  =  tryMinimizeCondition(left,  right);  right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
64	[BUG]  [BUGGY]  Node  right  =  tryMinimizeCondition(left);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  Node  right  =  tryMinimizeCondition(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  right  =  tryMinimizeCondition(left);	      	non-compiled	[CE]  	7	None	replace
65	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  Right  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Right  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
66	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  1);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left  +  1);	  TernaryValue    rightVal    =    NodeUtil.getAssignedValue(left);    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getImmutableValue(left);	  TernaryValue    rightVal    =    NodeUtil.getLastChild();    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	leftParent  =  tryMinimizeCondition(left);  rightParent  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
69	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  right  =  tryMinimizeCondition(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	right  =  tryMinimizeCondition(right);	      	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  Node  rightParent  =  right.getParent();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  Node  rightParent  =  right.getParent();  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	Node  rightParent  =  right.getParent();	      	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(right);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLightValue(right);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLightValue(right);	  TernaryValue    rightVal    =    NodeUtil.getRightValue(right);    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  trueNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  trueNode);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getStringValue(right,  trueNode);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(right,    trueNode);    	non-compiled	[CE]  	9	None	replace
73	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  true);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);          [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  true);  [BUGGY]    if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left,  true);	  TernaryValue    rightVal    =    NodeUtil.getBooleanValue(left);    	non-compiled	[CE]  	1	None	replace
