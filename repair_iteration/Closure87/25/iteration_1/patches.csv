bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  NodeUtil.newNumber(newNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(newNode);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  parent.replaceChild(n,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	parent.replaceChild(n,  newNode);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  return  NodeUtil.newNumber(n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(n);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(n);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  Node  newNode  =  NodeUtil.newNumber(num);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  Node  newNode  =  NodeUtil.newNumber(num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	Node  newNode  =  NodeUtil.newNumber(num);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  num);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  NodeUtil.removeChild(parent,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	NodeUtil.removeChild(parent,  num);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	NodeUtil.removeChild(parent);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent,  num  +  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(parent,  num  +  1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(parent,  num  +  1);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent,  newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(parent,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(parent,  newNode);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  Node  newNode  =  NodeUtil.newNumber(parent,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  Node  newNode  =  NodeUtil.newNumber(parent,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	Node  newNode  =  NodeUtil.newNumber(parent,  num);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  return  NodeUtil.newNumber(n,  num);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(n,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(n,  num);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent,  num,  newNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(parent,  num,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(parent,  num,  newNode);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT,    num):    null;    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent,  num):  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent,  num):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent,  num):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT,    num):    null;    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT,    num):    null;    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent):  null;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT,    num):    null;    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent.num);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent.num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent.num);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent;    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.FUNCTION?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent;    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent;    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.VAR?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.VAR?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent;    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.FUNCTION?  newNode  :  Node.newString(Token.NAME,  num);	  return    parent;    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  return  parent.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
32	[BUG]  [BUGGY]  return  n.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  return  newNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  return  parent.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.NAME,  num):  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.NAME,  num):  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.NAME,  num):  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
36	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.NAME):  n.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.NAME):  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.NAME):  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  new  Node(Token.NAME,  num):  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  new  Node(Token.NAME,  num):  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.FUNCTION?  new  Node(Token.NAME,  num):  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	13	None	replace
38	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  n;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  n;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    n;    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  parent;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  parent;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  parent;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    n;    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  n;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  n;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    n;    	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  n;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  n;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    n;    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent):  n;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent):  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  parent):  n;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    n;    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	NodeTraversal.traverse(compiler,  n,  newNode);	      	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	NodeTraversal.traverse(compiler,  newNode,  this);	      	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  n.removeChild(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  newNode.removeChild(parent);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  newNode.removeChild(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	newNode.removeChild(parent);	      	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this);	      	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  return  newNode.getLastChild();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getLastChild();	      	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	3	None	replace
51	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent.num));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent.num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent.num));	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	3	None	replace
52	[BUG]  [BUGGY]  return  parent.cloneTree();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.cloneTree();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
53	[BUG]  [BUGGY]  return  newNode.cloneTree();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.cloneTree();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
54	[BUG]  [BUGGY]  return  n.cloneNode();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.cloneNode();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.cloneNode();	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
55	[BUG]  [BUGGY]  return  n.clone();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.clone();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.clone();	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.cloneChildren();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.cloneChildren();	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
58	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
59	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
60	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n  :  Node.newNumber(0);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n  :  Node.newNumber(0);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  n  :  Node.newNumber(0);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
62	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num  +  1));	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
63	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
64	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode));	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
65	[BUG]  [BUGGY]  return  newNode.getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getNext();	  return    newNode;    	non-compiled	[CE]  	1	None	replace
66	[BUG]  [BUGGY]  return  newNode.removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.removeFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.removeFirstChild();	  return    newNode;    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    null;    	non-compiled	[CE]  	14	None	replace
68	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    null;    	non-compiled	[CE]  	14	None	replace
69	[BUG]  [BUGGY]  return  new  Node(Token.EXPR_RESULT).getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  new  Node(Token.EXPR_RESULT).getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  new  Node(Token.EXPR_RESULT).getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    null;    	non-compiled	[CE]  	14	None	replace
70	[BUG]  [BUGGY]  return  parent.removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.removeFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.removeFirstChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
71	[BUG]  [BUGGY]  return  parent.replaceChild(n,  newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.replaceChild(n,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.replaceChild(n,  newNode);	  return    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	17	None	replace
73	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	17	None	replace
74	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n  :  Node.newString(Token.NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  n  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	17	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  false);	      	non-compiled	[CE]  	8	None	replace
76	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME,  num));	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
77	[BUG]  [BUGGY]  return  n.cloneChild(parent);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.cloneChild(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.cloneChild(parent);	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
78	[BUG]  [BUGGY]  return  n.cloneTree(parent);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.cloneTree(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.cloneTree(parent);	  return    n.cloneTree();    	non-compiled	[CE]  	11	None	replace
79	[BUG]  [BUGGY]  return  newNode.removeChild(parent);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.removeChild(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.removeChild(parent);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
80	[BUG]  [BUGGY]  return  newNode  {  parent.replaceChild(n,  newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  {  parent.replaceChild(n,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  {  parent.replaceChild(n,  newNode);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
81	[BUG]  [BUGGY]  return  newNode  {  parent.replaceChild(parent,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  {  parent.replaceChild(parent,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  {  parent.replaceChild(parent,  num);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
82	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  name);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  name);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  name);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent));	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	3	None	replace
84	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NUMBER?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NUMBER?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NUMBER?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent;    	non-compiled	[CE]  	2	None	replace
85	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NUMBER?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NUMBER?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NUMBER?  newNode  :  Node.newString(Token.NAME,  num);	  return    parent;    	non-compiled	[CE]  	2	None	replace
86	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num)+  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num)+  1;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num)+  1;	  return    parent;    	non-compiled	[CE]  	2	None	replace
87	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    parent;    	non-compiled	[CE]  	2	None	replace
88	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNode(parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNode(parent);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
89	[BUG]  [BUGGY]  return  NodeUtil.newNumber(n,  parent);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(n,  parent);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(n,  parent);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
90	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNode(parent,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNode(parent,  num);	  return    NodeUtil.newNumber(parent);    	non-compiled	[CE]  	12	None	replace
91	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent,  n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(parent,  n);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(parent,  n);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
92	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent,  num  +  1,  newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  NodeUtil.newNumber(parent,  num  +  1,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  NodeUtil.newNumber(parent,  num  +  1,  newNode);	  return    NodeUtil.newNumber(parent,    num);    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(num);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
94	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
95	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(2);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(2);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(2);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
96	[BUG]  [BUGGY]  return  n.replaceChild(parent,  newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.replaceChild(parent,  newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.replaceChild(parent,  newNode);	  return    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
97	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode,  num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode,  num);	  return    parent;    	non-compiled	[CE]  	2	None	replace
98	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    parent;    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  n):  new  Node(newNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  n):  new  Node(newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  n):  new  Node(newNode);	  return    parent;    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode);	  return    parent;    	non-compiled	[CE]  	2	None	replace
101	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num++);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num++);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num++);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  n):  null;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  n):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  n):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    null;    	non-compiled	[CE]  	14	None	replace
105	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  new  Node(Token.EXPR_RESULT):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    null;    	non-compiled	[CE]  	14	None	replace
106	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  newNode;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  newNode;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  newNode;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT):    n;    	non-compiled	[CE]  	7	None	replace
107	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num  +  1):  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num  +  1):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT,  num  +  1):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT,    num):    null;    	non-compiled	[CE]  	16	None	replace
108	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  new  Node(Token.EXPR_RESULT,  num):  null;	  return    n.getType()    ==    Token.NAME?    new    Node(Token.EXPR_RESULT,    num):    null;    	non-compiled	[CE]  	16	None	replace
109	[BUG]  [BUGGY]  return  Node.newNumber(parent.getType());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  Node.newNumber(parent.getType());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  Node.newNumber(parent.getType());	      	non-compiled	[CE]  	8	None	replace
110	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	17	None	replace
111	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
112	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
113	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
114	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
115	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(Token.NAME,  num);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(Token.NAME,  num);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(Token.NAME,  num);	  return    newNode;    	non-compiled	[CE]  	1	None	replace
116	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	3	None	replace
117	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode.getString()  :  Node.newString(Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode.getString()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  newNode.getString()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
118	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getFirstChild().getString()  :  Node.newString(Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getFirstChild().getString()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  parent.getFirstChild().getString()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
119	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.NAME):  Node.newString(Token.NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  new  Node(Token.NAME):  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  new  Node(Token.NAME):  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	4	None	replace
120	[BUG]  [BUGGY]  return  n.removeLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.removeLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.removeLastChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
121	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num  +  1);	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
122	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));	  return    n.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	5	None	replace
123	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(1);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
124	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newNumber(0);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }    [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newNumber(0);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	826	826	1	replace	return  n.getType()!=  Token.NAME?  newNode  :  Node.newNumber(0);	  return    n.getType()    ==    Token.NAME?    newNode    :    Node.newNumber(0);    	non-compiled	[CE]  	15	None	replace
