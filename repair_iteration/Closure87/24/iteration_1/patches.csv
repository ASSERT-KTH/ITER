bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(newNode!=  null  &&!parent.isEquivalentTo(newNode))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(newNode!=  null  ||!parent.isEquivalentTo(newNode))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  ||!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  ||!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(newNode))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if(newNode  ==  null  &&!parent.isEquivalentTo(newNode))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  &&!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  &&!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  if  (!parent.isEquivalentTo(newNode)||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if  (!parent.isEquivalentTo(newNode)||  n.getType()  ==  Token.NAME)  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if  (!parent.isEquivalentTo(newNode)||  n.getType()  ==  Token.NAME)  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(parent!=  null  &&!newNode.isEquivalentTo(n))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent!=  null  &&!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent!=  null  &&!newNode.isEquivalentTo(n))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  if(newNode!=  null  &&  newNode.isEquivalentTo(n))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&  newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&  newNode.isEquivalentTo(n))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(n.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(n.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(parent))  {	  if(parent.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&  newNode.isEquivalentTo(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&  newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  &&  newNode.isEquivalentTo(parent))  {	  if(parent.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(n))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(n))  {	  if(parent.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  if(newNode!=  null  ||!newNode.isEquivalentTo(newNode))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  ||!newNode.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  ||!newNode.isEquivalentTo(newNode))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  if(newNode!=  null  &&  newNode.isEquivalentTo(newNode))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&  newNode.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&  newNode.isEquivalentTo(newNode))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  if(parent!=  null  &&!newNode.isEquivalentTo(newNode))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent!=  null  &&!newNode.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent!=  null  &&!newNode.isEquivalentTo(newNode))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(parent))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(newNode))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(newNode))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&!newNode.equals(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  &&!newNode.equals(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  &&!newNode.equals(parent))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  if(newNode!=  null  ||!newNode.isEquivalentTo(parent))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  ||!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  ||!newNode.isEquivalentTo(parent))  {	  if    (!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(n))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(newNode))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(n.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(n.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(newNode))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME  ||  newNode.isEquivalentTo(n))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()  ==  Token.NAME  ||  newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()  ==  Token.NAME  ||  newNode.isEquivalentTo(n))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  if(newNode!=  parent.getType()  &&!newNode.isEquivalentTo(n))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent.getType()  &&!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent.getType()  &&!newNode.isEquivalentTo(n))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  if(newNode!=  parent.getType()  ||!newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent.getType()  ||!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent.getType()  ||!newNode.isEquivalentTo(parent))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  if(newNode  ==  parent.getType()  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  parent.getType()  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  parent.getType()  ||!newNode.isEquivalentTo(n))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  if(newNode!=  parent.getType()  ||!node.isEquivalentTo(newNode))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent.getType()  ||!node.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent.getType()  ||!node.isEquivalentTo(newNode))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  if(newNode!=  parent.getFirstChild()  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent.getFirstChild()  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent.getFirstChild()  ||!newNode.isEquivalentTo(n))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  if(newNode!=  null  &&  newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&  newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&  newNode.isEquivalentTo(parent))  {	  if    (newNode!=    null    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num);	      	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(num);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  Node  newNode  =  Node.newNumber(num);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	Node  newNode  =  Node.newNumber(num);	      	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  parent.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  parent.replaceChild(n,  newNode);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num);  parent.replaceChild(n,  newNode);	      	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  newNode.addChildToBack(newNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  newNode.addChildToBack(newNode);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num);  newNode.addChildToBack(newNode);	      	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	NodeTraversal.traverse(compiler,  newNode,  this);	      	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  newNode.removeChild(n);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num);  newNode.removeChild(n);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num);  newNode.removeChild(n);	      	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  if(newNode  ==  null  &&!newNode.isEquivalentTo(n))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  &&!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  &&!newNode.isEquivalentTo(n))  {	  if(newNode!=    null    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  if(newNode  ==  null  &&!newNode.isEquivalentTo(parent))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  &&!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  &&!newNode.isEquivalentTo(parent))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	NodeTraversal.traverse(compiler,  n,  newNode);	      	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  NodeUtil.removeChild(newNode);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	NodeUtil.removeChild(newNode);	      	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  newNode.removeChild(parent);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  newNode.removeChild(parent);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	newNode.removeChild(parent);	      	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  NodeUtil.removeChild(parent,  newNode);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	NodeUtil.removeChild(parent,  newNode);	      	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	NodeTraversal.traverse(compiler,  newNode,  false);	      	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  if(newNode  ==  null  &&!newNode.isEquivalentTo(newNode))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  &&!newNode.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  &&!newNode.isEquivalentTo(newNode))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
41	[BUG]  [BUGGY]  if(newNode!=  null  &&!newNode.equals(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&!newNode.equals(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&!newNode.equals(parent))  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  if(newNode  ==  null  ||!newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  ||!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  ||!newNode.isEquivalentTo(parent))  {	  if(newNode!=    null    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	2	None	replace
43	[BUG]  [BUGGY]  if(newNode  ==  null  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  ||!newNode.isEquivalentTo(n))  {	  if(newNode!=    null    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	2	None	replace
44	[BUG]  [BUGGY]  if(newNode!=  null  ||  newNode!=  parent.getType()  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  ||  newNode!=  parent.getType()  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  ||  newNode!=  parent.getType()  ||!newNode.isEquivalentTo(n))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  if(parent!=  null  ||  newNode!=  parent.getType()  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent!=  null  ||  newNode!=  parent.getType()  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent!=  null  ||  newNode!=  parent.getType()  ||!newNode.isEquivalentTo(n))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  if  (parent!=  null  &&!newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if  (parent!=  null  &&!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if  (parent!=  null  &&!newNode.isEquivalentTo(parent))  {	  if    (newNode!=    null    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  if  (!newNode.isEquivalentTo(parent)||  newNode.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if  (!newNode.isEquivalentTo(parent)||  newNode.getType()  ==  Token.NAME)  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if  (!newNode.isEquivalentTo(parent)||  newNode.getType()  ==  Token.NAME)  {	  if    (!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  if  (!parent.isEquivalentTo(newNode)&&  newNode!=  parent.removeChild(n))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if  (!parent.isEquivalentTo(newNode)&&  newNode!=  parent.removeChild(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if  (!parent.isEquivalentTo(newNode)&&  newNode!=  parent.removeChild(n))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  if  (!parent.isEquivalentTo(newNode)&&  newNode!=  parent.getFirstChild())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if  (!parent.isEquivalentTo(newNode)&&  newNode!=  parent.getFirstChild())  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if  (!parent.isEquivalentTo(newNode)&&  newNode!=  parent.getFirstChild())  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(n))  {	  if(parent.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  if(newNode  ==  parent.getType()  ||!newNode.isEquivalentTo(parent))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  parent.getType()  ||!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  parent.getType()  ||!newNode.isEquivalentTo(parent))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  if(newNode!=  parent.getType()  &&!newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent.getType()  &&!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent.getType()  &&!newNode.isEquivalentTo(parent))  {	  if(newNode!=    parent.getType()    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  if(newNode!=  parent.getType()  ||!parent.isEquivalentTo(newNode))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent.getType()  ||!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent.getType()  ||!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(newNode))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent.getType()  ==  Token.NAME  &&!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  if(newNode  ==  null  ||!parent.isEquivalentTo(newNode))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode  ==  null  ||!parent.isEquivalentTo(newNode))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode  ==  null  ||!parent.isEquivalentTo(newNode))  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  if(!parent.isEquivalentTo(newNode)&&  newNode!=  parent.removeFirstChild())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(!parent.isEquivalentTo(newNode)&&  newNode!=  parent.removeFirstChild())  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(!parent.isEquivalentTo(newNode)&&  newNode!=  parent.removeFirstChild())  {	  if    (!parent.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(parent))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent.getType()  ==  Token.NAME  &&!newNode.isEquivalentTo(parent))  {	  if    (!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	5	None	replace
58	[BUG]  [BUGGY]  if(!newNode.isEquivalentTo(parent)||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(!newNode.isEquivalentTo(parent)||  n.getType()  ==  Token.NAME)  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(!newNode.isEquivalentTo(parent)||  n.getType()  ==  Token.NAME)  {	  if    (!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	5	None	replace
59	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!newNode.equals(parent.getType()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!newNode.equals(parent.getType()))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent.getType()  ==  Token.NAME  &&!newNode.equals(parent.getType()))  {	  if    (!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  if(newNode!=  null  &&!newNode.hasChildren())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&!newNode.hasChildren())  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&!newNode.hasChildren())  {	  if    (newNode!=    null    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  if(newNode.getType()!=  Token.NAME  &&!newNode.isEquivalentTo(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode.getType()!=  Token.NAME  &&!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode.getType()!=  Token.NAME  &&!newNode.isEquivalentTo(parent))  {	  if(newNode.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(parent))    {    	non-compiled	[CE]  	10	None	replace
62	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(parent))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(parent.getType()  ==  Token.NAME  ||!newNode.isEquivalentTo(parent))  {	  if(parent.getType()    ==    Token.NAME    &&!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  if(newNode!=  null  &&  newNode.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&  newNode.getType()  ==  Token.NAME)  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&  newNode.getType()  ==  Token.NAME)  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
64	[BUG]  [BUGGY]  if(newNode!=  null  &&  newNode.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  null  &&  newNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  null  &&  newNode.getType()  ==  Token.FUNCTION)  {	  if(newNode!=    null    &&!newNode.isEquivalentTo(newNode))    {    	non-compiled	[CE]  	3	None	replace
65	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n);	      	non-compiled	[CE]  	6	None	replace
66	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode);  newNode.removeChild(parent);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  NodeUtil.removeChild(newNode);  newNode.removeChild(parent);  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	NodeUtil.removeChild(newNode);  newNode.removeChild(parent);	      	non-compiled	[CE]  	6	None	replace
67	[BUG]  [BUGGY]  if(newNode!=  parent  ||!newNode.isEquivalentTo(n))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);    [BUGGY]  if(newNode!=  parent  ||!newNode.isEquivalentTo(n))  {  [BUGGY]    parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	819	819	1	replace	if(newNode!=  parent  ||!newNode.isEquivalentTo(n))  {	  if(newNode!=    null    ||!newNode.isEquivalentTo(n))    {    	non-compiled	[CE]  	2	None	replace
