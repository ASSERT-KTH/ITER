bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
2	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getExpression(thenBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
3	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
4	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch);  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getExpr(thenBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
5	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpression(cond);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
6	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
7	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n);  [CE]  ')'  expected  [FE]                AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpression(n);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
8	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]                  AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]    [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	  	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
9	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
10	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
11	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  n);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  n);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  n);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
12	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr);  [BUGGY]  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr);	Node  expr  =  getBlockExpression(thenBranch);  	non-compiled	[CE]  ')'  expected	15	None	replace
