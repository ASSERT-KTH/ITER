bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  expr  =  cond.getLastChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  cond.getLastChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  cond.getLastChild();	  Node    expr    =    cond.getFirstChild();    	non-compiled	[CE]  ')'  expected	67	None	replace
2	[BUG]  [BUGGY]  Node  expr  =  cond.getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  cond.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  cond.getNext();	  Node    expr    =    cond.getFirstChild();    	non-compiled	[CE]  ')'  expected	67	None	replace
3	[BUG]  [BUGGY]  Node  expr  =  firstBranch.getFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  firstBranch.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  firstBranch.getFirstChild();	  Node    expr    =    cond.getFirstChild();    	non-compiled	[CE]  ')'  expected	67	None	replace
4	[BUG]  [BUGGY]  Node  expr  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  n.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  n.getFirstChild();	  Node    expr    =    cond.getFirstChild();    	non-compiled	[CE]  ')'  expected	67	None	replace
5	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentInExpression(cond);	  Node    expr    =    getPropertyAssignmentInExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	10	None	replace
6	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentInExpression(thenBranch,  elseBranch);	  Node    expr    =    getPropertyAssignmentInExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	10	None	replace
7	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentInExpression(n);	  Node    expr    =    getPropertyAssignmentInExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	10	None	replace
8	[BUG]  [BUGGY]  Node  expr  =  getAssignmentInExpression(thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignmentInExpression(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignmentInExpression(thenBranch);	  Node    expr    =    getPropertyAssignmentInExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	10	None	replace
9	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(cond);	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
10	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(thenBranch,  elseBranch);	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
11	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(elseBranch);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(elseBranch);	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
12	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(n);	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
13	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpression(thenBranch,  elseBranch);	  Node    expr    =    getDeclaredExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	39	None	replace
14	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpression(thenBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpression(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpression(thenBranch);	  Node    expr    =    getDeclaredExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	39	None	replace
15	[BUG]  [BUGGY]  Node  expr  =  getImmutableExpression(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getImmutableExpression(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getImmutableExpression(thenBranch);	  Node    expr    =    getExpression(elseBranch);    	non-compiled	[CE]  ')'  expected	58	None	replace
16	[BUG]  [BUGGY]  Node  assign  =  thenBranch.getLastChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  thenBranch.getLastChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  thenBranch.getLastChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
17	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  cond.getFirstChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
18	[BUG]  [BUGGY]  Node  assign  =  elseBranch.getLastChild();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  elseBranch.getLastChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  elseBranch.getLastChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
19	[BUG]  [BUGGY]  Node  assign  =  firstBranch.getFirstChild();  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  firstBranch.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  firstBranch.getFirstChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
20	[BUG]  [BUGGY]  Node  assign  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  expr.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  expr.getFirstChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
21	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getParent();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getParent();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getParent();	  Node    expr    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	34	None	replace
22	[BUG]  [BUGGY]  Node  expr  =  firstBranch.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  firstBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  firstBranch.getNext();	  Node    expr    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	34	None	replace
23	[BUG]  [BUGGY]  Node  expr  =  nextBranch.getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  nextBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  nextBranch.getNext();	  Node    expr    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	34	None	replace
24	[BUG]  [BUGGY]  Node  expr  =  n.getNext();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  n.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  n.getNext();	  Node    expr    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	34	None	replace
25	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignBlock(thenBranch);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignBlock(thenBranch);	  Node    expr    =    getFoldableExpressBlock(cond);    	non-compiled	[CE]  ')'  expected	22	None	replace
26	[BUG]  [BUGGY]  Node  expr  =  getExpressionBlock(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpressionBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpressionBlock(thenBranch);	  Node    expr    =    getFoldableExpressBlock(cond);    	non-compiled	[CE]  ')'  expected	22	None	replace
27	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpr(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpr(thenBranch);	  Node    expr    =    getFoldableExpressBlock(cond);    	non-compiled	[CE]  ')'  expected	22	None	replace
28	[BUG]  [BUGGY]  Node  expr  =  createExpr(thenBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  createExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  createExpr(thenBranch);	  Node    expr    =    getExpr(lhs);    	non-compiled	[CE]  ')'  expected	18	None	replace
29	[BUG]  [BUGGY]  Node  assign  =  cond.getNext();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  cond.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  cond.getNext();	  Node    assign    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
30	[BUG]  [BUGGY]  Node  assign  =  thenBranch.getParent();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  thenBranch.getParent();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  thenBranch.getParent();	  Node    assign    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
31	[BUG]  [BUGGY]  Node  assign  =  firstBranch.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  firstBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  firstBranch.getNext();	  Node    assign    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
32	[BUG]  [BUGGY]  Node  assign  =  n.getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  n.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  n.getNext();	  Node    assign    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
33	[BUG]  [BUGGY]  Node  assign  =  nextBranch.getNext();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  nextBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  nextBranch.getNext();	  Node    assign    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
34	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  n);	  Node    expr    =    getOwnExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
35	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  elseBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  elseBranch);	  Node    expr    =    getOwnExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
36	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(const,  n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(const,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(const,  n);	  Node    expr    =    getOwnExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
37	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
38	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
39	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  elseBranch);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
40	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  thenBranch,  elseBranch);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
41	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  assign,  elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  assign,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  assign,  elseBranch);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
42	[BUG]  [BUGGY]  Node  expr  =  getExpr(cond,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(cond,  expr);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
43	[BUG]  [BUGGY]  Node  expr  =  getExpr(cond,  elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(cond,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(cond,  elseBranch);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
44	[BUG]  [BUGGY]  Node  expr  =  getExpr(n,  elseBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(n,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(n,  elseBranch);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
45	[BUG]  [BUGGY]  Node  expr  =  getExpr(n,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(n,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(n,  expr);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
46	[BUG]  [BUGGY]  Node  expr  =  getExpr(const,  expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(const,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(const,  expr);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
47	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpression(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpression(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpression(cond);	  Node    expr    =    getPropertyExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	69	None	replace
48	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpression(thenBranch,  elseBranch);	  Node    expr    =    getPropertyExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	69	None	replace
49	[BUG]  [BUGGY]  Node  expr  =  getFoldibleExpressBlock(thenBranch);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldibleExpressBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldibleExpressBlock(thenBranch);	  Node    expr    =    getFoldibleExpressBlock(elseBranch);    	non-compiled	[CE]  ')'  expected	61	None	replace
50	[BUG]  [BUGGY]  Node  expr  =  getFoldibleExprBlock(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldibleExprBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldibleExprBlock(thenBranch);	  Node    expr    =    getFoldibleExpressBlock(elseBranch);    	non-compiled	[CE]  ')'  expected	61	None	replace
51	[BUG]  [BUGGY]  Node  expr  =  getFoldibleExpressBlock(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldibleExpressBlock(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldibleExpressBlock(thenBranch,  elseBranch);	  Node    expr    =    getFoldibleExpressBlock(elseBranch);    	non-compiled	[CE]  ')'  expected	61	None	replace
52	[BUG]  [BUGGY]  Node  cond  =  thenBranch.getParent();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenBranch.getParent();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenBranch.getParent();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
53	[BUG]  [BUGGY]  Node  cond  =  elseBranch.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  elseBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  elseBranch.getNext();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
54	[BUG]  [BUGGY]  Node  cond  =  firstBranch.getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  firstBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  firstBranch.getNext();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
55	[BUG]  [BUGGY]  Node  cond  =  nextBranch.getNext();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  nextBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  nextBranch.getNext();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
56	[BUG]  [BUGGY]  Node  cond  =  n.getNext();  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  n.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  n.getNext();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
57	[BUG]  [BUGGY]  Node  cond  =  expr.getNext();  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  expr.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  expr.getNext();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
58	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
59	[BUG]  [BUGGY]  Node  expr  =  getExpression(cond,  thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(cond,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(cond,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
60	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(cond,  thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(cond,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(cond,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
61	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
62	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  exprBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  exprBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  exprBlock);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
63	[BUG]  [BUGGY]  Node  expr  =  getExprExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExprExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExprExpression(thenBranch,  elseBranch);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
64	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  thenBranch);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  thenBranch);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
65	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(cond);	  Node    expr    =    getAssignExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	38	None	replace
66	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(thenBranch,  elseBranch);	  Node    expr    =    getAssignExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	38	None	replace
67	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(n);	  Node    expr    =    getAssignExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	38	None	replace
68	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(elseBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(elseBranch);	  Node    expr    =    getAssignExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	38	None	replace
69	[BUG]  [BUGGY]  Node  expr  =  elseBranch.getExpr(cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  elseBranch.getExpr(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  elseBranch.getExpr(cond);	  Node    expr    =    getExpr(cond);    	non-compiled	[CE]  ')'  expected	15	None	replace
70	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpr(thenBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpr(thenBranch);	  Node    expr    =    getBlockExpr(elseBranch);    	non-compiled	[CE]  ')'  expected	43	None	replace
71	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  n.getFirstChild();	  Node    assign    =    thenBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	36	None	replace
72	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(cond,  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(cond,  expr);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
73	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(cond,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(cond,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(cond,  elseBranch);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
74	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(n,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(n,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(n,  expr);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
75	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
76	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  expr  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  expr  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
77	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  expr  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  expr  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
78	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
79	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch  -  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
80	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  expr  -  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch,  expr  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
81	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch  -  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  elseBranch  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
82	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  true);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  true);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  true);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
83	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
84	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  false,  cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  false,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  false,  cond);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
85	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch,  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  elseBranch,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
86	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  null);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  null);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
87	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
88	[BUG]  [BUGGY]  Node  expr  =  getExpression(cond,  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(cond,  expr);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
89	[BUG]  [BUGGY]  Node  expr  =  getExpression(cond,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(cond,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(cond,  elseBranch);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
90	[BUG]  [BUGGY]  Node  expr  =  getExpression(n,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(n,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(n,  elseBranch);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
91	[BUG]  [BUGGY]  Node  expr  =  getExpression(lastBranch,  elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(lastBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(lastBranch,  elseBranch);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
92	[BUG]  [BUGGY]  Node  expr  =  getExpression(n,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(n,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(n,  expr);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
93	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  expr);	  Node    expr    =    getOwnExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	64	None	replace
94	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(lastBranch,  elseBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(lastBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(lastBranch,  elseBranch);	  Node    expr    =    getOwnExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	64	None	replace
95	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  n);	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
96	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  expr);	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
97	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  cond);	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
98	[BUG]  [BUGGY]  Node  expr  =  elseBranch.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  elseBranch.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  elseBranch.getFirstChild();	  Node    expr    =    thenBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	54	None	replace
99	[BUG]  [BUGGY]  Node  expr  =  nextBranch.getFirstChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  nextBranch.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  nextBranch.getFirstChild();	  Node    expr    =    thenBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	54	None	replace
100	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch  +  1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
101	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  expr  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  expr  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
102	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  expr  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  expr  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
103	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
104	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
105	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  expr  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch,  expr  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
106	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch  +  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
107	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)/  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)/  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)/  1;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
108	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  2;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  2;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  2;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
109	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)-  1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)-  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)-  1;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
110	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  3;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  3;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  3;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
111	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch)+  1;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch)+  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch)+  1;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
112	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  1L;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  1L;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  1L;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
113	[BUG]  [BUGGY]  Node  expr  =  getAssign(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssign(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssign(thenBranch);	  Node    expr    =    getPropertyAssign(cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
114	[BUG]  [BUGGY]  Node  expr  =  getReturnNode(thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getReturnNode(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getReturnNode(thenBranch);	  Node    expr    =    getPropertyAssign(cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
115	[BUG]  [BUGGY]  Node  expr  =  getPropertyInstantiation(thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyInstantiation(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyInstantiation(thenBranch);	  Node    expr    =    getPropertyAssign(cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
116	[BUG]  [BUGGY]  Node  expr  =  getPropertyInstantiator(thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyInstantiator(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyInstantiator(thenBranch);	  Node    expr    =    getPropertyAssign(cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
117	[BUG]  [BUGGY]  Node  expr  =  n.getLastChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  n.getLastChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  n.getLastChild();	  Node    expr    =    thenBranch.getLastChild();    	non-compiled	[CE]  ')'  expected	55	None	replace
118	[BUG]  [BUGGY]  Node  expr  =  getExprBlock(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExprBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExprBlock(thenBranch);	  Node    expr    =    getFoldableExpressBlock(condBranch);    	non-compiled	[CE]  ')'  expected	63	None	replace
119	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr);	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
120	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
121	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  cond);	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
122	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.getParent());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.getParent());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.getParent());	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
123	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.getLastChild());	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
124	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  n);	  Node    expr    =    getBlockExpression(cond,    n);    	non-compiled	[CE]  ')'  expected	25	None	replace
125	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpression(thenBranch,  n);	  Node    expr    =    getBlockExpression(cond,    n);    	non-compiled	[CE]  ')'  expected	25	None	replace
126	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(thenBranch,  elseBranch);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
127	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(n);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
128	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(elseBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(elseBranch);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
129	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(lhs);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(lhs);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(lhs);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
130	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentBlock(cond);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
131	[BUG]  [BUGGY]  Node  expr  =  getAssignmentBlock(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignmentBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignmentBlock(thenBranch);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
132	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentBlock(n);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
133	[BUG]  [BUGGY]  Node  expr  =  getImmutableExpressionBlock(thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getImmutableExpressionBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getImmutableExpressionBlock(thenBranch);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
134	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpressionBlock(thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpressionBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpressionBlock(thenBranch);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
135	[BUG]  [BUGGY]  Node  expr  =  getOwnExpr(thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpr(thenBranch);	  Node    expr    =    getOwnExpression(cond);    	non-compiled	[CE]  ')'  expected	19	None	replace
136	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  n);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    n);    	non-compiled	[CE]  ')'  expected	28	None	replace
137	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch,  thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  elseBranch,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    n);    	non-compiled	[CE]  ')'  expected	28	None	replace
138	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  parent);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  parent);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    n);    	non-compiled	[CE]  ')'  expected	28	None	replace
139	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.getFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
140	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
141	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
142	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
143	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
144	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  elseBranch.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  elseBranch.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  elseBranch.getFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
145	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  elseBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  elseBranch,  expr.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
146	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch,  expr);	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
147	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch,  n);	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
148	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.cloneTree());	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
149	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.getParent());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.getParent());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.getParent());	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
150	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch,  cond);	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
151	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.next());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.next());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
152	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.next());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.next());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
153	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.getNext());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.getNext());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.getNext());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
154	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.next());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.next());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
155	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.next(),  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.next(),  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.next(),  cond);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
156	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  true);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  true);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
157	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  false);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
158	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  false,  cond);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
159	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(elseBranch,  false);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
160	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  elseBranch);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  false,  elseBranch);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
161	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  null);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  null);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  null);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
162	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  n,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  n,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  n,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    n,    expr);    	non-compiled	[CE]  ')'  expected	78	None	replace
163	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(n,  thenBranch,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(n,  thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(n,  thenBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    n,    expr);    	non-compiled	[CE]  ')'  expected	78	None	replace
164	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  cond,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    n,    expr);    	non-compiled	[CE]  ')'  expected	78	None	replace
165	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  thenBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    n,    expr);    	non-compiled	[CE]  ')'  expected	78	None	replace
166	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  n,  elseBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  n,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  n,  elseBranch);	  Node    expr    =    getBlockExpression(thenBranch,    n,    expr);    	non-compiled	[CE]  ')'  expected	78	None	replace
167	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  secondBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  secondBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  secondBranch);	  Node    expr    =    getOwnExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	48	None	replace
168	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(consd,  thenBranch);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(consd,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(consd,  thenBranch);	  Node    expr    =    getOwnExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	48	None	replace
169	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    cond);    	non-compiled	[CE]  ')'  expected	30	None	replace
170	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(consd,  elseBranch,  thenBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(consd,  elseBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(consd,  elseBranch,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    cond);    	non-compiled	[CE]  ')'  expected	30	None	replace
171	[BUG]  [BUGGY]  Node  expr  =  cond.removeFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  cond.removeFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  cond.removeFirstChild();	  Node    expr    =    thenBranch.removeFirstChild();    	non-compiled	[CE]  ')'  expected	56	None	replace
172	[BUG]  [BUGGY]  Node  expr  =  elseBranch.removeFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  elseBranch.removeFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  elseBranch.removeFirstChild();	  Node    expr    =    thenBranch.removeFirstChild();    	non-compiled	[CE]  ')'  expected	56	None	replace
173	[BUG]  [BUGGY]  Node  expr  =  thenBranch.removeLastChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.removeLastChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.removeLastChild();	  Node    expr    =    thenBranch.removeFirstChild();    	non-compiled	[CE]  ')'  expected	56	None	replace
174	[BUG]  [BUGGY]  Node  expr  =  getExpr(cond,  thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(cond,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(cond,  thenBranch);	  Node    expr    =    getExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	71	None	replace
175	[BUG]  [BUGGY]  Node  expr  =  getExpression(cond,  secondBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(cond,  secondBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(cond,  secondBranch);	  Node    expr    =    getExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	71	None	replace
176	[BUG]  [BUGGY]  Node  expr  =  getExpression(consd,  thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(consd,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(consd,  thenBranch);	  Node    expr    =    getExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	71	None	replace
177	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
178	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  elseBranch.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
179	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  thenBranch.cloneTree());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  thenBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  thenBranch.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
180	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  cond.cloneTree());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  cond.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  cond.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
181	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(cond,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(cond,  expr.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
182	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  thenBranch.cloneTree());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  thenBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  thenBranch.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
183	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  newExpr.cloneTree());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  newExpr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  newExpr.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
184	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  expr.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
185	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  cond);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
186	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
187	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  thenBranch,  elseBranch.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
188	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
189	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  cond,  elseBranch.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
190	[BUG]  [BUGGY]  Node  expr  =  getExpr(n  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(n  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(n  -  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
191	[BUG]  [BUGGY]  Node  expr  =  getExpr(cond  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(cond  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(cond  -  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
192	[BUG]  [BUGGY]  Node  expr  =  getExpr(elseBranch  -  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(elseBranch  -  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
193	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch  -  2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch  -  2);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch  -  2);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
194	[BUG]  [BUGGY]  Node  expr  =  getExpr(n.getFirstChild()  -  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(n.getFirstChild()  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(n.getFirstChild()  -  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
195	[BUG]  [BUGGY]  Node  expr  =  getExpr(n.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(n.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(n.getFirstChild());	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
196	[BUG]  [BUGGY]  Node  expr  =  getExpr(cond,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(cond,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(cond,  n);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
197	[BUG]  [BUGGY]  Node  expr  =  getExpr(n,  thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(n,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(n,  thenBranch);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
198	[BUG]  [BUGGY]  Node  expr  =  getExpr(const,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(const,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(const,  n);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
199	[BUG]  [BUGGY]  Node  expr  =  getExpr(cond,  nextBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(cond,  nextBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(cond,  nextBranch);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
200	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(cond,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(cond,  elseBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
201	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
202	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  n);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
203	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  cond);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
204	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch);	  Node    expr    =    getBlockExpression(n,    thenBranch);    	non-compiled	[CE]  ')'  expected	26	None	replace
205	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(cond,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(cond,  expr);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
206	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(cond,  elseBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(cond,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(cond,  elseBranch);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
207	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpr(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpr(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpr(thenBranch,  elseBranch);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
208	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(n,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(n,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(n,  elseBranch);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
209	[BUG]  [BUGGY]  Node  expr  =  secondBranch.getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  secondBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  secondBranch.getNext();	  Node    expr    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	32	None	replace
210	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  thenBranch);	  Node    expr    =    getBlockExpression(elseBranch,    thenBranch);    	non-compiled	[CE]  ')'  expected	50	None	replace
211	[BUG]  [BUGGY]  Node  expr  =  getExpression(cond,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(cond,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(cond,  n);	  Node    expr    =    getExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	59	None	replace
212	[BUG]  [BUGGY]  Node  expr  =  getExpression(n,  thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(n,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(n,  thenBranch);	  Node    expr    =    getExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	59	None	replace
213	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
214	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.cloneTree());	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
215	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.getParent());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.getParent());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.getParent());	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
216	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch,  expr.getLastChild());	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
217	[BUG]  [BUGGY]  Node  expr  =  getExprExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExprExpression(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExprExpression(thenBranch,  expr);	  Node    expr    =    getBlockExpression(cond,    expr);    	non-compiled	[CE]  ')'  expected	5	None	replace
218	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr);	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
219	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(n,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(n,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(n,  elseBranch);	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
220	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  n);	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
221	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  nextBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  nextBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  nextBranch);	  Node    expr    =    getBlockExpression(elseBranch,    n);    	non-compiled	[CE]  ')'  expected	52	None	replace
222	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  secondBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  secondBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  secondBranch);	  Node    expr    =    getBlockExpression(elseBranch,    n);    	non-compiled	[CE]  ')'  expected	52	None	replace
223	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  otherBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  otherBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  otherBranch);	  Node    expr    =    getBlockExpression(elseBranch,    n);    	non-compiled	[CE]  ')'  expected	52	None	replace
224	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getOwnExpression(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getOwnExpression(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getOwnExpression(cond);	  Node    expr    =    getOwnExpression(cond);    	non-compiled	[CE]  ')'  expected	19	None	replace
225	[BUG]  [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findBlockExpression(thenBranch,  elseBranch);	  Node    expr    =    getBlockExpression(cond,    elseBranch);    	non-compiled	[CE]  ')'  expected	7	None	replace
226	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(thenBranch,  n);	  Node    expr    =    getBlockExpression(cond,    n);    	non-compiled	[CE]  ')'  expected	25	None	replace
227	[BUG]  [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findBlockExpression(thenBranch,  n);	  Node    expr    =    getBlockExpression(cond,    n);    	non-compiled	[CE]  ')'  expected	25	None	replace
228	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  exprBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  exprBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(elseBranch,  exprBlock);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
229	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  nextBranch);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  nextBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  nextBranch);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
230	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  false);	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
231	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  n);	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
232	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch)+  1;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch)+  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch)+  1;	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
233	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch,  elseBranch);	  Node    expr    =    getBlockExpression(n,    elseBranch);    	non-compiled	[CE]  ')'  expected	8	None	replace
234	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(elseBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentBlock(elseBranch);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
235	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentBlock(thenBranch,  elseBranch);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
236	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  cond);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
237	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  thenBranch);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
238	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  nextBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  nextBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  nextBranch);	  Node    expr    =    getExpr(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	45	None	replace
239	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
240	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
241	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
242	[BUG]  [BUGGY]  Node  assign  =  nextBranch.getFirstChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  nextBranch.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  nextBranch.getFirstChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
243	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
244	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
245	[BUG]  [BUGGY]  Node  expr  =  getExpression(const,  thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(const,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(const,  thenBranch);	  Node    expr    =    getExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	71	None	replace
246	[BUG]  [BUGGY]  Node  cond  =  thenBranch.removeFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenBranch.removeFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenBranch.removeFirstChild();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
247	[BUG]  [BUGGY]  Node  cond  =  thenBranch.getFirstChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenBranch.getFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenBranch.getFirstChild();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
248	[BUG]  [BUGGY]  Node  cond  =  thenBranch.getPrevious();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenBranch.getPrevious();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenBranch.getPrevious();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
249	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.getNext()  +  1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.getNext()  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.getNext()  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
250	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr  +  2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr  +  2);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr  +  2);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
251	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
252	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr  *  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr  *  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr  *  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
253	[BUG]  [BUGGY]  Node  expr  =  getFoldableExprBlock(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExprBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExprBlock(thenBranch);	  Node    expr    =    getFoldableExpressBlock(n);    	non-compiled	[CE]  ')'  expected	23	None	replace
254	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(thenBranch,  cond);	  Node    expr    =    getAssignExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	38	None	replace
255	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getExpr(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getExpr(n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getExpr(n);	  Node    expr    =    getExpr(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
256	[BUG]  [BUGGY]  Node  expr  =  n.getExpr();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  n.getExpr();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  n.getExpr();	  Node    expr    =    getExpr(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
257	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getExpression(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getExpression(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getExpression(cond);	  Node    expr    =    getExpression(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
258	[BUG]  [BUGGY]  Node  expr  =  getAssignment(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignment(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignment(thenBranch);	  Node    expr    =    getExpression(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
259	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(elseBranch,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(elseBranch,  expr);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
260	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  expr  +  1);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
261	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(n,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(n,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(n,  expr);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
262	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  n);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
263	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  expr  +  1);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
264	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(elseBranch,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(elseBranch,  expr);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
265	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  expr  -  1);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
266	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch,  cond);	  Node    expr    =    getBlockExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
267	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  firstBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  firstBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  firstBranch);	  Node    expr    =    getBlockExpression(n,    thenBranch);    	non-compiled	[CE]  ')'  expected	26	None	replace
268	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  n.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  n.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  n.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
269	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  nextBranch.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  nextBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  nextBranch.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
270	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  secondBranch.cloneTree());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  secondBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  secondBranch.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
271	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch)+  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch)+  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch)+  1;	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
272	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch)-  1;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch)-  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch)-  1;	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
273	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(elseBranch,  thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(elseBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(elseBranch,  thenBranch);	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
274	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch  -  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch  -  1);	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
275	[BUG]  [BUGGY]  Node  assign  =  secondBranch.getNext();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  secondBranch.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  secondBranch.getNext();	  Node    assign    =    elseBranch.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
276	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(elseBranch,  cond);	  Node    expr    =    getOwnExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	48	None	replace
277	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(const,  thenBranch);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(const,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(const,  thenBranch);	  Node    expr    =    getOwnExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	48	None	replace
278	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(const,  elseBranch,  thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(const,  elseBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(const,  elseBranch,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    cond);    	non-compiled	[CE]  ')'  expected	30	None	replace
279	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getExpr(elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getExpr(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getExpr(elseBranch);	  Node    expr    =    getExpr(elseBranch);    	non-compiled	[CE]  ')'  expected	13	None	replace
280	[BUG]  [BUGGY]  Node  expr  =  getExprBlock(elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExprBlock(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExprBlock(elseBranch);	  Node    expr    =    getExpr(elseBranch);    	non-compiled	[CE]  ')'  expected	13	None	replace
281	[BUG]  [BUGGY]  Node  expr  =  n.getExpr(thenBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  n.getExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  n.getExpr(thenBranch);	  Node    expr    =    getExpr(elseBranch);    	non-compiled	[CE]  ')'  expected	13	None	replace
282	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpression(elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpression(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpression(elseBranch);	  Node    expr    =    getPropertyExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	69	None	replace
283	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.getFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
284	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.getFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
285	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  cond,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  cond,  expr.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
286	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
287	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  expr  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  expr  +  1);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
288	[BUG]  [BUGGY]  Node  expr  =  getExpr(consume,  thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(consume,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(consume,  thenBranch);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
289	[BUG]  [BUGGY]  Node  expr  =  getExpr(elseBranch,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(elseBranch,  expr);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
290	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  0;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  0;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)+  0;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
291	[BUG]  [BUGGY]  Node  expr  =  findExpr(thenBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findExpr(thenBranch);	  Node    expr    =    getExpr(lhs);    	non-compiled	[CE]  ')'  expected	18	None	replace
292	[BUG]  [BUGGY]  Node  expr  =  addExpr(thenBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  addExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  addExpr(thenBranch);	  Node    expr    =    getExpr(lhs);    	non-compiled	[CE]  ')'  expected	18	None	replace
293	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  elseBranch,  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  elseBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch,  elseBranch,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
294	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  thenBranch,  false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(elseBranch,  thenBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(elseBranch,  thenBranch,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
295	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
296	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(thenBranch,  expr);	  Node    expr    =    getBlockExpression(cond,    expr);    	non-compiled	[CE]  ')'  expected	5	None	replace
297	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.next());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond.next());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
298	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.next(),  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.next(),  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.next(),  false);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
299	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(elseBranch,  n);	  Node    expr    =    getOwnExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
300	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(thenBranch,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(thenBranch,  n);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
301	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpression(elseBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpression(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpression(elseBranch);	  Node    expr    =    getDeclaredExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	39	None	replace
302	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpression(thenBranch,  cond);	  Node    expr    =    getDeclaredExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	39	None	replace
303	[BUG]  [BUGGY]  Node  expr  =  getFoldExpr(thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldExpr(thenBranch);	  Node    expr    =    getBlockExpr(n);    	non-compiled	[CE]  ')'  expected	3	None	replace
304	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch  -  1  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch  -  1  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch  -  1  +  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
305	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch  +  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
306	[BUG]  [BUGGY]  Node  expr  =  getExpressionExpr(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpressionExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpressionExpr(thenBranch);	  Node    expr    =    getBlockExpr(cond);    	non-compiled	[CE]  ')'  expected	1	None	replace
307	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  true);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  false,  true);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
308	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  n);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(thenBranch,  n);	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
309	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(thenBranch,  expr);	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
310	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(elseBranch,  thenBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(elseBranch,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(elseBranch,  thenBranch);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
311	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch.cloneTree());	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
312	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch)+  1;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch)+  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch)+  1;	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
313	[BUG]  [BUGGY]  Node  expr  =  getFoldeExpressBlock(thenBranch);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldeExpressBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldeExpressBlock(thenBranch);	  Node    expr    =    getFoldibleExpressBlock(elseBranch);    	non-compiled	[CE]  ')'  expected	61	None	replace
314	[BUG]  [BUGGY]  Node  expr  =  getFoldExpressBlock(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldExpressBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldExpressBlock(thenBranch);	  Node    expr    =    getFoldibleExpressBlock(elseBranch);    	non-compiled	[CE]  ')'  expected	61	None	replace
315	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  expr  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  expr  +  1);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
316	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(elseBranch);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentInExpression(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentInExpression(elseBranch);	  Node    expr    =    getPropertyAssignmentInExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	10	None	replace
317	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentInBlock(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentInBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentInBlock(thenBranch);	  Node    expr    =    getPropertyAssignmentInExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	10	None	replace
318	[BUG]  [BUGGY]  Node  expr  =  getExprAssign(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExprAssign(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExprAssign(thenBranch);	  Node    expr    =    getPropertyAssign(cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
319	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  expr  +  1);	  Node    expr    =    getOwnExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	64	None	replace
320	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(elseBranch,  expr);	  Node    expr    =    getOwnExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	64	None	replace
321	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr,  elseBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  expr,  elseBranch);	  Node    expr    =    getOwnExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	64	None	replace
322	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getPrevious();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getPrevious();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getPrevious();	  Node    expr    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	32	None	replace
323	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  nextBranch,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  nextBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  nextBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    n,    expr);    	non-compiled	[CE]  ')'  expected	78	None	replace
324	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  ref);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  ref);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  ref);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    n);    	non-compiled	[CE]  ')'  expected	28	None	replace
325	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    n);    	non-compiled	[CE]  ')'  expected	28	None	replace
326	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  thenBranch,  expr.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
327	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
328	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
329	[BUG]  [BUGGY]  Node  expr  =  getOwnExpr(elseBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpr(elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpr(elseBranch);	  Node    expr    =    getOwnExpression(elseBranch);    	non-compiled	[CE]  ')'  expected	21	None	replace
330	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch)+  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch)+  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch)+  1;	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
331	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch)+  1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch)+  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch)+  1;	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
332	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch)-  1;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch)-  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch)-  1;	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
333	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch  -  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch  -  1);	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
334	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  nextBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  nextBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  nextBranch);	  Node    expr    =    getExpression(thenBranch,    n);    	non-compiled	[CE]  ')'  expected	59	None	replace
335	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getExpr(thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getExpr(thenBranch);	  Node    expr    =    getExpr(cond);    	non-compiled	[CE]  ')'  expected	15	None	replace
336	[BUG]  [BUGGY]  Node  expr  =  thenBranch.getExpr(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.getExpr(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.getExpr(cond);	  Node    expr    =    getExpr(cond);    	non-compiled	[CE]  ')'  expected	15	None	replace
337	[BUG]  [BUGGY]  Node  expr  =  thenBranch.cloneTree();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenBranch.cloneTree();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenBranch.cloneTree();	  Node    expr    =    thenBranch.removeFirstChild();    	non-compiled	[CE]  ')'  expected	56	None	replace
338	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.next());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.next());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
339	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.removeFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.removeFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.next());    	non-compiled	[CE]  ')'  expected	76	None	replace
340	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpr(thenBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpr(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpr(thenBranch);	  Node    expr    =    getBlockExpr(elseBranch);    	non-compiled	[CE]  ')'  expected	43	None	replace
341	[BUG]  [BUGGY]  Node  expr  =  findExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findExpression(thenBranch,  elseBranch);	  Node    expr    =    getExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	71	None	replace
342	[BUG]  [BUGGY]  Node  expr  =  getExpression(lastBranch,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(lastBranch,  cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(lastBranch,  cond);	  Node    expr    =    getExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	71	None	replace
343	[BUG]  [BUGGY]  Node  expr  =  doExpressBlock(thenBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  doExpressBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  doExpressBlock(thenBranch);	  Node    expr    =    getExpr(cond);    	non-compiled	[CE]  ')'  expected	15	None	replace
344	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(thenBranch,  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignmentBlock(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignmentBlock(thenBranch,  expr);	  Node    expr    =    getPropertyAssignmentBlock(thenBranch);    	non-compiled	[CE]  ')'  expected	62	None	replace
345	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpression(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpression(thenBranch,  expr);	  Node    expr    =    getPropertyExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	69	None	replace
346	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpression(thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpression(thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpression(thenBranch,  expr.cloneTree());	  Node    expr    =    getPropertyExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	69	None	replace
347	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch  *  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch  *  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch  *  1);	  Node    expr    =    getExpr(thenBranch    -    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
348	[BUG]  [BUGGY]  Node  expr  =  thenAssign.getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  thenAssign.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  thenAssign.getNext();	  Node    expr    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	32	None	replace
349	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr.cloneTree());	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
350	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr.next());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  elseBranch,  expr.next());	  Node    expr    =    getBlockExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	2	None	replace
351	[BUG]  [BUGGY]  Node  assign  =  thenBranch.removeFirstChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  thenBranch.removeFirstChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  thenBranch.removeFirstChild();	  Node    assign    =    elseBranch.getFirstChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
352	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr);    	non-compiled	[CE]  ')'  expected	27	None	replace
353	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  n,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    n);    	non-compiled	[CE]  ')'  expected	28	None	replace
354	[BUG]  [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.next());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(thenBranch,  elseBranch,  expr.next());	  Node    expr    =    getExpr(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	16	None	replace
355	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch.getFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
356	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  cond.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  cond.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  cond.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
357	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  thenBranch.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  thenBranch.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  thenBranch.getLastChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
358	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.getFirstChild());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	77	None	replace
359	[BUG]  [BUGGY]  Node  expr  =  addBlockExpression(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  addBlockExpression(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  addBlockExpression(thenBranch,  elseBranch);	  Node    expr    =    getBlockExpression(elseBranch,    thenBranch);    	non-compiled	[CE]  ')'  expected	50	None	replace
360	[BUG]  [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  exprBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getAssignExpression(thenBranch,  exprBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getAssignExpression(thenBranch,  exprBlock);	  Node    expr    =    getAssignExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	38	None	replace
361	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpress(thenBranch);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpress(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpress(thenBranch);	  Node    expr    =    getFoldableExpressBlock(cond);    	non-compiled	[CE]  ')'  expected	22	None	replace
362	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  cond,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    cond);    	non-compiled	[CE]  ')'  expected	30	None	replace
363	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  otherBranch,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  otherBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  otherBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    cond);    	non-compiled	[CE]  ')'  expected	30	None	replace
364	[BUG]  [BUGGY]  Node  assign  =  thenAssign.getNext();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  assign  =  thenAssign.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  assign  =  thenAssign.getNext();	  Node    assign    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	37	None	replace
365	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssignment(thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssignment(thenBranch,  expr.cloneTree());	  Node    expr    =    getPropertyAssignment(thenBranch);    	non-compiled	[CE]  ')'  expected	14	None	replace
366	[BUG]  [BUGGY]  Node  expr  =  findExpression(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findExpression(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findExpression(thenBranch);	  Node    expr    =    getExpression(elseBranch);    	non-compiled	[CE]  ')'  expected	58	None	replace
367	[BUG]  [BUGGY]  Node  expr  =  convertExpression(thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  convertExpression(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  convertExpression(thenBranch);	  Node    expr    =    getExpression(elseBranch);    	non-compiled	[CE]  ')'  expected	58	None	replace
368	[BUG]  [BUGGY]  Node  cond  =  thenBranch.getLastChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenBranch.getLastChild();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenBranch.getLastChild();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
369	[BUG]  [BUGGY]  Node  cond  =  thenBranch.cloneTree();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenBranch.cloneTree();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenBranch.cloneTree();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
370	[BUG]  [BUGGY]  Node  cond  =  thenAssign.getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  cond  =  thenAssign.getNext();  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  cond  =  thenAssign.getNext();	  Node    cond    =    thenBranch.getNext();    	non-compiled	[CE]  ')'  expected	57	None	replace
371	[BUG]  [BUGGY]  Node  expr  =  getPropertyExpressBlock(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyExpressBlock(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyExpressBlock(thenBranch);	  Node    expr    =    getFoldableExpressBlock(n);    	non-compiled	[CE]  ')'  expected	23	None	replace
372	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  cond,  expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  cond,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  cond,  expr);	  Node    expr    =    getOwnExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	48	None	replace
373	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  expr);	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
374	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  expr.cloneTree());	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
375	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  false);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  expr.cloneTree(),  false);	  Node    expr    =    getOwnExpression(thenBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	65	None	replace
376	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(cond,  thenBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(cond,  thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(cond,  thenBranch);	  Node    expr    =    getBlockExpression(thenBranch,    cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
377	[BUG]  [BUGGY]  Node  expr  =  createExpr(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  createExpr(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  createExpr(thenBranch,  elseBranch);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
378	[BUG]  [BUGGY]  Node  expr  =  getExpr(firstBranch,  elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpr(firstBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpr(firstBranch,  elseBranch);	  Node    expr    =    getExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	72	None	replace
379	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  expr.cloneTree());	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
380	[BUG]  [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpr(thenBranch,  expr,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpr(thenBranch,  expr,  elseBranch);	  Node    expr    =    getBlockExpr(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
381	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.length  +  1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.length  +  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.length  +  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
382	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  isFoldableExpressBlock);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  isFoldableExpressBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  false,  isFoldableExpressBlock);	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
383	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  false,  expr.getFirstChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  false,  expr.getFirstChild());	  Node    expr    =    getOwnExpression(thenBranch,    false);    	non-compiled	[CE]  ')'  expected	46	None	replace
384	[BUG]  [BUGGY]  Node  expr  =  doExpressBlock(thenBranch,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  doExpressBlock(thenBranch,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  doExpressBlock(thenBranch,  elseBranch);	  Node    expr    =    getBlockExpression(cond,    elseBranch);    	non-compiled	[CE]  ')'  expected	7	None	replace
385	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  expr.cloneTree());	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
386	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr,  elseBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  expr,  elseBranch);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
387	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  expr  -  1);	  Node    expr    =    getFoldableExpressBlock(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	68	None	replace
388	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.cloneTree());	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
389	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.next());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.next());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.next());	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
390	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.getLastChild());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  elseBranch,  expr.getLastChild());	  Node    expr    =    getExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	6	None	replace
391	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  elseBranch,  expr);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
392	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseOp);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  elseOp);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  elseOp);	  Node    expr    =    getBlockExpression(thenBranch,    expr,    elseBranch);    	non-compiled	[CE]  ')'  expected	73	None	replace
393	[BUG]  [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch)-  1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch)-  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getFoldableExpressBlock(thenBranch,  elseBranch)-  1;	  Node    expr    =    getFoldableExpressBlock(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	9	None	replace
394	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(thenBranch,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(thenBranch,  expr);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
395	[BUG]  [BUGGY]  Node  expr  =  getPropertyAssign(lhsBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getPropertyAssign(lhsBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getPropertyAssign(lhsBranch);	  Node    expr    =    getPropertyAssign(thenBranch);    	non-compiled	[CE]  ')'  expected	4	None	replace
396	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.length  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.length  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.length  -  1);	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
397	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    expr    -    1);    	non-compiled	[CE]  ')'  expected	74	None	replace
398	[BUG]  [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findBlockExpression(thenBranch,  expr);	  Node    expr    =    getBlockExpression(cond,    expr);    	non-compiled	[CE]  ')'  expected	5	None	replace
399	[BUG]  [BUGGY]  Node  expr  =  doExpressBlock(thenBranch,  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  doExpressBlock(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  doExpressBlock(thenBranch,  expr);	  Node    expr    =    getBlockExpression(cond,    expr);    	non-compiled	[CE]  ')'  expected	5	None	replace
400	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr  -  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  expr  -  1);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  expr  -  1);	  Node    expr    =    getOwnExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	64	None	replace
401	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  exprBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  exprBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  exprBranch);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
402	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  exprIsExpressionBlock);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  exprIsExpressionBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  exprIsExpressionBlock);	  Node    expr    =    getOwnExpression(thenBranch,    exprBlock);    	non-compiled	[CE]  ')'  expected	66	None	replace
403	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.type);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  expr.type);	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
404	[BUG]  [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  exprIsExpressionBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  exprIsExpressionBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getOwnExpression(thenBranch,  elseBranch,  exprIsExpressionBlock);	  Node    expr    =    getOwnExpression(thenBranch,    elseBranch);    	non-compiled	[CE]  ')'  expected	20	None	replace
405	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpression(thenBranch,  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpression(thenBranch,  expr);	  Node    expr    =    getDeclaredExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	39	None	replace
406	[BUG]  [BUGGY]  Node  expr  =  getDeclaredExpression(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getDeclaredExpression(cond);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getDeclaredExpression(cond);	  Node    expr    =    getDeclaredExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	39	None	replace
407	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)/  2  +  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch)/  2  +  1;  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch)/  2  +  1;	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch)+    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
408	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  expr.cloneTree());	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
409	[BUG]  [BUGGY]  Node  expr  =  getExpression(thenBranch,  expr,  elseBranch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getExpression(thenBranch,  expr,  elseBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getExpression(thenBranch,  expr,  elseBranch);	  Node    expr    =    getExpression(thenBranch,    expr);    	non-compiled	[CE]  ')'  expected	70	None	replace
410	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  false,  thenBranchIsExpressionBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  false,  thenBranchIsExpressionBlock);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  false,  thenBranchIsExpressionBlock);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
411	[BUG]  [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  elseBranch,  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  findBlockExpression(thenBranch,  elseBranch,  true);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  findBlockExpression(thenBranch,  elseBranch,  true);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    false);    	non-compiled	[CE]  ')'  expected	29	None	replace
412	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  expr.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
413	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  cond.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  cond.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  cond.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
414	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.cloneTree(),  elseBranch.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr.cloneTree(),  elseBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr.cloneTree(),  elseBranch.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
415	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  expr);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  elseBranch,  expr.cloneTree(),  expr);	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
416	[BUG]  [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  thenBranch.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  getBlockExpression(thenBranch,  expr,  thenBranch.cloneTree());  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  getBlockExpression(thenBranch,  expr,  thenBranch.cloneTree());	  Node    expr    =    getBlockExpression(thenBranch,    elseBranch,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	75	None	replace
417	[BUG]  [BUGGY]  Node  expr  =  addExpression(thenBranch);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {      [BUGGY]  Node  expr  =  addExpression(thenBranch);  [BUGGY]      if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	276	276	1	replace	Node  expr  =  addExpression(thenBranch);	  Node    expr    =    getExpression(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
