bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  newOp);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  newOp);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  nVal,  newOp);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
3	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  newRoot,  newOp);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  newRoot,  newOp);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  newRoot,  newOp);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
4	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  type);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  type);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  type);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
5	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  precedence);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  precedence);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp,  precedence);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
6	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBooleanObject()?  false  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBooleanObject()?  false  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBooleanObject()?  false  :  false;	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBooleanObject()?  trueNode  :  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBooleanObject()?  trueNode  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBooleanObject()?  trueNode  :  false;	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBooleanObject()  ||  nVal.toBooleanObject();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBooleanObject()  ||  nVal.toBooleanObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBooleanObject()  ||  nVal.toBooleanObject();	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
9	[BUG]  [BUGGY]  Boolean  result  =  nVal.toUpperCase();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toUpperCase();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toUpperCase();	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  Boolean  result  =  nVal.toString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toString();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toString();	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  Boolean  result  =  nVal.toStringObject();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toStringObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toStringObject();	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
12	[BUG]  [BUGGY]  int  parent  =  nVal.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.getNext();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.getNext();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  int  parent  =  nVal.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.getLastChild();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.getLastChild();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  int  parent  =  nVal.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.getFirstChild();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.getFirstChild();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  int  parent  =  leftParent.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  leftParent.getParent();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  leftParent.getParent();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  int  parent  =  nVal.getParent()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.getParent()  +  1;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.getParent()  +  1;	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  int  parent  =  nVal.getPrevious();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.getPrevious();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.getPrevious();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  boolean  result  =  nVal!=  null  &&  nVal.toBoolean(false,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal!=  null  &&  nVal.toBoolean(false,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal!=  null  &&  nVal.toBoolean(false,  true);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
19	[BUG]  [BUGGY]  boolean  result  =  nVal!=  null  &&  nVal.toBoolean(false,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal!=  null  &&  nVal.toBoolean(false,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal!=  null  &&  nVal.toBoolean(false,  false);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
20	[BUG]  [BUGGY]  boolean  result  =  nVal!=  null  &&  nVal.toBoolean(true,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal!=  null  &&  nVal.toBoolean(true,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal!=  null  &&  nVal.toBoolean(true,  false);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
21	[BUG]  [BUGGY]  boolean  result  =  nVal!=  null  ||  nVal.toBoolean(true,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal!=  null  ||  nVal.toBoolean(true,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal!=  null  ||  nVal.toBoolean(true,  true);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
22	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(true,  false);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
23	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(true,  true);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
24	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(trueNode,  false);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
25	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  trueNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(true,  trueNode);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  nVal,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  nVal,  parent);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  nVal,  parent);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
27	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
28	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
29	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
30	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
31	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  leftParent,  nVal);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
32	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  parent);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  nVal,  parent);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  leftParent,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isLowerBoolean();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isLowerBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isLowerBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
39	[BUG]  [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isUpperBoolean();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isUpperBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isUpperBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
40	[BUG]  [BUGGY]  boolean  result  =  nVal.isBoolean();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
41	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  null);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(true,  null);	  Boolean    result    =    nVal.toBoolean(false,    true);    	non-compiled	[CE]  	32	None	replace
42	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  falseNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(trueNode,  falseNode);	  boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	18	None	replace
43	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(trueNode,  trueNode);	  boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	18	None	replace
44	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  rightParent,  nVal);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
45	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  leftParent,  nVal);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  falseNode);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
47	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal.intVal());	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  rval);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  trueNode);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  trueNode);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean()?  trueNode  :  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean()?  trueNode  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean()?  trueNode  :  false;	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean()?  false  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean()?  false  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean()?  false  :  false;	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
52	[BUG]  [BUGGY]  Boolean  result  =  nVal.toLowerCase();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toLowerCase();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toLowerCase();	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
53	[BUG]  [BUGGY]  boolean  result  =  nVal.isLocal();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isLocal();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isLocal();	  boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  boolean  result  =  nVal.isUnknown();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isUnknown();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isUnknown();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  boolean  result  =  nVal.isNumber()  ||  nVal.isInfinite();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNumber()  ||  nVal.isInfinite();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNumber()  ||  nVal.isInfinite();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
56	[BUG]  [BUGGY]  boolean  result  =  nVal.isInfinite();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isInfinite();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isInfinite();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
57	[BUG]  [BUGGY]  boolean  result  =  trueNode.toBoolean(false,  nVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  trueNode.toBoolean(false,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  trueNode.toBoolean(false,  nVal);	  boolean    result    =    trueNode.toBoolean(true,    nVal);    	non-compiled	[CE]  	20	None	replace
58	[BUG]  [BUGGY]  boolean  result  =  falseNode.toBoolean(true,  nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  falseNode.toBoolean(true,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  falseNode.toBoolean(true,  nVal);	  boolean    result    =    trueNode.toBoolean(true,    nVal);    	non-compiled	[CE]  	20	None	replace
59	[BUG]  [BUGGY]  boolean  result  =  falseNode.toBoolean(false,  nVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  falseNode.toBoolean(false,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  falseNode.toBoolean(false,  nVal);	  boolean    result    =    trueNode.toBoolean(true,    nVal);    	non-compiled	[CE]  	20	None	replace
60	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isInfinite();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isInfinite();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isInfinite();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
61	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isLowerBound();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isLowerBound();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isLowerBound();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
62	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isLowerCase();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isLowerCase();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
63	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(trueNode,  false);	  boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	15	None	replace
64	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(trueNode,  falseNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(trueNode,  trueNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
66	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(true,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(true,  falseNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
67	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(false,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(false,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(false,  falseNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
68	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(false,  falseNode,  falseNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(false,  falseNode,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(false,  falseNode,  falseNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
69	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(false,  falseNode,  trueNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(false,  falseNode,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(false,  falseNode,  trueNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
70	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(false,  TernaryValue.UNKNOWN);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(false,  TernaryValue.UNKNOWN);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(false,  TernaryValue.UNKNOWN);	  boolean    result    =    nVal.toBoolean(true,    falseNode);    	non-compiled	[CE]  	19	None	replace
71	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.FUNCTION;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.FUNCTION;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
72	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NAME;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NAME;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NAME;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
73	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.VAR;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.VAR;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
74	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()!=  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()!=  Token.FUNCTION;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()!=  Token.FUNCTION;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
75	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.GETPROP;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.GETPROP;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.GETPROP;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
76	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE,  nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
77	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
78	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
79	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(nVal,  parent,  OR_PRECEDENCE);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(nVal,  parent,  OR_PRECEDENCE);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(nVal,  parent,  OR_PRECEDENCE);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE  ||  OR_PRECEDENCE);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE  ||  OR_PRECEDENCE);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE  ||  OR_PRECEDENCE);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
81	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE,  equalVal);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE,  equalVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE,  equalVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
82	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  trueNode);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
83	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  nVal,  falseNode);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
84	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  leftParent,  falseNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  leftParent,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  leftParent,  falseNode);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
85	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  falseNode,  nVal);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  falseNode,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  falseNode,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
86	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(nVal,  parent,  falseNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(nVal,  parent,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(nVal,  parent,  falseNode);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
87	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  rightParent,  falseNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  rightParent,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  rightParent,  falseNode);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
88	[BUG]  [BUGGY]  Node  parent  =  nVal.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  nVal.getNext();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  nVal.getNext();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  Node  parent  =  nVal.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  nVal.getLastChild();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  nVal.getLastChild();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  Node  parent  =  nVal.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  nVal.getFirstChild();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  nVal.getFirstChild();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  Node  parent  =  nVal.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  nVal.removeFirstChild();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  nVal.removeFirstChild();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  Node  parent  =  nVal.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  nVal.cloneTree();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  nVal.cloneTree();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  Node  parent  =  leftParent.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  leftParent.getParent();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  leftParent.getParent();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
94	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue();	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
95	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()  ==  TernaryValue.UNKNOWN;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()  ==  TernaryValue.UNKNOWN;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()  ==  TernaryValue.UNKNOWN;	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
96	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()!=  TernaryValue.UNKNOWN;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()!=  TernaryValue.UNKNOWN;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()!=  TernaryValue.UNKNOWN;	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
97	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue());	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
98	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()  >  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()  >  0;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()  ||  nVal.booleanValue()  >  0;	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
99	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()?  trueNode  :  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()?  trueNode  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()?  trueNode  :  false;	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
100	[BUG]  [BUGGY]  boolean  result  =  nVal.toBooleanObject()  ||  nVal.toBooleanObject();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBooleanObject()  ||  nVal.toBooleanObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBooleanObject()  ||  nVal.toBooleanObject();	  boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	9	None	replace
101	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NAME?  trueNode  :  nVal.toBooleanObject();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NAME?  trueNode  :  nVal.toBooleanObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.NAME?  trueNode  :  nVal.toBooleanObject();	  boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	9	None	replace
102	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NAME  &&  nVal.toBooleanObject();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NAME  &&  nVal.toBooleanObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.NAME  &&  nVal.toBooleanObject();	  boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	9	None	replace
103	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NAME?  false  :  nVal.toBooleanObject();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NAME?  false  :  nVal.toBooleanObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.NAME?  false  :  nVal.toBooleanObject();	  boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	9	None	replace
104	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.BLOCK;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.BLOCK;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.BLOCK;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
105	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.NAME;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.NAME;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.NAME;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
106	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.GETPROP;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.GETPROP;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.GETPROP;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
107	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.FUNCTION;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.FUNCTION;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
108	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()!=  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()!=  Token.BLOCK;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()!=  Token.BLOCK;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
109	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent);    	non-compiled	[CE]  	22	None	replace
110	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(nVal,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(nVal,  parent);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(nVal,  parent);	  int    result    =    maybeReplaceChildWithNumber(n,    parent);    	non-compiled	[CE]  	22	None	replace
111	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  equalVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  equalVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  equalVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent);    	non-compiled	[CE]  	22	None	replace
112	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);	  int    result    =    maybeReplaceChildWithNumber(n,    parent);    	non-compiled	[CE]  	22	None	replace
113	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  equals);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  equals);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  equals);	  int    result    =    maybeReplaceChildWithNumber(n,    parent);    	non-compiled	[CE]  	22	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.FUNCTION);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getString());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getString());	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getFirstChild());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getFirstChild());	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getType());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getType());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal.getType());	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.VAR);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.VAR);	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.GETPROP);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.GETPROP);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.GETPROP);	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NAME);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NAME);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.GETPROP);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.GETPROP);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.VAR);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.VAR);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()!=  Token.FUNCTION);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()!=  Token.FUNCTION);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()!=  Token.FUNCTION);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.EMPTY);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.EMPTY);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.EMPTY);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
126	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
127	[BUG]  [BUGGY]  Boolean  result  =  nVal!=  null?  false  :  nVal.booleanValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal!=  null?  false  :  nVal.booleanValue();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal!=  null?  false  :  nVal.booleanValue();	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
128	[BUG]  [BUGGY]  Boolean  result  =  nVal  ==  null?  false  :  nVal.booleanValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal  ==  null?  false  :  nVal.booleanValue();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal  ==  null?  false  :  nVal.booleanValue();	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
129	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()  &&  nVal.booleanValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()  &&  nVal.booleanValue();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()  &&  nVal.booleanValue();	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
130	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(falseNode,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(falseNode,  trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(falseNode,  trueNode);	  boolean    result    =    nVal.toBoolean(true,    falseNode);    	non-compiled	[CE]  	19	None	replace
131	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(falseNode,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(falseNode,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(falseNode,  falseNode);	  boolean    result    =    nVal.toBoolean(true,    falseNode);    	non-compiled	[CE]  	19	None	replace
132	[BUG]  [BUGGY]  boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(false,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(false,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(false,  true);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
133	[BUG]  [BUGGY]  boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(true,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(true,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(true,  false);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
134	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(trueNode);	  boolean    result    =    nVal.toBoolean(false,    falseNode);    	non-compiled	[CE]  	17	None	replace
135	[BUG]  [BUGGY]  boolean  result  =  falseNode.toBoolean(nVal,  falseNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  falseNode.toBoolean(nVal,  falseNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  falseNode.toBoolean(nVal,  falseNode);	  boolean    result    =    nVal.toBoolean(false,    falseNode);    	non-compiled	[CE]  	17	None	replace
136	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
137	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp  +  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp  +  1);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
138	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp  -  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  newOp  -  1);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
139	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NUMBER;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.NUMBER;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.NUMBER;	  boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	9	None	replace
140	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  TernaryValue.BLOCK;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  TernaryValue.BLOCK;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  TernaryValue.BLOCK;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
141	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal!=  TernaryValue.UNKNOWN;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal!=  TernaryValue.UNKNOWN;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal!=  TernaryValue.UNKNOWN;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
142	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.NUMBER;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.NUMBER;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.NUMBER;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
143	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.UNKNOWN;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.UNKNOWN;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.UNKNOWN;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
144	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  null);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  null);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
145	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  falseNode  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  falseNode  -  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  falseNode  -  1);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    falseNode);    	non-compiled	[CE]  	25	None	replace
146	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(trueNode,  null);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(trueNode,  null);	  boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	18	None	replace
147	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isLocal();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isLocal();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isLocal();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
148	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isUnknownType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isUnknownType();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isUnknownType();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
149	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isEmpty();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isEmpty();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isEmpty();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
150	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isUnknownNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isUnknownNode();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isUnknownNode();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
151	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(trueNode);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
152	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean(trueNode,  null);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(trueNode,  null);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
153	[BUG]  [BUGGY]  Boolean  result  =  nVal.isNumber()?  false  :  nVal.toBoolean();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.isNumber()?  false  :  nVal.toBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.isNumber()?  false  :  nVal.toBoolean();	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
154	[BUG]  [BUGGY]  Boolean  result  =  nVal.toOperator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toOperator();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toOperator();	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
155	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE  -  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  OR_PRECEDENCE  -  1);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    OR_PRECEDENCE);    	non-compiled	[CE]  	4	None	replace
156	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal  +  1);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
157	[BUG]  [BUGGY]  Boolean  result  =  trueNode.toBoolean(nVal,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  trueNode.toBoolean(nVal,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  trueNode.toBoolean(nVal,  false);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
158	[BUG]  [BUGGY]  Boolean  result  =  this.nVal.toBoolean(false,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  this.nVal.toBoolean(false,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  this.nVal.toBoolean(false,  false);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
159	[BUG]  [BUGGY]  Boolean  result  =  false.toBoolean(nVal,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  false.toBoolean(nVal,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  false.toBoolean(nVal,  false);	  Boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	14	None	replace
160	[BUG]  [BUGGY]  Boolean  result  =  nVal.toOperatorObject();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toOperatorObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toOperatorObject();	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
161	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(true,   "false ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toBoolean(true,   "false ");  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(true,   "false ");	  boolean    result    =    nVal.toBoolean(false,   "true   ");    	non-compiled	[CE]  	33	None	replace
162	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  false);	  int    result    =    maybeReplaceChildWithNumber(n,    parent);    	non-compiled	[CE]  	22	None	replace
163	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  TernaryValue.UNKNOWN;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  TernaryValue.UNKNOWN;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  TernaryValue.UNKNOWN;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
164	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  TernaryValue.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  TernaryValue.FUNCTION;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  TernaryValue.FUNCTION;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
165	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NUMBER;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NUMBER;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.NUMBER;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
166	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()!=  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()!=  Token.FUNCTION;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()!=  Token.FUNCTION;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME,  nVal);	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.CALL);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.CALL);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.NAME  ||  nVal.getType()  ==  Token.CALL);	  Preconditions.checkState(nVal.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
169	[BUG]  [BUGGY]  boolean  result  =  nVal.isUpperBoolean();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isUpperBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isUpperBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
170	[BUG]  [BUGGY]  boolean  result  =  nVal.isUnknownBoolean();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isUnknownBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isUnknownBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
171	[BUG]  [BUGGY]  boolean  result  =  nVal.isNumberBoolean();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNumberBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNumberBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
172	[BUG]  [BUGGY]  boolean  result  =  nVal.isUnknownType();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isUnknownType();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isUnknownType();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
173	[BUG]  [BUGGY]  boolean  result  =  nVal.isNumber()  ||  nVal.isLocal();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNumber()  ||  nVal.isLocal();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNumber()  ||  nVal.isLocal();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
174	[BUG]  [BUGGY]  boolean  result  =  nVal.isNumber()  ||  nVal.isLowerBound();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNumber()  ||  nVal.isLowerBound();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNumber()  ||  nVal.isLowerBound();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
175	[BUG]  [BUGGY]  boolean  result  =  trueNode.toBoolean(nVal,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  trueNode.toBoolean(nVal,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  trueNode.toBoolean(nVal,  false);	  boolean    result    =    nVal.toBoolean(false,    false);    	non-compiled	[CE]  	15	None	replace
176	[BUG]  [BUGGY]  Boolean  result  =  this.nVal.toBoolean(false,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  this.nVal.toBoolean(false,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  this.nVal.toBoolean(false,  true);	  Boolean    result    =    nVal.toBoolean(false,    true);    	non-compiled	[CE]  	32	None	replace
177	[BUG]  [BUGGY]  Boolean  result  =  this.nVal.toBoolean(true,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  this.nVal.toBoolean(true,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  this.nVal.toBoolean(true,  true);	  Boolean    result    =    nVal.toBoolean(false,    true);    	non-compiled	[CE]  	32	None	replace
178	[BUG]  [BUGGY]  boolean  result  =  nVal.isLowerBound();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isLowerBound();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isLowerBound();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
179	[BUG]  [BUGGY]  boolean  result  =  nVal.isNeighbor();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNeighbor();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNeighbor();	  boolean    result    =    nVal.isNumber();    	non-compiled	[CE]  	26	None	replace
180	[BUG]  [BUGGY]  Boolean  result  =  this.nVal.toBoolean(true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  this.nVal.toBoolean(true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  this.nVal.toBoolean(true);	  Boolean    result    =    nVal.toBoolean(true);    	non-compiled	[CE]  	10	None	replace
181	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  this.newOp);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  this.newOp);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  this.newOp);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    newOp);    	non-compiled	[CE]  	24	None	replace
182	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
183	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
184	[BUG]  [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  false);	  int    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	2	None	replace
185	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean()?  true  :  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBoolean()?  true  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean()?  true  :  false;	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
186	[BUG]  [BUGGY]  Boolean  result  =  nVal.isNumber()?  true  :  nVal.toBoolean();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.isNumber()?  true  :  nVal.toBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.isNumber()?  true  :  nVal.toBoolean();	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
187	[BUG]  [BUGGY]  Boolean  result  =  nVal.isNaN()?  false  :  nVal.toBoolean();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.isNaN()?  false  :  nVal.toBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.isNaN()?  false  :  nVal.toBoolean();	  Boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	11	None	replace
188	[BUG]  [BUGGY]  Boolean  result  =  nVal.booleanValue()?  false  :  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.booleanValue()?  false  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.booleanValue()?  false  :  false;	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
189	[BUG]  [BUGGY]  Boolean  result  =  nVal!=  null?  nVal.booleanValue()  :  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal!=  null?  nVal.booleanValue()  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal!=  null?  nVal.booleanValue()  :  false;	  Boolean    result    =    nVal.booleanValue();    	non-compiled	[CE]  	21	None	replace
190	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
191	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
192	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  false);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  false);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
193	[BUG]  [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.BOOLEAN);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.BOOLEAN);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  result  :  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.BOOLEAN);	  int    result    :    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	5	None	replace
194	[BUG]  [BUGGY]  Node  parent  =  nVal.removeFirst();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Node  parent  =  nVal.removeFirst();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Node  parent  =  nVal.removeFirst();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	1	None	replace
195	[BUG]  [BUGGY]  boolean  result  =  nVal.result  ||  nVal.toBoolean();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.result  ||  nVal.toBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.result  ||  nVal.toBoolean();	  boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	8	None	replace
196	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.VAR;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.VAR;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.VAR;	  boolean    result    =    nVal.toBoolean();    	non-compiled	[CE]  	8	None	replace
197	[BUG]  [BUGGY]  Boolean  result  =  trueNode.toBoolean(false,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  trueNode.toBoolean(false,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  trueNode.toBoolean(false,  nVal);	  Boolean    result    =    nVal.toBoolean(false,    trueNode);    	non-compiled	[CE]  	13	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.CATCH);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.CATCH);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.CATCH);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.BLOCK);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.BLOCK);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.BLOCK);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.TRY);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.TRY);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Preconditions.checkState(nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.TRY);	  Preconditions.checkState(nVal.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
201	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isNaN();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isNaN();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isNaN();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
202	[BUG]  [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isExtern();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isNaN()  ||  nVal.isExtern();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isNaN()  ||  nVal.isExtern();	  boolean    result    =    nVal.isNaN();    	non-compiled	[CE]  	30	None	replace
203	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.BLOCK;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.BLOCK;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.BLOCK;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
204	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.CASE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.CASE;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.FUNCTION  ||  nVal.getType()  ==  Token.CASE;	  boolean    result    =    nVal.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	27	None	replace
205	[BUG]  [BUGGY]  boolean  result  =  nVal.toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.toString();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toString();	  boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	9	None	replace
206	[BUG]  [BUGGY]  boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(true,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(true,  true);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal  ==  null  &&  nVal.toBoolean(true,  true);	  boolean    result    =    nVal!=    null    &&    nVal.toBoolean(true,    true);    	non-compiled	[CE]  	28	None	replace
207	[BUG]  [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  &&  nVal.isLowerBoolean();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  &&  nVal.isLowerBoolean();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isLowerBoolean()  &&  nVal.isLowerBoolean();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
208	[BUG]  [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isInfinite();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isInfinite();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.isLowerBoolean()  ||  nVal.isInfinite();	  boolean    result    =    nVal.isLowerBoolean();    	non-compiled	[CE]  	29	None	replace
209	[BUG]  [BUGGY]  int  parent  =  nVal.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.removeFirstChild();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.removeFirstChild();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
210	[BUG]  [BUGGY]  int  parent  =  nVal.getParentOperator();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  int  parent  =  nVal.getParentOperator();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	int  parent  =  nVal.getParentOperator();	  int    parent    =    nVal.getParent();    	non-compiled	[CE]  	3	None	replace
211	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBooleanObject()?  true  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.toBooleanObject()?  true  :  false;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBooleanObject()?  true  :  false;	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
212	[BUG]  [BUGGY]  Boolean  result  =  nVal.isNumber()?  false  :  nVal.toBooleanObject();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Boolean  result  =  nVal.isNumber()?  false  :  nVal.toBooleanObject();  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.isNumber()?  false  :  nVal.toBooleanObject();	  Boolean    result    =    nVal.toBooleanObject();    	non-compiled	[CE]  	12	None	replace
213	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
214	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  TernaryValue.UNKNOWN);	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
215	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intValue());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal.intValue());	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
216	[BUG]  [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal.intValue());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal.intValue());  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Integer  result  =  maybeReplaceChildWithNumber(n,  parent,  nVal,  nVal.intValue());	  Integer    result    =    maybeReplaceChildWithNumber(n,    parent,    nVal);    	non-compiled	[CE]  	23	None	replace
217	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.VAR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.VAR;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.VAR;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
218	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.CATCH;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.CATCH;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.CATCH;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
219	[BUG]  [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.SCRIPT;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {      [BUGGY]  boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.SCRIPT;  [BUGGY]      int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.getType()  ==  Token.BLOCK  ||  nVal.getType()  ==  Token.SCRIPT;	  boolean    result    =    nVal.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	31	None	replace
