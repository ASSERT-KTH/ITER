bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(false);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  [BUGGY]  boolean  result  =  nVal.toBoolean(false);  [BUGGY]  int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(false);	boolean  result  =  nVal.toBoolean(true);  	non-compiled	[CE]  	39	None	replace
2	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(true,  false);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  [BUGGY]  boolean  result  =  nVal.toBoolean(true,  false);  [BUGGY]  int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(true,  false);	boolean  result  =  nVal.toBoolean(true);  	non-compiled	[CE]  	39	None	replace
3	[BUG]  [BUGGY]  Boolean  result  =  nVal.toBoolean(false);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  [BUGGY]  Boolean  result  =  nVal.toBoolean(false);  [BUGGY]  int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	Boolean  result  =  nVal.toBoolean(false);	boolean  result  =  nVal.toBoolean(true);  	non-compiled	[CE]  	39	None	replace
4	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(true,  trueNode);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  [BUGGY]  boolean  result  =  nVal.toBoolean(true,  trueNode);  [BUGGY]  int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(true,  trueNode);	boolean  result  =  nVal.toBoolean(true);  	non-compiled	[CE]  	39	None	replace
5	[BUG]  [BUGGY]    [CE]  [FE]            AssertionFailedError  [CONTEXT]  reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  [BUGGY]    [BUGGY]  int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	  	boolean  result  =  nVal.toBoolean(true);  	non-compiled	[CE]  	39	None	replace
6	[BUG]  [BUGGY]  boolean  result  =  nVal.toBoolean(true,  true);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  reportCodeChange();  }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  [BUGGY]  boolean  result  =  nVal.toBoolean(true,  true);  [BUGGY]  int  equivalentResult  =  result  ?  1  :  0;  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	802	802	1	replace	boolean  result  =  nVal.toBoolean(true,  true);	boolean  result  =  nVal.toBoolean(true);  	non-compiled	[CE]  	39	None	replace
