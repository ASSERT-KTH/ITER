bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getFirstChild();	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
2	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
3	[BUG]  [BUGGY]  node  =  tryFoldLiteralConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  node  =  tryFoldLiteralConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldLiteralConstructors(node);	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
4	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
5	[BUG]  [BUGGY]  return  tryCallConstructor(node);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryCallConstructor(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructor(node);	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
6	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
7	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
8	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	2	None	replace
9	[BUG]  [BUGGY]  return  tryFoldConstructors(node);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
10	[BUG]  [BUGGY]  return  tryCallConstructors(node);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryCallConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
11	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldStandardConstructors(node,  false);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  false);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
12	[BUG]  [BUGGY]  return  tryCallStandardConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryCallStandardConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallStandardConstructors(node);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
13	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldStandardConstructors(node,  true);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  true);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
14	[BUG]  [BUGGY]  node  =  tryFoldStandardConstructors(node);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  node  =  tryFoldStandardConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldStandardConstructors(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  Node  node  =  node.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  node.getNext();  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getNext();	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	5	None	replace
16	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getLastChild();	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  node  =  tryFoldLiteralConstructor(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  node  =  tryFoldLiteralConstructor(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldLiteralConstructor(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  Node  node  =  node.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  node.getParent();  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getParent();	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	5	None	replace
19	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }	  return    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
20	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
21	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  false);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node,  false);	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
22	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getParent());	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
23	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryCallConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node);	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
24	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getFirstChild());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getFirstChild());	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
25	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  true);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node,  true);	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
26	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldStandardConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node);	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
27	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  false);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node,  false);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  false);	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
28	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  true);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node,  true);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  true);	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
29	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  node);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node,  node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  node);	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
30	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getParent());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node.getParent());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getParent());	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
31	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
32	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
33	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.FUNCTION)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	10	None	replace
35	[BUG]  [BUGGY]  result  =  tryFoldLiteralConstructors(node);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  result  =  tryFoldLiteralConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldLiteralConstructors(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	10	None	replace
36	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node);	      	non-compiled	[CE]  orphaned  case	8	None	replace
37	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getType());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getType());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.getType());	      	non-compiled	[CE]  orphaned  case	8	None	replace
38	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldConstructors(node.getFirstChild());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getFirstChild());	      	non-compiled	[CE]  orphaned  case	8	None	replace
39	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getType());  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldConstructors(node.getType());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getType());	      	non-compiled	[CE]  orphaned  case	8	None	replace
40	[BUG]  [BUGGY]  Node  node  =  node.getType();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  node.getType();  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getType();	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	5	None	replace
41	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.cloneTree());	  Node    node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	11	None	replace
42	[BUG]  [BUGGY]  return  tryFoldLocalConstructors(node);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldLocalConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLocalConstructors(node);	  return    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
43	[BUG]  [BUGGY]  return  tryFoldParameterConstructors(node);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldParameterConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldParameterConstructors(node);	  return    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
44	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldLiteralConstructors(node,  false);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node,  false);	  return    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
45	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  false);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructor(node,  false);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  false);	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
46	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  true);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructor(node,  true);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  true);	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
47	[BUG]  [BUGGY]  return  tryFoldNonCallConstructors(node);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldNonCallConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldNonCallConstructors(node);	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
48	[BUG]  [BUGGY]  return  tryFoldStandardCallConstructors(node);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldStandardCallConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCallConstructors(node);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
49	[BUG]  [BUGGY]  return  tryFoldCallStandardConstructors(node);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallStandardConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallStandardConstructors(node);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
50	[BUG]  [BUGGY]  return  tryFoldStandardCalls(node);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldStandardCalls(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCalls(node);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
51	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
52	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getType());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node.getType());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getType());	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
53	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldCallConstructors(node.getFirstChild());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getFirstChild());	  return    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
54	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
55	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
56	[BUG]  [BUGGY]  node  =  tryFoldCallConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  node  =  tryFoldCallConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructors(node);	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
57	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());	      	non-compiled	[CE]  orphaned  case	8	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  false);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false);	      	non-compiled	[CE]  orphaned  case	8	None	replace
60	[BUG]  [BUGGY]  node  =  tryFoldConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  node  =  tryFoldConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldConstructors(node);	      	non-compiled	[CE]  orphaned  case	8	None	replace
61	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node,  true);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldLiteralConstructors(node,  true);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node,  true);	  return    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
62	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructors(node);  }	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
63	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  return    tryFoldCallConstructor(node);    	non-compiled	[CE]  orphaned  case	1	None	replace
64	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
65	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
66	[BUG]  [BUGGY]  Node  node  =  tryFoldLiteralConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  Node  node  =  tryFoldLiteralConstructors(node);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldLiteralConstructors(node);	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors);	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	4	None	replace
68	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	10	None	replace
69	[BUG]  [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()    ==    Token.FUNCTION)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	7	None	replace
70	[BUG]  [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()    ==    Token.FUNCTION)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	7	None	replace
71	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
72	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node));  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node));	      	non-compiled	[CE]  orphaned  case	8	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this);	      	non-compiled	[CE]  orphaned  case	8	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node));  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node));  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node));	      	non-compiled	[CE]  orphaned  case	8	None	replace
76	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:    [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
