bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  return  tryFoldCallConstructor(node);  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node);	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
2	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
3	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  return  tryFoldStandardConstructors(node);  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node);	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
4	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructor(node);  }	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
5	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructor(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
6	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NAME)  {  return  tryFoldLiteralConstructor(node);  }	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
7	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldLiteralConstructor(node);  }	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
8	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]                  AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]    [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	  	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
9	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  return  tryFoldCallConstructors(node);  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node);	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
10	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
11	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  Node  node  =  tryFoldCallConstructors(node);  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node);	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
12	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:  [BUGGY]  return  tryFoldLiteralConstructors(node);  [BUGGY]    default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node);	return  tryFoldLiteralConstructor(node);  	non-compiled	[CE]  orphaned  case	99	None	replace
