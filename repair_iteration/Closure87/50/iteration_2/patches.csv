bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldParameterConstructors(node,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldParameterConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldParameterConstructors(node,  false);	  return    tryFoldParameterConstructors(node);    	non-compiled	[CE]  orphaned  case	43	None	replace
2	[BUG]  [BUGGY]  return  tryFoldParameterConstructors(node,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldParameterConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldParameterConstructors(node,  true);	  return    tryFoldParameterConstructors(node);    	non-compiled	[CE]  orphaned  case	43	None	replace
3	[BUG]  [BUGGY]  return  tryCallConstructors(node,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node,  false);	  return    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	28	None	replace
4	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  false);	  return    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	28	None	replace
5	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  true,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  true,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  true,  false);	  return    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	28	None	replace
6	[BUG]  [BUGGY]  return  attemptFoldCallConstructors(node,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  attemptFoldCallConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  attemptFoldCallConstructors(node,  false);	  return    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	28	None	replace
7	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  null);	  return    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	28	None	replace
8	[BUG]  [BUGGY]  return  tryFoldCallStandardConstructors(node,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallStandardConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallStandardConstructors(node,  true);	  return    tryFoldStandardConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	13	None	replace
9	[BUG]  [BUGGY]  return  tryStandardConstructors(node,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryStandardConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryStandardConstructors(node,  false);	  return    tryFoldStandardConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	13	None	replace
10	[BUG]  [BUGGY]  return  tryCallConstructors(node,  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node,  true);	  return    tryFoldStandardConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	13	None	replace
11	[BUG]  [BUGGY]  return  tryFoldStandardCalls(node,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCalls(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCalls(node,  true);	  return    tryFoldStandardConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	13	None	replace
12	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
13	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Preconditions.checkNotNull(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Preconditions.checkNotNull(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
15	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
16	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Preconditions.checkState(node.getType()  ==  Token.CALL);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
18	[BUG]  [BUGGY]  node  =  tryCallConstructors(node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryCallConstructors(node);	  node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	14	None	replace
19	[BUG]  [BUGGY]  node  =  tryCallStandardConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryCallStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryCallStandardConstructors(node);	  node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	14	None	replace
20	[BUG]  [BUGGY]  node  =  tryFoldStandardCallConstructors(node);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldStandardCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldStandardCallConstructors(node);	  node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	14	None	replace
21	[BUG]  [BUGGY]  node  =  tryFoldStandardCalls(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldStandardCalls(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldStandardCalls(node);	  node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	14	None	replace
22	[BUG]  [BUGGY]  result  =  tryFoldStandardConstructors(node);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldStandardConstructors(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
23	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldConstructors(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
24	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  true);	  return    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
25	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  node);	  return    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
26	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldNonCallConstructors(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldNonCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldNonCallConstructors(node);  }	  return    tryFoldNonCallConstructors(node);    	non-compiled	[CE]  orphaned  case	47	None	replace
27	[BUG]  [BUGGY]  return  tryFoldNonCallConstructors(node,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldNonCallConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldNonCallConstructors(node,  false);	  return    tryFoldNonCallConstructors(node);    	non-compiled	[CE]  orphaned  case	47	None	replace
28	[BUG]  [BUGGY]  return  tryFoldNonCallConstructors(node,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldNonCallConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldNonCallConstructors(node,  true);	  return    tryFoldNonCallConstructors(node);    	non-compiled	[CE]  orphaned  case	47	None	replace
29	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getNext());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getNext());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getNext());	  return    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	30	None	replace
30	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getParent(),  node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getParent(),  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getParent(),  node);	  return    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	30	None	replace
31	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getLastChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getLastChild());	  return    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	30	None	replace
32	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getString());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getString());	  return    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	30	None	replace
33	[BUG]  [BUGGY]  Node  node  =  parent.getParent();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  parent.getParent();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  parent.getParent();	  Node    node    =    node.getParent();    	non-compiled	[CE]  orphaned  case	18	None	replace
34	[BUG]  [BUGGY]  Node  node  =  node.getParent()  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getParent()  +  1;  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getParent()  +  1;	  Node    node    =    node.getParent();    	non-compiled	[CE]  orphaned  case	18	None	replace
35	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	32	None	replace
36	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getNext());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getNext());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getNext());	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
37	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.cloneTree(),  false);	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
38	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.cloneTree(),  true);	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
39	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getLastChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getLastChild());	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
40	[BUG]  [BUGGY]  return  tryFoldStandardCallConstructors(node,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCallConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCallConstructors(node,  false);	  return    tryFoldStandardCallConstructors(node);    	non-compiled	[CE]  orphaned  case	48	None	replace
41	[BUG]  [BUGGY]  return  tryStandardCallConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryStandardCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryStandardCallConstructors(node);	  return    tryFoldStandardCallConstructors(node);    	non-compiled	[CE]  orphaned  case	48	None	replace
42	[BUG]  [BUGGY]  return  tryFoldStandardCallConstructors(node,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCallConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCallConstructors(node,  true);	  return    tryFoldStandardCallConstructors(node);    	non-compiled	[CE]  orphaned  case	48	None	replace
43	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.removeFirstChild();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.removeFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
44	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  parent.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
45	[BUG]  [BUGGY]  node  =  tryFoldLocalConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldLocalConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldLocalConstructors(node);	  node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	3	None	replace
46	[BUG]  [BUGGY]  Node  node  =  tryCallStandardConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallStandardConstructors(node);	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
47	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node,  false);	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
48	[BUG]  [BUGGY]  Node  node  =  tryStandardConstructors(node);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryStandardConstructors(node);	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
49	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
50	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
51	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
52	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
53	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  node);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
54	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
55	[BUG]  [BUGGY]  return  tryCallStandardConstructors(node,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallStandardConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallStandardConstructors(node,  false);	  return    tryCallStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
56	[BUG]  [BUGGY]  return  tryCallStandardConstructors(node,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallStandardConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallStandardConstructors(node,  true);	  return    tryCallStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	12	None	replace
57	[BUG]  [BUGGY]  Node  node  =  node.getNext()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getNext()  :  null;  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getNext()  :  null;	  Node    node    =    node.getNext();    	non-compiled	[CE]  	15	None	replace
58	[BUG]  [BUGGY]  Node  node  =  node.getNext()  -  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getNext()  -  1;  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getNext()  -  1;	  Node    node    =    node.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
59	[BUG]  [BUGGY]  Node  node  =  node.getNext()  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getNext()  +  1;  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getNext()  +  1;	  Node    node    =    node.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
60	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
61	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL  ||  node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL  ||  node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL  ||  node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
62	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL  ||  node.getType()  ==  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL  ||  node.getType()  ==  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL  ||  node.getType()  ==  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
63	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
64	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NEW)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NEW)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NEW)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
65	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
66	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
67	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node,  false);	  Node    node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	36	None	replace
68	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getParent());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getParent());	  Node    node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	36	None	replace
69	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node,  true);	  Node    node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	36	None	replace
70	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getType(),  node);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getType(),  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getType(),  node);	  return    tryFoldCallConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	52	None	replace
71	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getType(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getType(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getType(),  false);	  return    tryFoldCallConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	52	None	replace
72	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getType(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getType(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getType(),  true);	  return    tryFoldCallConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	52	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  true);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  STRICT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  STRICT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  STRICT_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  true);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  true);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  DEFAULT_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  DEFAULT_TO_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  DEFAULT_TO_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  DEFAULT_TO_FOLD_WITHOUT_ARGS);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
80	[BUG]  [BUGGY]  node  =  tryFoldCallConstructor(node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallConstructor(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructor(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
81	[BUG]  [BUGGY]  Constructor  <  Node>  node  =  node.getType();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Constructor  <  Node>  node  =  node.getType();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Constructor  <  Node>  node  =  node.getType();	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    node    =    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	6	None	replace
82	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  false,  true);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  false,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  false,  true);	  return    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	27	None	replace
83	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getParent(),  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getParent(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getParent(),  false);	  return    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	27	None	replace
84	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  false,  node.getType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  false,  node.getType());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  false,  node.getType());	  return    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	27	None	replace
85	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  OR_PRECEDENCE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  OR_PRECEDENCE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  OR_PRECEDENCE);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
86	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  node.getType());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  node.getType());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  node.getType());	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
87	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  parent);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  parent);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
88	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  node.getFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  node.getFirstChild());	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
89	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getFirstChild(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getFirstChild(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getFirstChild(),  false);	  Node    node    =    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	24	None	replace
90	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getFirstChild(),  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getFirstChild(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getFirstChild(),  true);	  Node    node    =    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	24	None	replace
91	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node.getFirstChild());	  Node    node    =    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	24	None	replace
92	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.getFirstChild());	  Node    node    =    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	24	None	replace
93	[BUG]  [BUGGY]  return  tryFoldLocalConstructors(node,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldLocalConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLocalConstructors(node,  false);	  return    tryFoldLocalConstructors(node);    	non-compiled	[CE]  orphaned  case	42	None	replace
94	[BUG]  [BUGGY]  return  tryFoldLocalConstructors(node,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldLocalConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLocalConstructors(node,  true);	  return    tryFoldLocalConstructors(node);    	non-compiled	[CE]  orphaned  case	42	None	replace
95	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getLastChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getLastChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getLastChild());	  Node    node    =    tryFoldConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
96	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getNext());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getNext());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getNext());	  Node    node    =    tryFoldConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
97	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getFirstChild(),  false);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getFirstChild(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getFirstChild(),  false);	  Node    node    =    tryFoldConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
98	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getFirstChild(),  true);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getFirstChild(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getFirstChild(),  true);	  Node    node    =    tryFoldConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
99	[BUG]  [BUGGY]  return  tryCallConstructor(node,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructor(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructor(node,  false);	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
100	[BUG]  [BUGGY]  return  tryCallConstructor(node,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructor(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructor(node,  true);	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
101	[BUG]  [BUGGY]  return  tryStandardConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryStandardConstructors(node);	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
102	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node,  true,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldLiteralConstructors(node,  true,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node,  true,  false);	  return    tryFoldLiteralConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	61	None	replace
103	[BUG]  [BUGGY]  return  attemptFoldLiteralConstructors(node,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  attemptFoldLiteralConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  attemptFoldLiteralConstructors(node,  false);	  return    tryFoldLiteralConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	61	None	replace
104	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
105	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
106	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
107	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
108	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
109	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
110	[BUG]  [BUGGY]  ||  node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  ||  node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	||  node.getType()  ==  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
111	[BUG]  [BUGGY]  result  =  tryFoldCallConstructor(node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldCallConstructor(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldCallConstructor(node);	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  orphaned  case	31	None	replace
112	[BUG]  [BUGGY]  ||  node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  ||  node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	||  node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
113	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NAME)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  orphaned  case	2	None	replace
114	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node,  false);	  Node    node    =    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	23	None	replace
115	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node.getParent());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallConstructors(node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node.getParent());	  Node    node    =    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	23	None	replace
116	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node,  true);	  Node    node    =    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	23	None	replace
117	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallConstructors(node.cloneTree());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node.cloneTree());	  Node    node    =    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	23	None	replace
118	[BUG]  [BUGGY]  Node  node  =  tryFoldSubstituteConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldSubstituteConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldSubstituteConstructors(node);	  Node    node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	66	None	replace
119	[BUG]  [BUGGY]  Node  node  =  tryFoldLocalConstructors(node);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldLocalConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldLocalConstructors(node);	  Node    node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	66	None	replace
120	[BUG]  [BUGGY]  Node  node  =  tryFoldNoCallConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldNoCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldNoCallConstructors(node);	  Node    node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	66	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  STRICT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  STRICT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  STRICT_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  REGEXP_FLAGS);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  REGEXP_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  REGEXP_FLAGS);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  null);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  null);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_EXPRESSION);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_EXPRESSION);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_EXPRESSION);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
128	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	71	None	replace
129	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	71	None	replace
130	[BUG]  [BUGGY]  Node  node  =  node.getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getString();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getString();	  Node    node    =    node.getType();    	non-compiled	[CE]  orphaned  case	40	None	replace
131	[BUG]  [BUGGY]  node  =  tryFoldCallConstructors(node,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructors(node,  false);	  node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	56	None	replace
132	[BUG]  [BUGGY]  node  =  tryFoldCallConstructors(node,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructors(node,  true);	  node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	56	None	replace
133	[BUG]  [BUGGY]  node  =  tryFoldCallConstructors(node.getParent());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallConstructors(node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructors(node.getParent());	  node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	56	None	replace
134	[BUG]  [BUGGY]  node  =  tryFoldCallConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructors(node.getFirstChild());	  node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	56	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors(node));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors(node));  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors(node));	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  this);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  this);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  this);	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryCallConstructors(node));  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryCallConstructors(node));  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryCallConstructors(node));	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldStandardConstructors(node));    	non-compiled	[CE]  orphaned  case	73	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    node,    tryFoldStandardConstructors(node));    	non-compiled	[CE]  orphaned  case	73	None	replace
142	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getParent(),  true);	  Node    node    =    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	22	None	replace
143	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getParent(),  false);	  Node    node    =    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	22	None	replace
144	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node,  false,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldLiteralConstructors(node,  false,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node,  false,  true);	  return    tryFoldLiteralConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	44	None	replace
145	[BUG]  [BUGGY]  return  tryFoldCallStandardConstructors(node,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallStandardConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallStandardConstructors(node,  false);	  return    tryFoldStandardConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	11	None	replace
146	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  false,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node,  false,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  false,  true);	  return    tryFoldStandardConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	11	None	replace
147	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  true,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node,  true,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  true,  false);	  return    tryFoldCallConstructor(node,    true);    	non-compiled	[CE]  orphaned  case	46	None	replace
148	[BUG]  [BUGGY]  return  attemptFoldCallConstructor(node,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  attemptFoldCallConstructor(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  attemptFoldCallConstructor(node,  false);	  return    tryFoldCallConstructor(node,    true);    	non-compiled	[CE]  orphaned  case	46	None	replace
149	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  null);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  null);	  return    tryFoldCallConstructor(node,    true);    	non-compiled	[CE]  orphaned  case	46	None	replace
150	[BUG]  [BUGGY]  return  tryCallConstructors(node.getParent());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node.getParent());	  return    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	10	None	replace
151	[BUG]  [BUGGY]  return  tryCallConstructors(node,  node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node,  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node,  node);	  return    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	10	None	replace
152	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  false,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  false,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node,  false,  true);	  Node    node    =    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	21	None	replace
153	[BUG]  [BUGGY]  result  =  tryFoldCallConstructors(node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldCallConstructors(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
154	[BUG]  [BUGGY]  result  =  tryFoldConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldConstructors(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
155	[BUG]  [BUGGY]  result  =  tryCallConstructors(node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryCallConstructors(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
156	[BUG]  [BUGGY]  result  =  tryFoldLocalConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldLocalConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldLocalConstructors(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
157	[BUG]  [BUGGY]  result  =  tryFoldParameterConstructors(node);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldParameterConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldParameterConstructors(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
158	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  false,  true);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node,  false,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  false,  true);	  return    tryFoldCallConstructor(node,    false);    	non-compiled	[CE]  orphaned  case	45	None	replace
159	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  false,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node,  false,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  false,  null);	  return    tryFoldCallConstructor(node,    false);    	non-compiled	[CE]  orphaned  case	45	None	replace
160	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  false,  node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node,  false,  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  false,  node);	  return    tryFoldCallConstructor(node,    false);    	non-compiled	[CE]  orphaned  case	45	None	replace
161	[BUG]  [BUGGY]  Node  node  =  this.node.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  this.node.getFirstChild();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  this.node.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  orphaned  case	16	None	replace
162	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  n.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  orphaned  case	16	None	replace
163	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.FUNCTION)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	69	None	replace
164	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()!=    Token.FUNCTION)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	69	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  this);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  this);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  predicate);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  predicate);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  predicate);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  false);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  false);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
170	[BUG]  [BUGGY]  ||  node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  ||  node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	||  node.getType()  ==  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.FUNCTION)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
171	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getType());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getType());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getType());	  Node    node    =    tryFoldConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	39	None	replace
172	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getString());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getString());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getString());	  Node    node    =    tryFoldConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	39	None	replace
173	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getType(),  false);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getType(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getType(),  false);	  Node    node    =    tryFoldConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	39	None	replace
174	[BUG]  [BUGGY]  Node  node  =  tryCallConstructors(node.getType());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryCallConstructors(node.getType());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryCallConstructors(node.getType());	  Node    node    =    tryFoldStandardConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	37	None	replace
175	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getParent());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.getParent());	  Node    node    =    tryFoldStandardConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	37	None	replace
176	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getString());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getString());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.getString());	  Node    node    =    tryFoldStandardConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	37	None	replace
177	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()!=    Token.GETPROP)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  orphaned  case	54	None	replace
178	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructor(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructor(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructor(node);	  node    =    tryFoldLiteralConstructor(node);    	non-compiled	[CE]  orphaned  case	17	None	replace
179	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  true,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  true,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node,  true,  false);	  Node    node    =    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
180	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node,  true);	  Node    node    =    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS,  tryFoldLiteralConstructors);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS,  tryFoldLiteralConstructors);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS,  tryFoldLiteralConstructors);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  false);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors,  tryFoldLiteralConstructors);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors,  tryFoldLiteralConstructors);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors,  tryFoldLiteralConstructors);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  tryFoldLiteralConstructors);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  tryFoldLiteralConstructors);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  tryFoldLiteralConstructors);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
187	[BUG]  [BUGGY]  return  tryFoldCalls(node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCalls(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCalls(node);	  return    tryFoldStandardCalls(node);    	non-compiled	[CE]  orphaned  case	50	None	replace
188	[BUG]  [BUGGY]  return  tryCallStandardCalls(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallStandardCalls(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallStandardCalls(node);	  return    tryFoldStandardCalls(node);    	non-compiled	[CE]  orphaned  case	50	None	replace
189	[BUG]  [BUGGY]  return  tryFoldCallStandardCalls(node);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallStandardCalls(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallStandardCalls(node);	  return    tryFoldStandardCalls(node);    	non-compiled	[CE]  orphaned  case	50	None	replace
190	[BUG]  [BUGGY]  node  =  tryFoldConstructors(node,  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldConstructors(node,  false);	  node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	60	None	replace
191	[BUG]  [BUGGY]  node  =  tryFoldConstructors(node,  true);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldConstructors(node,  true);	  node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	60	None	replace
192	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getFirstChild(),  node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getFirstChild(),  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getFirstChild(),  node);	  return    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	53	None	replace
193	[BUG]  [BUGGY]  return  tryCallConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node.getFirstChild());	  return    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	53	None	replace
194	[BUG]  [BUGGY]  return  tryCallConstructors(node.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node.getLastChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node.getLastChild());	  return    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	53	None	replace
195	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node.getFirstChild());	  return    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	53	None	replace
196	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.cloneTree());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.cloneTree());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.cloneTree());	  Node    node    =    tryFoldConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
197	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.cloneTree());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.cloneTree());	  return    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	53	None	replace
198	[BUG]  [BUGGY]  return  tryFoldStandardCalls(node,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCalls(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCalls(node,  false);	  return    tryFoldStandardCalls(node);    	non-compiled	[CE]  orphaned  case	50	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_EXPRESSION);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_EXPRESSION);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_EXPRESSION);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  INVALID_REGULAR_FOLD_WITHOUT_ARGS);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  null);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  null);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
202	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()!=    Token.GETPROP)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	64	None	replace
203	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldStandardConstructors(node);  }	  if(node.getType()!=    Token.GETPROP)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	64	None	replace
204	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructors(node);    }    	non-compiled	[CE]  orphaned  case	62	None	replace
205	[BUG]  [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NEW)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructors(node);    }    	non-compiled	[CE]  orphaned  case	62	None	replace
206	[BUG]  [BUGGY]  Node  node  =  tryFoldParameterConstructors(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldParameterConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldParameterConstructors(node);	  Node    node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	66	None	replace
207	[BUG]  [BUGGY]  Node  node  =  node.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.cloneTree();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.cloneTree();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  orphaned  case	16	None	replace
208	[BUG]  [BUGGY]  Node  node  =  this.node.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  this.node.getLastChild();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  this.node.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  orphaned  case	16	None	replace
209	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.cloneTree(),  null);	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
210	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.cloneTree(),  node);	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
211	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  SHORT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  SHORT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  SHORT_OBJECT_CONSTRUCTORS);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
212	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  STRICT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  STRICT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  STRICT_OBJECT_CONSTRUCTORS);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
213	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
214	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  CONSTRUCTORS);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  CONSTRUCTORS);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  SHORT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  SHORT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  SHORT_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
216	[BUG]  [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldStandardConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NEW)  {  return  tryFoldStandardConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
217	[BUG]  [BUGGY]  result  =  tryFoldCallConstants(node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldCallConstants(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldCallConstants(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
218	[BUG]  [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.FUNCTION)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  orphaned  case	33	None	replace
219	[BUG]  [BUGGY]  return  tryFoldNonConstructors(node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldNonConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldNonConstructors(node);	  return    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
220	[BUG]  [BUGGY]  return  tryFoldConstructors(node.getParent());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node.getParent());	  return    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
221	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructor(node);  }	  if(node.getType()    ==    Token.NAME)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  orphaned  case	2	None	replace
222	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getParent(),  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getParent(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getParent(),  true);	  return    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	28	None	replace
223	[BUG]  [BUGGY]  Node  node  =  tryFoldNonConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldNonConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldNonConstructors(node);	  Node    node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	36	None	replace
224	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardCallConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardCallConstructors(node);	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
225	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.cloneTree());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.cloneTree());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.cloneTree());	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
226	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardCalls(node);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardCalls(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardCalls(node);	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
229	[BUG]  [BUGGY]  return  tryFoldStandardCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldStandardCallConstructors(node);    	non-compiled	[CE]  orphaned  case	48	None	replace
230	[BUG]  [BUGGY]  return  tryFoldStandardCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldStandardCallConstructors(node);    	non-compiled	[CE]  orphaned  case	48	None	replace
231	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getParent()  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getParent()  +  1);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getParent()  +  1);	  return    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	30	None	replace
232	[BUG]  [BUGGY]  return  tryFoldNonCallConstructors(node.getType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldNonCallConstructors(node.getType());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldNonCallConstructors(node.getType());	  return    tryFoldNonCallConstructors(node);    	non-compiled	[CE]  orphaned  case	47	None	replace
233	[BUG]  [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NEW)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
234	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
235	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
236	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
237	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME)  {  return  tryFoldLiteralConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
238	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldPropertyConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldPropertyConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldPropertyConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
239	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD_FOLD_WITHOUT_ARGS);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
240	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  REGEXP_FLAGS_RE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  REGEXP_FLAGS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  REGEXP_FLAGS_RE);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
241	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  NODE_TO_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  NODE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  NODE_TO_FOLD_WITHOUT_ARGS);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
242	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node.getType(),  false);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node.getType(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node.getType(),  false);	  return    tryFoldCallConstructor(node,    false);    	non-compiled	[CE]  orphaned  case	45	None	replace
243	[BUG]  [BUGGY]  Node  node  =  node.getPrevious();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getPrevious();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getPrevious();	  Node    node    =    node.getParent();    	non-compiled	[CE]  orphaned  case	18	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldNonConstructors(node));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldNonConstructors(node));  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldNonConstructors(node));	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
245	[BUG]  [BUGGY]  Node  node  =  node.getNext()  &&  NodeUtil.isFunctionDeclaration(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getNext()  &&  NodeUtil.isFunctionDeclaration(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getNext()  &&  NodeUtil.isFunctionDeclaration(node);	  Node    node    =    node.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
246	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
247	[BUG]  [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  NODE_TO_FOLD_WITHOUT_ARGS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  NODE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS,  NODE_TO_FOLD_WITHOUT_ARGS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
248	[BUG]  [BUGGY]  return  tryFoldFieldConstructors(node,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldFieldConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldFieldConstructors(node,  false);	  return    tryFoldLiteralConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	44	None	replace
249	[BUG]  [BUGGY]  node  =  tryFoldParameterConstructors(node);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldParameterConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldParameterConstructors(node);	  node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	60	None	replace
250	[BUG]  [BUGGY]  node  =  tryFoldNonConstructors(node);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldNonConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldNonConstructors(node);	  node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	60	None	replace
251	[BUG]  [BUGGY]  Node  node  =  node.getNodeType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getNodeType();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getNodeType();	  Node    node    =    node.getType();    	non-compiled	[CE]  orphaned  case	40	None	replace
252	[BUG]  [BUGGY]  Node  node  =  node.getAncestor(1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.getAncestor(1);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.getAncestor(1);	  Node    node    =    node.getType();    	non-compiled	[CE]  orphaned  case	40	None	replace
253	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
254	[BUG]  [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NEW)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
255	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldCallConstructors(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
256	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
257	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME)  {  return  tryFoldCallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
258	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getType(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getType(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getType(),  false);	  Node    node    =    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	21	None	replace
259	[BUG]  [BUGGY]  return  tryCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryCallConstructors(node);    	non-compiled	[CE]  orphaned  case	10	None	replace
260	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent(),  node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent(),  node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getParent(),  node);	  Node    node    =    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	22	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldConstructors,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  STRICT_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  STRICT_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  STRICT_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  this);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  this);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  this);	  NodeTraversal.traverse(compiler,    node,    tryFoldStandardConstructors(node));    	non-compiled	[CE]  orphaned  case	73	None	replace
267	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node.getType(),  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node.getType(),  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node.getType(),  true);	  return    tryFoldCallConstructor(node,    true);    	non-compiled	[CE]  orphaned  case	46	None	replace
268	[BUG]  [BUGGY]  return  tryFoldParameterConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldParameterConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldParameterConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldParameterConstructors(node);    	non-compiled	[CE]  orphaned  case	43	None	replace
269	[BUG]  [BUGGY]  return  tryFoldCallParameterConstructors(node);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallParameterConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallParameterConstructors(node);	  return    tryFoldParameterConstructors(node);    	non-compiled	[CE]  orphaned  case	43	None	replace
270	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  null);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node,  null);	  Node    node    =    tryFoldCallConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	25	None	replace
271	[BUG]  [BUGGY]  return  tryFoldFieldConstructors(node,  true);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldFieldConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldFieldConstructors(node,  true);	  return    tryFoldLiteralConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	61	None	replace
272	[BUG]  [BUGGY]  return  tryFoldValueConstructors(node,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldValueConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldValueConstructors(node,  true);	  return    tryFoldLiteralConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	61	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_FLAGS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  this,  false);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	74	None	replace
276	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
277	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME  &&  NodeUtil.isFunctionDeclaration(node))  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME  &&  NodeUtil.isFunctionDeclaration(node))  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME  &&  NodeUtil.isFunctionDeclaration(node))  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
278	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getString().equals( "call "))  {  return  tryFoldLiteralConstructor(node);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getString().equals( "call "))  {  return  tryFoldLiteralConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME  &&  node.getString().equals( "call "))  {  return  tryFoldLiteralConstructor(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructor(node);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
279	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLocalConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLocalConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldLocalConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
280	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
281	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLabelConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldLabelConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldLabelConstructors(node);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldLiteralConstructors(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
282	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node,  false,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldLiteralConstructors(node,  false,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node,  false,  false);	  return    tryFoldLiteralConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	44	None	replace
283	[BUG]  [BUGGY]  node  =  tryFoldLocalConstructor(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldLocalConstructor(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldLocalConstructor(node);	  node    =    tryFoldLiteralConstructor(node);    	non-compiled	[CE]  orphaned  case	17	None	replace
284	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardCallConstructors(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldStandardCallConstructors(node);  }	  return    tryFoldStandardCallConstructors(node);    	non-compiled	[CE]  orphaned  case	48	None	replace
285	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node.getChildCount());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node.getChildCount());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node.getChildCount());	  return    tryFoldCallConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	52	None	replace
286	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallStandardCalls(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallStandardCalls(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldCallStandardCalls(node);  }	  return    tryFoldStandardCalls(node);    	non-compiled	[CE]  orphaned  case	50	None	replace
287	[BUG]  [BUGGY]  return  tryFoldStandardCalls(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldStandardCalls(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldStandardCalls(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldStandardCalls(node);    	non-compiled	[CE]  orphaned  case	50	None	replace
288	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node.getParent(),  false);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node.getParent(),  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node.getParent(),  false);	  return    tryFoldCallConstructor(node,    false);    	non-compiled	[CE]  orphaned  case	45	None	replace
289	[BUG]  [BUGGY]  return  tryFoldCallConstructor(node,  false,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructor(node,  false,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructor(node,  false,  false);	  return    tryFoldCallConstructor(node,    false);    	non-compiled	[CE]  orphaned  case	45	None	replace
290	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	71	None	replace
291	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getString().equals( "call "))  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME  &&  node.getString().equals( "call "))  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME  &&  node.getString().equals( "call "))  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	71	None	replace
292	[BUG]  [BUGGY]  if(node.getType()!=  Token.NAME  &&  NodeUtil.isCall(node))  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.NAME  &&  NodeUtil.isCall(node))  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.NAME  &&  NodeUtil.isCall(node))  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.NAME)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	71	None	replace
293	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.removeFirstChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.removeFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.removeFirstChild());	  Node    node    =    tryFoldConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
294	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP  &&  node.getFirstChild()  ==  node)  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.GETPROP)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	64	None	replace
295	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(node))  {  return  tryFoldLiteralConstructors(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(node))  {  return  tryFoldLiteralConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(node))  {  return  tryFoldLiteralConstructors(node);  }	  if(node.getType()!=    Token.GETPROP)    {    return    tryFoldLiteralConstructors(node);    }    	non-compiled	[CE]  orphaned  case	64	None	replace
296	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  NOT_SAFE_TO_FOLD);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  orphaned  case	29	None	replace
297	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  default);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  default);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  default);	  return    tryFoldCallConstructors(node,    node);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
298	[BUG]  [BUGGY]  Node  node  =  this.node.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  this.node.getNext();  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  this.node.getNext();	  Node    node    =    node.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
299	[BUG]  [BUGGY]  result  =  tryFoldLiteralConstructors(node,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldLiteralConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldLiteralConstructors(node,  false);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
300	[BUG]  [BUGGY]  result  =  tryFoldCallLiteralConstructors(node);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  result  =  tryFoldCallLiteralConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	result  =  tryFoldCallLiteralConstructors(node);	  result    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	35	None	replace
301	[BUG]  [BUGGY]  Node  node  =  node.removeChild(node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.removeChild(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.removeChild(node);	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  INVALID_REGULAR_FLAGS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  INVALID_REGULAR_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldConstructors(node),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldConstructors(node));    	non-compiled	[CE]  orphaned  case	75	None	replace
303	[BUG]  [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldCallConstructors(node);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldCallConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.FUNCTION)  {  return  tryFoldCallConstructors(node);  }	  if(node.getType()    ==    Token.FUNCTION)    {    return    tryFoldCallConstructor(node);    }    	non-compiled	[CE]  orphaned  case	33	None	replace
304	[BUG]  [BUGGY]  Node  node  =  tryFoldLiteralConstructors(node,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldLiteralConstructors(node,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldLiteralConstructors(node,  false);	  Node    node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	66	None	replace
305	[BUG]  [BUGGY]  Node  node  =  tryFoldLabelConstructors(node);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldLabelConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldLabelConstructors(node);	  Node    node    =    tryFoldLiteralConstructors(node);    	non-compiled	[CE]  orphaned  case	66	None	replace
306	[BUG]  [BUGGY]  return  tryFoldNonCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldNonCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldNonCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldNonCallConstructors(node);    	non-compiled	[CE]  orphaned  case	47	None	replace
307	[BUG]  [BUGGY]  return  tryFoldCallStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallStandardConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldCallStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	49	None	replace
308	[BUG]  [BUGGY]  return  tryFoldCallStandardConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallStandardConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallStandardConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS);	  return    tryFoldCallStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	49	None	replace
309	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldStandardConstructors(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
310	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCcallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldCcallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldCcallConstructor(node);  }  else  {  Preconditions.checkNotNull(node);  return  null;  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    Preconditions.checkNotNull(node);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
311	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  node.getParent());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  node.getParent());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  node.getParent());	  return    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	30	None	replace
312	[BUG]  [BUGGY]  return  tryFoldCALLConstructors(node,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCALLConstructors(node,  true);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCALLConstructors(node,  true);	  return    tryFoldStandardConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	13	None	replace
313	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldConstructors(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryFoldConstructors(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryFoldConstructors(node);  }  else  {  node  =  tryFoldStandardConstructors(node);  }	  return    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
314	[BUG]  [BUGGY]  return  tryFoldConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node.getFirstChild());	  return    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	9	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors(node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructors(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructors(node);    }    	non-compiled	[CE]  	62	None	replace
316	[BUG]  [BUGGY]  return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    tryFoldStandardConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	76	None	replace
317	[BUG]  [BUGGY]  Node  node  =  node.removeChild(node.getFirstChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  node.removeChild(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  node.removeChild(node.getFirstChild());	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  orphaned  case	16	None	replace
318	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent()  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.getParent()  +  1);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.getParent()  +  1);	  Node    node    =    tryFoldCallConstructors(node.getParent());    	non-compiled	[CE]  orphaned  case	22	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  INVALID_REGULAR_FLAGS);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  INVALID_REGULAR_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldLiteralConstructors,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_FLAGS);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldLiteralConstructors);    	non-compiled	[CE]  orphaned  case	67	None	replace
322	[BUG]  [BUGGY]  node  =  tryFoldConstructors(node.getFirstChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldConstructors(node.getFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldConstructors(node.getFirstChild());	  node    =    tryFoldConstructors(node);    	non-compiled	[CE]  orphaned  case	60	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  false,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    node,    false);    	non-compiled	[CE]  orphaned  case	59	None	replace
324	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.removeFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.removeFirstChild());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.removeFirstChild());	  Node    node    =    tryFoldCallConstructors(node.getFirstChild());    	non-compiled	[CE]  orphaned  case	24	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS,  tryFoldStandardConstructors(node));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS,  tryFoldStandardConstructors(node));  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  STANDARD_OBJECT_CONSTRUCTORS,  tryFoldStandardConstructors(node));	  NodeTraversal.traverse(compiler,    node,    tryFoldStandardConstructors(node));    	non-compiled	[CE]  orphaned  case	73	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_EXPRESSION_FLAGS,  tryFoldStandardConstructors(node));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_EXPRESSION_FLAGS,  tryFoldStandardConstructors(node));  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  INVALID_REGULAR_EXPRESSION_FLAGS,  tryFoldStandardConstructors(node));	  NodeTraversal.traverse(compiler,    node,    tryFoldStandardConstructors(node));    	non-compiled	[CE]  orphaned  case	73	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  INVALID_REGULAR_FLAGS);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  INVALID_REGULAR_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldStandardConstructors(node),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    node,    tryFoldStandardConstructors(node));    	non-compiled	[CE]  orphaned  case	73	None	replace
328	[BUG]  [BUGGY]  node  =  tryFoldCallStandardConstructors(node);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallStandardConstructors(node);	  node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	14	None	replace
329	[BUG]  [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryCallConstructor(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.CALL)  {  return  tryCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.CALL)  {  return  tryCallConstructor(node);  }	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
330	[BUG]  [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryCallConstructor(node);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.GETPROP)  {  return  tryCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.GETPROP)  {  return  tryCallConstructor(node);  }	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
331	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryCallConstructor(node);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  return  tryCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NAME)  {  return  tryCallConstructor(node);  }	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
332	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryCallConstructor(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  return  tryCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  return  tryCallConstructor(node);  }	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
333	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NEW)  {  return  tryCallConstructor(node);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()  ==  Token.NEW)  {  return  tryCallConstructor(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()  ==  Token.NEW)  {  return  tryCallConstructor(node);  }	  return    tryCallConstructor(node);    	non-compiled	[CE]  orphaned  case	5	None	replace
334	[BUG]  [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldConstructors(node);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.GETPROP)  {  return  tryFoldConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.GETPROP)  {  return  tryFoldConstructors(node);  }	  if(node.getType()    ==    Token.GETPROP)    {    return    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	32	None	replace
335	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getChildCount());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getChildCount());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.getChildCount());	  Node    node    =    tryFoldStandardConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	37	None	replace
336	[BUG]  [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getNext());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldStandardConstructors(node.getNext());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldStandardConstructors(node.getNext());	  Node    node    =    tryFoldStandardConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	37	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  PROPERTY);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  PROPERTY);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction(),  PROPERTY);	  NodeTraversal.traverse(compiler,    node,    new    FoldArrayAction());    	non-compiled	[CE]  orphaned  case	58	None	replace
339	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  false,  null);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  false,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  false,  null);	  return    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	27	None	replace
340	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  false,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  false,  false);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  false,  false);	  return    tryFoldCallConstructors(node,    false);    	non-compiled	[CE]  orphaned  case	27	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructor(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructor(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructor(node);	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructor(node));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructor(node));  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	NodeTraversal.traverse(compiler,  node,  tryFoldCallConstructor(node));	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldCallConstructor(node);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
343	[BUG]  [BUGGY]  return  tryFoldLiteralConstructors(node,  null);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldLiteralConstructors(node,  null);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldLiteralConstructors(node,  null);	  return    tryFoldLiteralConstructors(node,    true);    	non-compiled	[CE]  orphaned  case	61	None	replace
344	[BUG]  [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldConstructors(node);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  if(node.getType()!=  Token.CALL)  {  return  tryFoldConstructors(node);  }  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	if(node.getType()!=  Token.CALL)  {  return  tryFoldConstructors(node);  }	  if(node.getType()    ==    Token.CALL)    {    return    tryFoldStandardConstructors(node);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
345	[BUG]  [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallConstructors(node.cloneTree(),  this);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallConstructors(node.cloneTree(),  this);	  Node    node    =    tryFoldCallConstructors(node.cloneTree());    	non-compiled	[CE]  orphaned  case	41	None	replace
346	[BUG]  [BUGGY]  return  tryFoldCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS_RE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS_RE);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallConstructors(node,  STANDARD_OBJECT_CONSTRUCTORS_RE);	  return    tryFoldCallConstructors(node,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  orphaned  case	51	None	replace
347	[BUG]  [BUGGY]  Node  node  =  tryFoldConstructors(node.getChildCount());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldConstructors(node.getChildCount());  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldConstructors(node.getChildCount());	  Node    node    =    tryFoldConstructors(node.getType());    	non-compiled	[CE]  orphaned  case	39	None	replace
348	[BUG]  [BUGGY]  return  tryFoldCallLocalConstructors(node);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  return  tryFoldCallLocalConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	return  tryFoldCallLocalConstructors(node);	  return    tryFoldLocalConstructors(node);    	non-compiled	[CE]  orphaned  case	42	None	replace
349	[BUG]  [BUGGY]  node  =  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  node  =  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	node  =  tryFoldCallConstructors(node,  INVALID_REGULAR_EXPRESSION_FLAGS);	  node    =    tryFoldCallConstructors(node);    	non-compiled	[CE]  orphaned  case	56	None	replace
350	[BUG]  [BUGGY]  Node  node  =  tryFoldCallStandardConstructors(node);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  node;  case  Token.NEW:  node  =  tryFoldStandardConstructors(node);  if  (node.getType()  !=  Token.CALL)  {  return  node;  }    case  Token.CALL:      [BUGGY]  Node  node  =  tryFoldCallStandardConstructors(node);  [BUGGY]        default:  return  node;  //Nothing  changed  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22360679774997896	98	98	1	replace	Node  node  =  tryFoldCallStandardConstructors(node);	  Node    node    =    tryFoldStandardConstructors(node);    	non-compiled	[CE]  orphaned  case	26	None	replace
