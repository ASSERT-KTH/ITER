bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    equalResult);    	non-compiled	[CE]  	46	None	replace
2	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equalResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult);    	non-compiled	[CE]  	46	None	replace
3	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult);    	non-compiled	[CE]  	46	None	replace
4	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
5	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equalResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  n,  equalResult);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
6	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
7	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
8	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  false);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
9	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
10	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
11	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
12	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
13	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equalResult  -  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equalResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  leftParent,  equalResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
14	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult  -  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
15	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
16	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  parent);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
17	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  rightVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  rightVal);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
18	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
19	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  parent);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
20	[BUG]  [BUGGY]  result  =  equivalentResult.toBoolean(true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult.toBoolean(true);	  result    =    nVal.toBoolean(true);    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  result  =  nVal.toBoolean(equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal.toBoolean(equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(equivalentResult);	  result    =    nVal.toBoolean(true);    	non-compiled	[CE]  	13	None	replace
22	[BUG]  [BUGGY]  result  =  nVal.toBoolean(booleanResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal.toBoolean(booleanResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(booleanResult);	  result    =    nVal.toBoolean(true);    	non-compiled	[CE]  	13	None	replace
23	[BUG]  [BUGGY]  result  =  nVal.toBoolean(true,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal.toBoolean(true,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(true,  equivalentResult);	  result    =    nVal.toBoolean(true);    	non-compiled	[CE]  	13	None	replace
24	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  rightParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  rightParent);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    result);    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  result);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  result);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    result);    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  rightParent,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  rightParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  rightParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    result);    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    result);    	non-compiled	[CE]  	43	None	replace
28	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalentResult(nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    result);    	non-compiled	[CE]  	43	None	replace
29	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  result);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nextVal,  result);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
30	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult,  result);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
31	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equalResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nextVal,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
32	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
33	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nextVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nextVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nextVal);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
34	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  leftParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  leftParent);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    parent);    	non-compiled	[CE]  	60	None	replace
35	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    parent);    	non-compiled	[CE]  	60	None	replace
36	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  equalResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  nVal,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equalResult);    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equalResult);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  leftParent,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equalResult);    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  parent);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalResult,  parent);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equalResult);    	non-compiled	[CE]  	25	None	replace
39	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  parent,  equalResult);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  parent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  parent,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equalResult);    	non-compiled	[CE]  	25	None	replace
40	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult,  equivalentResult);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equalResult);    	non-compiled	[CE]  	25	None	replace
41	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nVal);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
42	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  false);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
43	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rval);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rval);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
44	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
45	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
46	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	20	None	replace
47	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE);	  result    =    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	20	None	replace
48	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	20	None	replace
49	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  2);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  nVal,  2);	  result    =    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	20	None	replace
50	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  ||  result);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  ||  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  ||  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
51	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result  &&  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result  &&  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result  &&  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
52	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  &&  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  &&  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult  &&  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
53	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  result,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  result,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  result,  false);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
54	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result  ||  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result  ||  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result  ||  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
55	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  rightVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  leftParent,  rightVal);	  result    =    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
56	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
57	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  right,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  right,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  right,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithLocal(n,  leftParent,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithLocal(n,  leftParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithLocal(n,  leftParent,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  result,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  result,  equivalentResult);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  result);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  result);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  OR_PRECEDENCE);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  OR_PRECEDENCE);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  result);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  result);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  false);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  newOp,  equivalentResult);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  newOp,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  newOp,  equivalentResult);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  result,  equalResult);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  result,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  result,  equalResult);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
66	[BUG]  [BUGGY]  result  =  equalResult?  1  :  0;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
67	[BUG]  [BUGGY]  result  =  equivalentResult?  2  :  0;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult?  2  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult?  2  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
68	[BUG]  [BUGGY]  result  :  equivalentResult?  1  :  0;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  :  equivalentResult?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  :  equivalentResult?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
69	[BUG]  [BUGGY]  result  =  nVal?  1  :  0;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
70	[BUG]  [BUGGY]  result  =  equivalentResult?  3  :  0;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult?  3  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult?  3  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
71	[BUG]  [BUGGY]  result  =  error?  1  :  0;  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  error?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  error?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
72	[BUG]  [BUGGY]  result  =  rightVal.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toBoolean(true);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
73	[BUG]  [BUGGY]  result  =  rightVal.toBoolean(false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toBoolean(false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toBoolean(false);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
74	[BUG]  [BUGGY]  result  =  equalResult;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult;	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
75	[BUG]  [BUGGY]  result  =  rightVal.toAnnotation(true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toAnnotation(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toAnnotation(true);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
76	[BUG]  [BUGGY]  result  =  rightVal.toInt();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toInt();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toInt();	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
77	[BUG]  [BUGGY]  result  =  rightVal.toOBJECT(true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toOBJECT(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toOBJECT(true);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
78	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    leftParent,    equalResult);    	non-compiled	[CE]  	5	None	replace
79	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  rightVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  rightVal);	  return    maybeReplaceChildWithNumber(nVal,    leftParent,    equalResult);    	non-compiled	[CE]  	5	None	replace
80	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  leftParent,  equalResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  leftParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  leftParent,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    leftParent,    equalResult);    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    leftParent,    equalResult);    	non-compiled	[CE]  	5	None	replace
82	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  leftParent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  leftParent);	  return    maybeReplaceChildWithNumber(nVal,    leftParent,    equalResult);    	non-compiled	[CE]  	5	None	replace
83	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equalResult,  result);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equalResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equalResult);    	non-compiled	[CE]  	52	None	replace
84	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  equalResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equalResult);    	non-compiled	[CE]  	52	None	replace
85	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  nVal,  equivalentResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
86	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult,  false);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
87	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
88	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  result,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
89	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equalResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  nVal,  equalResult);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
90	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult,  rval);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult,  rval);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
91	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  result);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    result);    	non-compiled	[CE]  	33	None	replace
92	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  result);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    result);    	non-compiled	[CE]  	33	None	replace
93	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equalResult,  result);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	26	None	replace
94	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE,  result);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  OR_PRECEDENCE,  result);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	26	None	replace
95	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  TernaryValue.UNKNOWN,  nVal,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  TernaryValue.UNKNOWN,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  TernaryValue.UNKNOWN,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	26	None	replace
96	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  rightVal,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  rightVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  rightVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	26	None	replace
97	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
98	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equivalentResult,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
99	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
100	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result,  equalResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result,  equalResult);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
101	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equalResult,  result);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
102	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  AND_PRECEDENCE,  equivalentResult,  result);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  AND_PRECEDENCE,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  AND_PRECEDENCE,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
103	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal,  equivalentResult);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    result);    	non-compiled	[CE]  	75	None	replace
104	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  nVal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    result);    	non-compiled	[CE]  	75	None	replace
105	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  nVal,  equivalentResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalentResult(nVal,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    result);    	non-compiled	[CE]  	75	None	replace
106	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  result,  equivalentResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
107	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE,  result);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
108	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  rightVal,  equivalentResult);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  rightVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  rightVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
109	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
110	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  result);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
111	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult,  result);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	3	None	replace
112	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  result,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	3	None	replace
113	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	3	None	replace
114	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  rval);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  rval);	  return    maybeReplaceChildWithNumber(nVal,    result,    equivalentResult);    	non-compiled	[CE]  	32	None	replace
115	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  false);	  return    maybeReplaceChildWithNumber(nVal,    result,    equivalentResult);    	non-compiled	[CE]  	32	None	replace
116	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  falseNode);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  falseNode);	  return    maybeReplaceChildWithNumber(nVal,    result,    equivalentResult);    	non-compiled	[CE]  	32	None	replace
117	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent,  result);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent,  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    rightParent);    	non-compiled	[CE]  	69	None	replace
118	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult.intValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult.intValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult.intValue());	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
119	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue(),  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue(),  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal.intValue(),  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
120	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal.intValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal.intValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nVal.intValue());	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
121	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal.intValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal.intValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  nVal.intValue());	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
122	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  nVal.intValue());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  nVal.intValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalentResult(nVal,  nVal.intValue());	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
123	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.doubleValue());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.doubleValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal.doubleValue());	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
124	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
125	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  OR_PRECEDENCE);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
126	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
127	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  n,  OR_PRECEDENCE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  n,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  n,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
128	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  rightParent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  rightParent);	  return    maybeReplaceChildWithNumber(n,    rightParent,    result);    	non-compiled	[CE]  	41	None	replace
129	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightParent,  equivalentResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  rightParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    rightParent,    result);    	non-compiled	[CE]  	41	None	replace
130	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    nVal);    	non-compiled	[CE]  	86	None	replace
131	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  rightParent,  equalResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  rightParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  rightParent,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equalResult);    	non-compiled	[CE]  	7	None	replace
132	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult,    result);    	non-compiled	[CE]  	27	None	replace
133	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult,    result);    	non-compiled	[CE]  	27	None	replace
134	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal,  equalResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal,  equalResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult,    result);    	non-compiled	[CE]  	27	None	replace
135	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  rightVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  rightVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult,    result);    	non-compiled	[CE]  	27	None	replace
136	[BUG]  [BUGGY]  result  =  equivalentResult.toBoolean(false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult.toBoolean(false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult.toBoolean(false);	  result    =    nVal.toBoolean(false);    	non-compiled	[CE]  	14	None	replace
137	[BUG]  [BUGGY]  result  =  equalResult.toBoolean(false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult.toBoolean(false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult.toBoolean(false);	  result    =    nVal.toBoolean(false);    	non-compiled	[CE]  	14	None	replace
138	[BUG]  [BUGGY]  result  =  echivalentResult.toBoolean(false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  echivalentResult.toBoolean(false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  echivalentResult.toBoolean(false);	  result    =    nVal.toBoolean(false);    	non-compiled	[CE]  	14	None	replace
139	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    rightParent,    equalResult);    	non-compiled	[CE]  	24	None	replace
140	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    rightParent,    equalResult);    	non-compiled	[CE]  	24	None	replace
141	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  rightParent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalResult,  rightParent);	  result    =    maybeReplaceChildWithNumber(n,    rightParent,    equalResult);    	non-compiled	[CE]  	24	None	replace
142	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  leftParent,  nVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    nVal);    	non-compiled	[CE]  	85	None	replace
143	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  leftParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    nVal);    	non-compiled	[CE]  	85	None	replace
144	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  equalResult);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  leftParent,  equalResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equalResult);    	non-compiled	[CE]  	9	None	replace
145	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equalResult);    	non-compiled	[CE]  	9	None	replace
146	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  nVal,  equivalentResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    rightParent,    nVal);    	non-compiled	[CE]  	76	None	replace
147	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  rightVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  leftParent,  rightVal);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
148	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithEquivalent(n,  leftParent,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithEquivalent(n,  leftParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithEquivalent(n,  leftParent,  equivalentResult);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
149	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  leftParent,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  leftParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  leftParent,  equivalentResult);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
150	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightParent,  equalResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightParent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  rightParent,  equalResult);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
151	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  rightVal,  equivalentResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  rightVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  leftParent,  rightVal,  equivalentResult);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
152	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	28	None	replace
153	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult,  result);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
154	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  result,  equivalentResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
155	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  OR_PRECEDENCE,  result);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  OR_PRECEDENCE,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  OR_PRECEDENCE,  result);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
156	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
157	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result,  false);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
158	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  true);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
159	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult,  true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equalResult,  true);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
160	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  false);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
161	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  false,  result);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  false,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  false,  result);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
162	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  true);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
163	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equalResult,  false);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  result);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  OR_PRECEDENCE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  OR_PRECEDENCE);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  result,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  result,  equivalentResult);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newOp,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newOp,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  newOp,  equivalentResult);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  equivalentResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  this,  equivalentResult);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  equivalentResult);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  null,  equivalentResult);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
170	[BUG]  [BUGGY]  int  rval  =  nVal.getFirstChild().getString();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getFirstChild().getString();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getFirstChild().getString();	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
171	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getString()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getString()  +  1;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getString()  +  1;	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
172	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getString()  +  2;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getString()  +  2;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getString()  +  2;	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
173	[BUG]  [BUGGY]  int  rval  =  nVal.getNext().getString();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getNext().getString();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getNext().getString();	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
174	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getIndex(equivalentResult);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getIndex(equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getIndex(equivalentResult);	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
175	[BUG]  [BUGGY]  nVal  =  nVal.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getLastChild();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getLastChild();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
176	[BUG]  [BUGGY]  nVal  =  nVal.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getParent();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getParent();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
177	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  +  equivalentResult;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  +  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  +  equivalentResult;	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
178	[BUG]  [BUGGY]  nVal  =  nVal.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getFirstChild();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getFirstChild();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
179	[BUG]  [BUGGY]  nVal  =  nVal.getPrevious();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getPrevious();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getPrevious();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
180	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  ||  equivalentResult;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  ||  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  ||  equivalentResult;	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
181	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equalResult,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equalResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equalResult,  parent);	  result    =    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	23	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  equalResult,  result);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  equalResult,  result);	  NodeTraversal.traverse(compiler,    n,    equalResult);    	non-compiled	[CE]  	66	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equalResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  equalResult);	  NodeTraversal.traverse(compiler,    n,    equalResult);    	non-compiled	[CE]  	66	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  equivalentResult,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  equivalentResult,  false);	  NodeTraversal.traverse(compiler,    n,    equalResult);    	non-compiled	[CE]  	66	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  equalResult);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  this,  equalResult);	  NodeTraversal.traverse(compiler,    n,    equalResult);    	non-compiled	[CE]  	66	None	replace
186	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  rightVal.toBoolean(true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  rightVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
187	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
188	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  rightVal.toBoolean(false);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  rightVal.toBoolean(false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  rightVal.toBoolean(false);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
189	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  leftVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  leftVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  leftVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
190	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  rightVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  rightVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
191	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
192	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  rightVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  rightVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
193	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    nVal);    	non-compiled	[CE]  	45	None	replace
194	[BUG]  [BUGGY]  result  =  equalResult(externalResult)?  NodeUtil.getBooleanValue(nVal):  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult(externalResult)?  NodeUtil.getBooleanValue(nVal):  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult(externalResult)?  NodeUtil.getBooleanValue(nVal):  false;	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
195	[BUG]  [BUGGY]  result  =  equalResult.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
196	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  nVal.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  nVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  nVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
197	[BUG]  [BUGGY]  result  =  equalResult(externalResult)?  NodeUtil.getBooleanValue(nVal):  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult(externalResult)?  NodeUtil.getBooleanValue(nVal):  null;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult(externalResult)?  NodeUtil.getBooleanValue(nVal):  null;	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
198	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  nVal);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    nVal);    	non-compiled	[CE]  	34	None	replace
199	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    nVal);    	non-compiled	[CE]  	34	None	replace
200	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  false);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    result);    	non-compiled	[CE]  	42	None	replace
201	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  rval);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  rval);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    result);    	non-compiled	[CE]  	42	None	replace
202	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    result);    	non-compiled	[CE]  	42	None	replace
203	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult,  falseNode);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult,  falseNode);	  result    =    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	53	None	replace
204	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal);	  result    =    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	53	None	replace
205	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  result.toBoolean(true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  result.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  result.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
206	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  n);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  n);	  return    maybeReplaceChildWithNumber(nVal,    n,    result);    	non-compiled	[CE]  	47	None	replace
207	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  n,  equivalentResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalentResult(nVal,  n,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalentResult(nVal,  n,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    result);    	non-compiled	[CE]  	47	None	replace
208	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  n,  equivalentResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  n,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  n,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    result);    	non-compiled	[CE]  	47	None	replace
209	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult,  n);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult,  n);	  return    maybeReplaceChildWithNumber(nVal,    n,    result);    	non-compiled	[CE]  	47	None	replace
210	[BUG]  [BUGGY]  result  =  nVal.toBoolean(false).booleanValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal.toBoolean(false).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(false).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
211	[BUG]  [BUGGY]  result  =  equivalentResult.toBoolean(true).booleanValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult.toBoolean(true).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult.toBoolean(true).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
212	[BUG]  [BUGGY]  nVal  =  nVal.toBoolean(false).booleanValue();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.toBoolean(false).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.toBoolean(false).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
213	[BUG]  [BUGGY]  Result  result  =  nVal.toBoolean(false).booleanValue();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  result  =  nVal.toBoolean(false).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  result  =  nVal.toBoolean(false).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
214	[BUG]  [BUGGY]  result  =  equalResult.toBoolean(true).booleanValue();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalResult.toBoolean(true).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalResult.toBoolean(true).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
215	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  rval);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  rval);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    rval);    	non-compiled	[CE]  	37	None	replace
216	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult,  nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    rval);    	non-compiled	[CE]  	37	None	replace
217	[BUG]  [BUGGY]  int  rval  =  nVal.getFirstChild().getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getFirstChild().getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getFirstChild().getNext();	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
218	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getNext()  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getNext()  +  1;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getNext()  +  1;	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
219	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getParent();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getParent();	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
220	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getNext()  +  2;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getNext()  +  2;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getNext()  +  2;	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
221	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getRowCount();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getRowCount();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getRowCount();	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
222	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  nVal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    nVal);    	non-compiled	[CE]  	78	None	replace
223	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    nVal);    	non-compiled	[CE]  	78	None	replace
224	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    parent,    equalResult,    result);    	non-compiled	[CE]  	31	None	replace
225	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  equivalentResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    parent,    equalResult,    result);    	non-compiled	[CE]  	31	None	replace
226	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equalResult,  equivalentResult);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    parent,    equalResult,    result);    	non-compiled	[CE]  	31	None	replace
227	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  equalResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  equalResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equalResult,    result);    	non-compiled	[CE]  	29	None	replace
228	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
229	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
230	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equalResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
231	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  AND_PRECEDENCE,  equivalentResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  AND_PRECEDENCE,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  AND_PRECEDENCE,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
232	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  nVal);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
233	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult  -  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
234	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
235	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
236	[BUG]  [BUGGY]  result  =  rightVal.toString(true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toString(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toString(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
237	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
238	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
239	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  rightVal.toString(true);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  rightVal.toString(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  rightVal.toString(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
240	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
241	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  nVal,  equivalentResult,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  nVal,  equivalentResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  nVal,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    parent);    	non-compiled	[CE]  	30	None	replace
242	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  rightParent,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  rightParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  rightParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    parent);    	non-compiled	[CE]  	30	None	replace
243	[BUG]  [BUGGY]  result  =  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  false;	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
244	[BUG]  [BUGGY]  Result  <  0  ||  equalResult)  {  result  =  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  0  ||  equalResult)  {  result  =  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  0  ||  equalResult)  {  result  =  false;	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
245	[BUG]  [BUGGY]  Result  <  0  ||  equalResult)  {  result  =  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  0  ||  equalResult)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  0  ||  equalResult)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
246	[BUG]  [BUGGY]  Result  <=  equalResult)  {  result  =  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
247	[BUG]  [BUGGY]  result  |=  equalResult)  {  result  =  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  equalResult)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  equalResult)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
248	[BUG]  [BUGGY]  Result  <=  equalResult  ||  result)  {  result  =  false;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult  ||  result)  {  result  =  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult  ||  result)  {  result  =  false;	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
249	[BUG]  [BUGGY]  Result  <=  equalResult  ||  result)  {  result  =  false;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult  ||  result)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult  ||  result)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
250	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(leftParent,  equivalentResult,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(leftParent,  equivalentResult,  n);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(leftParent,  equivalentResult,  n);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    leftParent);    	non-compiled	[CE]  	59	None	replace
251	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equalResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equalResult);	  return    maybeReplaceChildWithNumber(n,    rightParent,    equalResult);    	non-compiled	[CE]  	11	None	replace
252	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  rightParent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  rightParent);	  return    maybeReplaceChildWithNumber(n,    rightParent,    equalResult);    	non-compiled	[CE]  	11	None	replace
253	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  equivalentResult);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    nVal);    	non-compiled	[CE]  	62	None	replace
254	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  rightVal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  rightVal);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    nVal);    	non-compiled	[CE]  	62	None	replace
255	[BUG]  [BUGGY]  result  =  result;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  result;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  result;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
256	[BUG]  [BUGGY]  result  =  equivalentResult;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
257	[BUG]  [BUGGY]  Result  <  equivalentResult)  {  result  =  result;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  equivalentResult)  {  result  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  equivalentResult)  {  result  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
258	[BUG]  [BUGGY]  Result  <=  equalResult  ||  result)  {  equivalentResult  =  result;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult  ||  result)  {  equivalentResult  =  result;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult  ||  result)  {  equivalentResult  =  result;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
259	[BUG]  [BUGGY]  Result  {  equivalentResult  =  result;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  {  equivalentResult  =  result;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  {  equivalentResult  =  result;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
260	[BUG]  [BUGGY]  Result  <=  equalResult)  {  equivalentResult  =  result;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult)  {  equivalentResult  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult)  {  equivalentResult  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
261	[BUG]  [BUGGY]  result  |=  equalResult;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  equalResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  equalResult;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
262	[BUG]  [BUGGY]  ||  equivalentResult)  {  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  ||  equivalentResult)  {  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	||  equivalentResult)  {  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
263	[BUG]  [BUGGY]  &&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  &&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	&&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
264	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
265	[BUG]  [BUGGY]  &&  equivalentResult)  {  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  &&  equivalentResult)  {  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	&&  equivalentResult)  {  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
266	[BUG]  [BUGGY]  &&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  &&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	&&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
267	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
268	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  falseNode);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  falseNode);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	73	None	replace
269	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    parent);    	non-compiled	[CE]  	55	None	replace
270	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  rightParent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  rightParent);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    parent);    	non-compiled	[CE]  	55	None	replace
271	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equalResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equalResult);	  return    maybeReplaceChildWithNumber(n,    result,    equalResult);    	non-compiled	[CE]  	72	None	replace
272	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  equalResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  equalResult);	  return    maybeReplaceChildWithNumber(n,    result,    equalResult);    	non-compiled	[CE]  	72	None	replace
273	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  equalResult);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  result,  equalResult);	  return    maybeReplaceChildWithNumber(n,    result,    equalResult);    	non-compiled	[CE]  	72	None	replace
274	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	35	None	replace
275	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalResult,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	35	None	replace
276	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
277	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  2);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  2);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
278	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result  -  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
279	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  +  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  +  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
280	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
281	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  falseNode);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  falseNode);	  result    =    maybeReplaceChildWithNumber(n,    rightParent,    equivalentResult);    	non-compiled	[CE]  	21	None	replace
282	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(result,    equivalentResult);    	non-compiled	[CE]  	70	None	replace
283	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(result,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(result,  equivalentResult);	  return    maybeReplaceChildWithNumber(result,    equivalentResult);    	non-compiled	[CE]  	70	None	replace
284	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  OR_PRECEDENCE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(result,    nVal,    equivalentResult);    	non-compiled	[CE]  	63	None	replace
285	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal,  equalResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  nVal,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equalResult);    	non-compiled	[CE]  	39	None	replace
286	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
287	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
288	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult,  nVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
289	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  nVal,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
290	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  rightVal);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  rightVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
291	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  nVal);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
292	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equalResult,    result);    	non-compiled	[CE]  	6	None	replace
293	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equalResult,    result);    	non-compiled	[CE]  	6	None	replace
294	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equalResult,    result);    	non-compiled	[CE]  	6	None	replace
295	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  result,  equivalentResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equalResult,    result);    	non-compiled	[CE]  	6	None	replace
296	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  nVal,  equivalentResult);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    result);    	non-compiled	[CE]  	38	None	replace
297	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalentResult(n,  nVal,  equivalentResult);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalentResult(n,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalentResult(n,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    result);    	non-compiled	[CE]  	38	None	replace
298	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    parent);    	non-compiled	[CE]  	54	None	replace
299	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(parent,  equalResult,  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(parent,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(parent,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    parent);    	non-compiled	[CE]  	54	None	replace
300	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  nVal,  equalResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  nVal,  equalResult);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
301	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
302	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
303	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toString(true);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
304	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent);	  result    =    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	53	None	replace
305	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	53	None	replace
306	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult  -  1,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult  -  1,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult  -  1,  nVal);	  result    =    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	35	None	replace
307	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
308	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  parent  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  parent  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  parent  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  OR_PRECEDENCE,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  OR_PRECEDENCE,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  OR_PRECEDENCE,  equivalentResult);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  newOp);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  newOp);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  equivalentResult,  newOp);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
311	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  result);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal,  result);	  return    maybeReplaceChildWithNumber(result,    nVal,    equivalentResult);    	non-compiled	[CE]  	63	None	replace
312	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  equalResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal,  equalResult);	  return    maybeReplaceChildWithNumber(result,    nVal,    equivalentResult);    	non-compiled	[CE]  	63	None	replace
313	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equalResult,  nVal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    nVal);    	non-compiled	[CE]  	78	None	replace
314	[BUG]  [BUGGY]  int  rval  =  nVal.getfirstChild().getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getfirstChild().getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getfirstChild().getNext();	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
315	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getNext()  +  equivalentResult;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getNext()  +  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getNext()  +  equivalentResult;	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
316	[BUG]  [BUGGY]  result  |=  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    result);    	non-compiled	[CE]  	75	None	replace
317	[BUG]  [BUGGY]  return  maybeReplaceChildWithNull(nVal,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNull(nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNull(nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal);    	non-compiled	[CE]  	45	None	replace
318	[BUG]  [BUGGY]  nVal  =  nVal.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.toBoolean(true);	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
319	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  <=  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  <=  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  <=  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toBoolean(true);	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
320	[BUG]  [BUGGY]  nVal  =  nVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  nVal.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  nVal.getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.toBoolean(true)?  TernaryValue.UNKNOWN  :  nVal.getNext();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
321	[BUG]  [BUGGY]  nVal  =  nVal.toBoolean(result)?  TernaryValue.UNKNOWN  :  nVal.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.toBoolean(result)?  TernaryValue.UNKNOWN  :  nVal.getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.toBoolean(result)?  TernaryValue.UNKNOWN  :  nVal.getNext();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
322	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nextNode,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  nextNode,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  nextNode,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	23	None	replace
323	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  equivalentResult);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
324	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  +  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  +  1);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
325	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult?  1  :  0);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult?  1  :  0);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult?  1  :  0);	  result    =    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	44	None	replace
326	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
327	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
328	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
329	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
330	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
331	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
332	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  nextVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  nextVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  nextVal);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
333	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  equalResult,  rightParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  equalResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  equalResult,  rightParent);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equalResult,    result);    	non-compiled	[CE]  	6	None	replace
334	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
335	[BUG]  [BUGGY]  &&  equalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  &&  equalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	&&  equalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
336	[BUG]  [BUGGY]  &&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  &&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	&&  equivalentResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
337	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  parent);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    parent);    	non-compiled	[CE]  	60	None	replace
338	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result  -  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
339	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  equivalentResult  -  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
340	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal  -  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
341	[BUG]  [BUGGY]  result  =  rightVal.to  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.to  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.to	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
342	[BUG]  [BUGGY]  result  =  result?  1  :  0;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  result?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  result?  1  :  0;	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
343	[BUG]  [BUGGY]  Result  <=  equivalentResult;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equivalentResult;	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
344	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  2  *  equivalentResult,  result);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  2  *  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  2  *  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
345	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  rightVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  rightVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult,    result);    	non-compiled	[CE]  	27	None	replace
346	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  rightParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  rightParent);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    nVal);    	non-compiled	[CE]  	86	None	replace
347	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  leftParent,  result);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
348	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  equivalentResult,  leftParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  equivalentResult,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  equivalentResult,  leftParent);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
349	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	73	None	replace
350	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nParent,  equivalentResult,  result);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nParent,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nParent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	73	None	replace
351	[BUG]  [BUGGY]  Result  <=  equalResult)  {  result  =  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult)  {  result  =  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult)  {  result  =  false;	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
352	[BUG]  [BUGGY]  result)  {  result  =  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
353	[BUG]  [BUGGY]  result  |=  equalResult)  {  result  =  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  equalResult)  {  result  =  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  equalResult)  {  result  =  false;	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
354	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getString()  +  equivalentResult;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getLastChild().getString()  +  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getString()  +  equivalentResult;	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
355	[BUG]  [BUGGY]  int  rval  =  nVal.getfirstChild().getString();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getfirstChild().getString();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getfirstChild().getString();	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
356	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent,  result);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent,  result);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    leftParent);    	non-compiled	[CE]  	59	None	replace
357	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent,  falseNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent,  falseNode);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent,  falseNode);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    leftParent);    	non-compiled	[CE]  	59	None	replace
358	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  result,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	28	None	replace
359	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  null);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  null);	  return    maybeReplaceChildWithNumber(nVal,    n,    result);    	non-compiled	[CE]  	47	None	replace
360	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  rightParent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  rightParent);	  return    maybeReplaceChildWithNumber(n,    rightParent,    nVal);    	non-compiled	[CE]  	76	None	replace
361	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    result);    	non-compiled	[CE]  	58	None	replace
362	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  n);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult,  n);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
363	[BUG]  [BUGGY]  result?  1  :  0;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
364	[BUG]  [BUGGY]  result  |=  equivalentResult?  1  :  0;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  equivalentResult?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  equivalentResult?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
365	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  leftParent,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  leftParent,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  leftParent,  result);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equalResult,    result);    	non-compiled	[CE]  	29	None	replace
366	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1,  parent);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    parent);    	non-compiled	[CE]  	54	None	replace
367	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  result);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
368	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  OR_PRECEDENCE);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalResult,  OR_PRECEDENCE);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
369	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
370	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult  -  1,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult  -  1,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult  -  1,  parent);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
371	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  nVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalResult,  nVal);	  result    =    maybeReplaceChildWithNumber(n,    equivalentResult,    parent);    	non-compiled	[CE]  	57	None	replace
372	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    nVal);    	non-compiled	[CE]  	49	None	replace
373	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  falseNode);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  falseNode);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    nVal);    	non-compiled	[CE]  	49	None	replace
374	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  OR_PRECEDENCE,  equivalentResult);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  OR_PRECEDENCE,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  OR_PRECEDENCE,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
375	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  2  *  equivalentResult,  result);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  2  *  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  2  *  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  OR_PRECEDENCE,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  OR_PRECEDENCE,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  OR_PRECEDENCE,  equivalentResult);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  equivalentResult,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  equivalentResult,  result);	  NodeTraversal.traverse(compiler,    n,    equivalentResult);    	non-compiled	[CE]  	64	None	replace
378	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
379	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  leftParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
380	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  nVal,  result);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equalResult,  nVal,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equalResult,  nVal,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equalResult,    result);    	non-compiled	[CE]  	31	None	replace
381	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  rval);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  rval);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    rval);    	non-compiled	[CE]  	37	None	replace
382	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  false,  rval);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  false,  rval);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  false,  rval);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    rval);    	non-compiled	[CE]  	37	None	replace
383	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  rightParent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult,  rightParent);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	3	None	replace
384	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal  &&  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal  &&  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal  &&  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
385	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult  &&  nVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult  &&  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  equivalentResult  &&  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    &&    result);    	non-compiled	[CE]  	71	None	replace
386	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal.intValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal.intValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal.intValue());	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
387	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue()  +  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue()  +  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal.intValue()  +  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
388	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  result);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  result);	  return    maybeReplaceChildWithNumber(result,    equivalentResult);    	non-compiled	[CE]  	70	None	replace
389	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult  +  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  equivalentResult  +  1);	  return    maybeReplaceChildWithNumber(result,    equivalentResult);    	non-compiled	[CE]  	70	None	replace
390	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
391	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE,  result);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
392	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equalResult,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  OR_PRECEDENCE,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
393	[BUG]  [BUGGY]  result  =  equivalentResult.toBoolean(false).booleanValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equivalentResult.toBoolean(false).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult.toBoolean(false).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
394	[BUG]  [BUGGY]  result  =  nVal.toBoolean(true),  equivalentResult.booleanValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal.toBoolean(true),  equivalentResult.booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(true),  equivalentResult.booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
395	[BUG]  [BUGGY]  Result  rval  =  nVal.toBoolean(true).booleanValue();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  rval  =  nVal.toBoolean(true).booleanValue();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  rval  =  nVal.toBoolean(true).booleanValue();	  result    =    nVal.toBoolean(true).booleanValue();    	non-compiled	[CE]  	16	None	replace
396	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
397	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    nVal);    	non-compiled	[CE]  	87	None	replace
398	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  false);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
399	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  true);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
400	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  false);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
401	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  rightParent,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  rightParent,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  rightParent,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    result);    	non-compiled	[CE]  	2	None	replace
402	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  leftParent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  leftParent);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    parent);    	non-compiled	[CE]  	55	None	replace
403	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1,  nVal);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult  -  1,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    nVal);    	non-compiled	[CE]  	62	None	replace
404	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  result,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  result,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  result,  parent);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult,    parent);    	non-compiled	[CE]  	30	None	replace
405	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
406	[BUG]  [BUGGY]  AssertionFailedError  rval  =  equivalentResult?  NodeUtil.getBooleanValue(nVal):  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  AssertionFailedError  rval  =  equivalentResult?  NodeUtil.getBooleanValue(nVal):  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	AssertionFailedError  rval  =  equivalentResult?  NodeUtil.getBooleanValue(nVal):  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
407	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(externalResult!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
408	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
409	[BUG]  [BUGGY]  AssertionFailedError  rval  =  equivalentResult?  NodeUtil.getBooleanValue(nVal):  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  AssertionFailedError  rval  =  equivalentResult?  NodeUtil.getBooleanValue(nVal):  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	AssertionFailedError  rval  =  equivalentResult?  NodeUtil.getBooleanValue(nVal):  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
410	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  equalResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(result,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult);    	non-compiled	[CE]  	46	None	replace
411	[BUG]  [BUGGY]  result  =  nVal.toBoolean(result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  nVal.toBoolean(result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(result);	  result    =    nVal.toBoolean(true);    	non-compiled	[CE]  	13	None	replace
412	[BUG]  [BUGGY]  result)  {  equivalentResult  =  result;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result)  {  equivalentResult  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result)  {  equivalentResult  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
413	[BUG]  [BUGGY]  result  |=  equivalentResult)  {  equivalentResult  =  result;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  equivalentResult)  {  equivalentResult  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  equivalentResult)  {  equivalentResult  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
414	[BUG]  [BUGGY]  Result  <=  equalResult;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
415	[BUG]  [BUGGY]  Result  <=  equalResult)  {  equivalentResult  =  result;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <=  equalResult)  {  equivalentResult  =  result;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <=  equalResult)  {  equivalentResult  =  result;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
416	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toBoolean(true);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
417	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
418	[BUG]  [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  TernaryValue>  result  =  NodeUtil.getBooleanValue(nVal);  if(result  ==  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
419	[BUG]  [BUGGY]  result  |=  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
420	[BUG]  [BUGGY]  result  |=  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  |=  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  |=  maybeReplaceChildWithNumber(nVal,  equivalentResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
421	[BUG]  [BUGGY]  return  maybeReplaceChildWithNull(nVal,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNull(nVal,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNull(nVal,  equivalentResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    OR_PRECEDENCE);    	non-compiled	[CE]  	50	None	replace
422	[BUG]  [BUGGY]  int  rval  =  nVal.getImmutableSet().getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getImmutableSet().getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getImmutableSet().getNext();	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
423	[BUG]  [BUGGY]  int  nval  =  nVal.getFirstChild().getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  nval  =  nVal.getFirstChild().getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  nval  =  nVal.getFirstChild().getNext();	  int    rval    =    nVal.getLastChild().getNext();    	non-compiled	[CE]  	18	None	replace
424	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    nVal);    	non-compiled	[CE]  	49	None	replace
425	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal.intValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal.intValue());  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal.intValue());	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    nVal);    	non-compiled	[CE]  	49	None	replace
426	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult  &&  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult  &&  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult  &&  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult);    	non-compiled	[CE]  	22	None	replace
427	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  nVal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    nVal);    	non-compiled	[CE]  	78	None	replace
428	[BUG]  [BUGGY]  atch(result)  {  result  =  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  atch(result)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	atch(result)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
429	[BUG]  [BUGGY]  result  ||  equalResult)  {  result  =  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  ||  equalResult)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  ||  equalResult)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
430	[BUG]  [BUGGY]  result  ||  equivalentResult)  {  result  =  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  ||  equivalentResult)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  ||  equivalentResult)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
431	[BUG]  [BUGGY]  Result  <  0  ||  equivalentResult)  {  result  =  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  Result  <  0  ||  equivalentResult)  {  result  =  false;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	Result  <  0  ||  equivalentResult)  {  result  =  false;  }	  if(equivalentResult)    {    if(result)    {    result    =    false;    }    	non-compiled	[CE]  	67	None	replace
432	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    nVal);    	non-compiled	[CE]  	85	None	replace
433	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  nVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    nVal);    	non-compiled	[CE]  	85	None	replace
434	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nNode,  equivalentResult,  result);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nNode,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nNode,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	73	None	replace
435	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  false);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	73	None	replace
436	[BUG]  [BUGGY]  result  =  rightVal.toUpperBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toUpperBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toUpperBoolean(true);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
437	[BUG]  [BUGGY]  result  =  equalVal.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  equalVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equalVal.toBoolean(true);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
438	[BUG]  [BUGGY]  result  =  rightVal.toAnnotations(true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  rightVal.toAnnotations(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  rightVal.toAnnotations(true);	  if(result)    {    equivalentResult    =    equivalentResult;    }    else    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.to    	non-compiled	[CE]  	81	None	replace
439	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
440	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
441	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(tru	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true    	non-compiled	[CE]  	82	None	replace
442	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  nVal,  equivalentResult);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    result,    nVal,    equivalentResult);    	non-compiled	[CE]  	40	None	replace
443	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nextVal,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    nVal);    	non-compiled	[CE]  	86	None	replace
444	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equals,  result);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equals,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equals,  result);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
445	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalizerResult,  result);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalizerResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equalizerResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult,    result);    	non-compiled	[CE]  	74	None	replace
446	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equalizerResult,  result);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equalizerResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equalizerResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
447	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equals,  result);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equals,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equals,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult,    result);    	non-compiled	[CE]  	48	None	replace
448	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalVal,  rightParent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalVal,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalVal,  rightParent);	  result    =    maybeReplaceChildWithNumber(n,    rightParent,    equalResult);    	non-compiled	[CE]  	24	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  this,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  this,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  this,  equivalentResult);	  NodeTraversal.traverse(compiler,    nVal,    equivalentResult);    	non-compiled	[CE]  	65	None	replace
450	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal,  equivalentResult);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult,    nVal);    	non-compiled	[CE]  	62	None	replace
451	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightVal,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
452	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult  -  1);	  return    maybeReplaceChildWithNumber(nVal,    nextVal,    equivalentResult);    	non-compiled	[CE]  	61	None	replace
453	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult,  result);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(nVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    result);    	non-compiled	[CE]  	47	None	replace
454	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  nVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  nVal);	  result    =    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	51	None	replace
455	[BUG]  [BUGGY]  result  =  echivalentResult?  nVal.toBoolean(true):  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  echivalentResult?  nVal.toBoolean(true):  false;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  echivalentResult?  nVal.toBoolean(true):  false;	  result    =    nVal.toBoolean(false);    	non-compiled	[CE]  	14	None	replace
456	[BUG]  [BUGGY]  result  =  echivalentResult?  nVal.toBoolean(false):  equivalentResult;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  echivalentResult?  nVal.toBoolean(false):  equivalentResult;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  echivalentResult?  nVal.toBoolean(false):  equivalentResult;	  result    =    nVal.toBoolean(false);    	non-compiled	[CE]  	14	None	replace
457	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  parent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    parent);    	non-compiled	[CE]  	55	None	replace
458	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult,  equalVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult,  equalVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult,  equalVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    parent);    	non-compiled	[CE]  	55	None	replace
459	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult,    result);    	non-compiled	[CE]  	42	None	replace
460	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(true);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
461	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
462	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  Rval.toBoolean(true);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  Rval.toBoolean(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  Rval.toBoolean(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
463	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(false);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
464	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    }    	non-compiled	[CE]  	79	None	replace
465	[BUG]  [BUGGY]  int  rval  =  nVal.getInitialValue().getString();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  int  rval  =  nVal.getInitialValue().getString();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getInitialValue().getString();	  int    rval    =    nVal.getLastChild().getString();    	non-compiled	[CE]  	17	None	replace
466	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent);	  return    maybeReplaceChildWithNumber(n,    rightParent,    nVal);    	non-compiled	[CE]  	76	None	replace
467	[BUG]  [BUGGY]  atch(result)  {  equivalentResult  =  result;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  atch(result)  {  equivalentResult  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	atch(result)  {  equivalentResult  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
468	[BUG]  [BUGGY]  result  ||  equivalentResult)  {  equivalentResult  =  result;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  ||  equivalentResult)  {  equivalentResult  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  ||  equivalentResult)  {  equivalentResult  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
469	[BUG]  [BUGGY]  result  ||  equalResult)  {  equivalentResult  =  result;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  ||  equalResult)  {  equivalentResult  =  result;  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  ||  equalResult)  {  equivalentResult  =  result;  }	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
470	[BUG]  [BUGGY]  result  ||  equivalentResult)  {  equivalentResult  =  result;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  ||  equivalentResult)  {  equivalentResult  =  result;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  ||  equivalentResult)  {  equivalentResult  =  result;	  if(equivalentResult)    {    if(result)    {    equivalentResult    =    result;    }    	non-compiled	[CE]  	68	None	replace
471	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  replacement,  rightParent,  equivalentResult);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  replacement,  rightParent,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  replacement,  rightParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult,    result);    	non-compiled	[CE]  	3	None	replace
472	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult  -  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult    -    1);    	non-compiled	[CE]  	77	None	replace
473	[BUG]  [BUGGY]  result  &=  equivalentResult?  1  :  0;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  &=  equivalentResult?  1  :  0;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  &=  equivalentResult?  1  :  0;	  result    =    equivalentResult?    1    :    0;    	non-compiled	[CE]  	19	None	replace
474	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  leftVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  leftVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  leftVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
475	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightVal,  leftParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightVal,  leftParent);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightVal,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
476	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightParent,  leftVal);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightParent,  leftVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  rightParent,  leftVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    rightVal);    	non-compiled	[CE]  	8	None	replace
477	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
478	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
479	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toBoolean(true);	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	80	None	replace
480	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalVal,  equalResult);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equalVal,  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equalVal,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equalResult);    	non-compiled	[CE]  	25	None	replace
481	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal,  false);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal,  false);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult,    false);    	non-compiled	[CE]  	36	None	replace
482	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue()  +  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal.intValue()  +  1);	  return    maybeReplaceChildWithNumber(nVal,    nVal.intValue());    	non-compiled	[CE]  	89	None	replace
483	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toString(true);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
484	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
485	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toString(false);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toString(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  nVal.toString(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
486	[BUG]  [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(false);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  nVal  =  NodeUtil.getBooleanValue(nVal);  if(nVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toString(true);    }    	non-compiled	[CE]  	84	None	replace
487	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  first,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  first,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  first,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	23	None	replace
488	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalentValue(nVal,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalentValue(nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalentValue(nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    nVal);    	non-compiled	[CE]  	45	None	replace
489	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  &&  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult  &&  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult  &&  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult);    	non-compiled	[CE]  	46	None	replace
490	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult?  result  :  equalResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult?  result  :  equalResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult?  result  :  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    equalResult);    	non-compiled	[CE]  	46	None	replace
491	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  result,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  result,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    parent,    equalResult,    result);    	non-compiled	[CE]  	31	None	replace
492	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult,  result);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult,  result);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  parent,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equalResult,    result);    	non-compiled	[CE]  	31	None	replace
493	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult  +  1);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult  +  1);	  return    maybeReplaceChildWithNumber(nVal,    nVal,    equivalentResult);    	non-compiled	[CE]  	4	None	replace
494	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  nVal);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  result,  nVal);	  return    maybeReplaceChildWithNumber(n,    equivalentResult,    result);    	non-compiled	[CE]  	33	None	replace
495	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightVal,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  rightVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  rightVal,  equivalentResult);	  return    maybeReplaceChildWithEquivalent(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	12	None	replace
496	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  nVal,  equivalentResult);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  nVal,  equivalentResult);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult,    result);    	non-compiled	[CE]  	27	None	replace
497	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.getNext();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.getNext();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
498	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toString();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toString();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
499	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.getParent();  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.getParent();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
500	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toBoolean(true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toBoolean(true);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.UNKNOWN  :  nVal.toBoolean(true);	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
501	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.EMPTY  :  TernaryValue.UNKNOWN;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.EMPTY  :  TernaryValue.UNKNOWN;  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext()  <  equivalentResult?  TernaryValue.EMPTY  :  TernaryValue.UNKNOWN;	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	15	None	replace
502	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
503	[BUG]  [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toBoolean(false);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toBoolean(false);  }  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NeighborValue  rval  =  NodeUtil.getBooleanValue(nVal);  if(rval!=  TernaryValue.UNKNOWN)  {  result  =  rval.toBoolean(false);  }	  if(externalResult)    {    TernaryValue    rightVal    =    NodeUtil.getBooleanValue(nVal);    if(rightVal!=    TernaryValue.UNKNOWN)    {    result    =    rightVal.toBoolean(false);    }    	non-compiled	[CE]  	83	None	replace
504	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  nVal);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  nVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult    -    1);    	non-compiled	[CE]  	88	None	replace
505	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(n,    OR_PRECEDENCE,    equivalentResult,    result);    	non-compiled	[CE]  	56	None	replace
506	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  result,  rightVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;      [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  result,  rightVal);  [BUGGY]      }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  result,  rightVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equalResult,    result);    	non-compiled	[CE]  	29	None	replace
