bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  result);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  result);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult,  result);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  leftParent,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  result);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  rightVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  equalResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  equivalentResult);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithEquivalent(n,  leftParent,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithEquivalent(n,  leftParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  result  =  nVal.toBoolean(true);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  nVal.toBoolean(true);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(true);	      	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  result  =  nVal.toBoolean(false);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  nVal.toBoolean(false);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(false);	      	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  nVal  =  nVal.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  nVal  =  nVal.getNext();  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	nVal  =  nVal.getNext();	      	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  result  =  nVal.toBoolean(true).booleanValue();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  nVal.toBoolean(true).booleanValue();  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  nVal.toBoolean(true).booleanValue();	      	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getString();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  int  rval  =  nVal.getLastChild().getString();  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getString();	      	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  int  rval  =  nVal.getLastChild().getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  int  rval  =  nVal.getLastChild().getNext();  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	int  rval  =  nVal.getLastChild().getNext();	      	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  result  =  equivalentResult?  1  :  0;  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  equivalentResult?  1  :  0;  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  equivalentResult?  1  :  0;	      	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  rightParent,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  parent,  equalResult);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  result);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  result);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  result);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  result);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  parent);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  parent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  result);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  equalResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  equivalentResult);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  result,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  result,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  false);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  false);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  false);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  rval);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  rval);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  rval);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  result);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  nVal,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  nVal,  result);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equalResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	1	None	replace
40	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	1	None	replace
41	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  result);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  result);	  return    maybeReplaceChildWithNumber(n,    rightParent,    equivalentResult);    	non-compiled	[CE]  	2	None	replace
42	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
43	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
44	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
45	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  result);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  result);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  OR_PRECEDENCE);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  n,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equalResult);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  n,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  n,  equalResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(nVal,  rightParent,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  parent);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  parent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  parent);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	4	None	replace
55	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  parent);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  parent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
56	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult,  result);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  OR_PRECEDENCE,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
57	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  parent);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  parent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  equivalentResult,  parent);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  result);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  result);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  equivalentResult,  leftParent);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
60	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  parent);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  parent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  parent);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nextVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equalResult,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  equivalentResult);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(result,  nVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  nVal,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  equivalentResult);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  NodeTraversal.traverse(compiler,  n,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  equivalentResult);	      	non-compiled	[CE]  	7	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  NodeTraversal.traverse(compiler,  nVal,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  nVal,  equivalentResult);	      	non-compiled	[CE]  	7	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  equalResult);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  NodeTraversal.traverse(compiler,  n,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	NodeTraversal.traverse(compiler,  n,  equalResult);	      	non-compiled	[CE]  	7	None	replace
67	[BUG]  [BUGGY]  if(equivalentResult)  {  if(result)  {  result  =  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(equivalentResult)  {  if(result)  {  result  =  false;  }  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(equivalentResult)  {  if(result)  {  result  =  false;  }	      	non-compiled	[CE]  	7	None	replace
68	[BUG]  [BUGGY]  if(equivalentResult)  {  if(result)  {  equivalentResult  =  result;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(equivalentResult)  {  if(result)  {  equivalentResult  =  result;  }  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(equivalentResult)  {  if(result)  {  equivalentResult  =  result;  }	      	non-compiled	[CE]  	7	None	replace
69	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult,  rightParent);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(result,  equivalentResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(result,  equivalentResult);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
71	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  result);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  &&  result);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
72	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equalResult);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equalResult);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
73	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult,  result);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  parent,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    parent,    equivalentResult);    	non-compiled	[CE]  	4	None	replace
74	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  equivalentResult,  result);	  return    maybeReplaceChildWithNumber(nVal,    n,    equivalentResult);    	non-compiled	[CE]  	8	None	replace
75	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  result);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal,  result);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal,  result);	  return    maybeReplaceChildWithNumber(n,    nVal,    equivalentResult);    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  rightParent,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  rightParent,  nVal);	  return    maybeReplaceChildWithNumber(n,    rightParent,    equivalentResult);    	non-compiled	[CE]  	2	None	replace
77	[BUG]  [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equivalentResult  -  1);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  result  =  maybeReplaceChildWithNumber(n,  parent,  equivalentResult  -  1);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	result  =  maybeReplaceChildWithNumber(n,  parent,  equivalentResult  -  1);	  result    =    maybeReplaceChildWithNumber(n,    parent,    equivalentResult);    	non-compiled	[CE]  	6	None	replace
78	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  nVal);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  result,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    result,    equivalentResult);    	non-compiled	[CE]  	9	None	replace
79	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  }	      	non-compiled	[CE]  	7	None	replace
80	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true);	      	non-compiled	[CE]  	7	None	replace
81	[BUG]  [BUGGY]  if(result)  {  equivalentResult  =  equivalentResult;  }  else  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.to  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(result)  {  equivalentResult  =  equivalentResult;  }  else  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.to  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(result)  {  equivalentResult  =  equivalentResult;  }  else  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.to	      	non-compiled	[CE]  	7	None	replace
82	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(true	      	non-compiled	[CE]  	7	None	replace
83	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toBoolean(false);  }	      	non-compiled	[CE]  	7	None	replace
84	[BUG]  [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	if(externalResult)  {  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(nVal);  if(rightVal!=  TernaryValue.UNKNOWN)  {  result  =  rightVal.toString(true);  }	      	non-compiled	[CE]  	7	None	replace
85	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  leftParent,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  leftParent,  nVal);	  return    maybeReplaceChildWithNumber(n,    leftParent,    equivalentResult);    	non-compiled	[CE]  	3	None	replace
86	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  rightParent,  nVal);	  return    maybeReplaceChildWithNumber(nVal,    rightParent,    equivalentResult);    	non-compiled	[CE]  	10	None	replace
87	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult,  nVal);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult,  nVal);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult,  nVal);	  return    maybeReplaceChildWithNumber(n,    parent,    equivalentResult,    result);    	non-compiled	[CE]  	5	None	replace
88	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1);  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  equivalentResult  -  1);	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
89	[BUG]  [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);  int  equivalentResult  =  result  ?  1  :  0;    [BUGGY]  return  maybeReplaceChildWithNumber(nVal,  nVal.intValue());  [BUGGY]    }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	804	804	1	replace	return  maybeReplaceChildWithNumber(nVal,  nVal.intValue());	  return    maybeReplaceChildWithNumber(nVal,    equivalentResult);    	non-compiled	[CE]  	11	None	replace
