bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  left  =  parent.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getLastChild();	  Node    left    =    parent.getFirstChild();    	non-compiled	[CE]  	16	None	replace
2	[BUG]  [BUGGY]  Node  right  =  n.getLeadingChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getLeadingChild();	  Node    left    =    n.getLeadingChild()    +    1;    	non-compiled	[CE]  	65	None	replace
3	[BUG]  [BUGGY]  Node  left  =  node.getLeadingChild()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getLeadingChild()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getLeadingChild()  +  1;	  Node    left    =    n.getLeadingChild()    +    1;    	non-compiled	[CE]  	65	None	replace
4	[BUG]  [BUGGY]  Node  leftParent  =  n.getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getNext();	  Node    leftParent    =    n.getPreviousChild();    	non-compiled	[CE]  	46	None	replace
5	[BUG]  [BUGGY]  Node  leftParent  =  parent.getPreviousChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getPreviousChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getPreviousChild();	  Node    leftParent    =    n.getPreviousChild();    	non-compiled	[CE]  	46	None	replace
6	[BUG]  [BUGGY]  Node  leftParent  =  parent.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getLastChild();	  Node    leftParent    =    parent.getFirstChild();    	non-compiled	[CE]  	29	None	replace
7	[BUG]  [BUGGY]  Node  leftParent  =  node.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  node.getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  node.getFirstChild();	  Node    leftParent    =    parent.getFirstChild();    	non-compiled	[CE]  	29	None	replace
8	[BUG]  [BUGGY]  Node  rightParent  =  left.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  left.getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  left.getFirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
9	[BUG]  [BUGGY]  Node  rightParent  =  left.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  left.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  left.getLastChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
10	[BUG]  [BUGGY]  Node  rightParent  =  parent.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  parent.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  parent.getLastChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
11	[BUG]  [BUGGY]  Node  left  =  rightParent.getOwnerChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getOwnerChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getOwnerChild();	  Node    left    =    n.getOwnerChild();    	non-compiled	[CE]  	62	None	replace
12	[BUG]  [BUGGY]  Node  right  =  n.getLowerCase();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getLowerCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getLowerCase();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  Node  right  =  n.getLeftChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getLeftChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getLeftChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getLastChild()  ==  n);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()!=  n);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  left);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  left);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n,  OR_PRECEDENCE);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n,  OR_PRECEDENCE);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  n,  OR_PRECEDENCE);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
20	[BUG]  [BUGGY]  Node  leftParent  =  n.getLastChild().getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLastChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLastChild().getNext();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
21	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getParent();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
22	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().getString();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getString();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
23	[BUG]  [BUGGY]  Node  rightParent  =  n.getLastChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getLastChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getLastChild().getNext();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
24	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getFirstChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getFirstChild().getNext();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
25	[BUG]  [BUGGY]  Node  leftParent  =  parent.getLeadingChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getLeadingChild();	  Node    leftParent    =    n.getLeadingChild();    	non-compiled	[CE]  	47	None	replace
26	[BUG]  [BUGGY]  Node  leftParent  =  n.getRightChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getRightChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getRightChild();	  Node    leftParent    =    n.getLeadingChild();    	non-compiled	[CE]  	47	None	replace
27	[BUG]  [BUGGY]  Node  left  =  rightParent.getLastChild().getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getLastChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLastChild().getNext();	  Node    left    =    n.getLastChild().getNext();    	non-compiled	[CE]  	37	None	replace
28	[BUG]  [BUGGY]  Node  left  =  right.getLastChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.getLastChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getLastChild().getNext();	  Node    left    =    n.getLastChild().getNext();    	non-compiled	[CE]  	37	None	replace
29	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLastChild().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().getFirstChild();	  Node    left    =    n.getLastChild().getNext();    	non-compiled	[CE]  	37	None	replace
30	[BUG]  [BUGGY]  Node  left  =  n.getUpperCase();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getUpperCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getUpperCase();	  Node    left    =    rightParent.getLowerCase();    	non-compiled	[CE]  	35	None	replace
31	[BUG]  [BUGGY]  Node  left  =  parent.getLowerCase();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getLowerCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getLowerCase();	  Node    left    =    rightParent.getLowerCase();    	non-compiled	[CE]  	35	None	replace
32	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(n,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
33	[BUG]  [BUGGY]  Node  left  =  node.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getLastChild();	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
34	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase()  +  1;	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
35	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingChild().getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().getParent();	  Node    left    =    n.getLeadingChild().getNext();    	non-compiled	[CE]  	50	None	replace
36	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingChild().removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().removeFirstChild();	  Node    left    =    n.getLeadingChild().getNext();    	non-compiled	[CE]  	50	None	replace
37	[BUG]  [BUGGY]  Node  rightParent  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getNext();	  Node    rightParent    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  Node  rightParent  =  parent.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  parent.getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  parent.getFirstChild();	  Node    rightParent    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  Node  left  =  rightParent.getNextChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getNextChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getNextChild();	  Node    left    =    n.getNextChild();    	non-compiled	[CE]  	45	None	replace
40	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().getPrevious();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLastChild().getPrevious();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().getPrevious();	  Node    left    =    n.getFirstChild().getPrevious();    	non-compiled	[CE]  	44	None	replace
41	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getFirstChild();	  Node    left    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	38	None	replace
42	[BUG]  [BUGGY]  Node  left  =  rightParent.getFirstChild().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getFirstChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getFirstChild().getLastChild();	  Node    left    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	38	None	replace
43	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild().getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.getFirstChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getFirstChild().getLastChild();	  Node    left    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	38	None	replace
44	[BUG]  [BUGGY]  Node  left  =  nParent.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  nParent.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  nParent.getLastChild();	  Node    left    =    rightParent.getLastChild();    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  Node  leftParent  =  parent.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  Node  leftParent  =  n.getPreviousParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getPreviousParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getPreviousParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
47	[BUG]  [BUGGY]  Node  leftParent  =  right.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  right.getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  right.getParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  Node  left  =  n.getPreviousSibling();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getPreviousSibling();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getPreviousSibling();	  Node    left    =    n.getNextSibling();    	non-compiled	[CE]  	25	None	replace
49	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLastChild().removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().removeFirstChild();	  Node    left    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	53	None	replace
50	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().removeLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().removeLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().removeLastChild();	  Node    left    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	53	None	replace
51	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNextSibling();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().getNextSibling();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getNextSibling();	  Node    left    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	53	None	replace
52	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	11	None	replace
53	[BUG]  [BUGGY]  Node  rightParent  =  n.getRightParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getRightParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getRightParent();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
54	[BUG]  [BUGGY]  Node  rightParent  =  left.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  left.getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  left.getParent();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  Node  rightParent  =  n.getLeftChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getLeftChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getLeftChild();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLastChild().getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().getParent();	  Node    left    =    n.getFirstChild().getParent();    	non-compiled	[CE]  	39	None	replace
57	[BUG]  [BUGGY]  Node  left  =  n.getfirstChild()  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getfirstChild()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getfirstChild()  +  1;	  Node    left    =    n.getLastChild()    +    1;    	non-compiled	[CE]  	32	None	replace
58	[BUG]  [BUGGY]  Node  left  =  n.getPreviousChild()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getPreviousChild()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getPreviousChild()  +  1;	  Node    left    =    n.getLastChild()    +    1;    	non-compiled	[CE]  	32	None	replace
59	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  	12	None	replace
60	[BUG]  [BUGGY]  Node  right  =  n.getfirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getfirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getfirstChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  	12	None	replace
61	[BUG]  [BUGGY]  Node  leftParent  =  right.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  right.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  right.getLastChild();	  Node    leftParent    =    n.getLastChild();    	non-compiled	[CE]  	26	None	replace
62	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().getNext()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLastChild().getNext()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().getNext()  +  1;	  Node    left    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	40	None	replace
63	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getParent()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().getParent()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getParent()  +  1;	  Node    left    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	40	None	replace
64	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild().getNext()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getFirstChild().getNext()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getFirstChild().getNext()  +  1;	  Node    left    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	40	None	replace
65	[BUG]  [BUGGY]  Node  right  =  parent.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  parent.getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  parent.getLastChild();	  Node    right    =    leftParent.getLastChild();    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]  Node  left  =  rightParent.cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.cloneTree();	  Node    left    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
67	[BUG]  [BUGGY]  Node  left  =  parent.cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.cloneTree();	  Node    left    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
68	[BUG]  [BUGGY]  Node  left  =  right.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.cloneTree();	  Node    left    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getType()  ==  Token.AND);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getType()  ==  Token.AND);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getType()  ==  Token.AND);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND,  n.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND,  n.getFirstChild());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getType()  ==  Token.OR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getType()  ==  Token.OR);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getType()  ==  Token.OR);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  &&  n.getFirstChild()!=  n);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  &&  n.getFirstChild()!=  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND  &&  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.AND);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.AND);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()!=  Token.AND);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OR);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.OR);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
75	[BUG]  [BUGGY]  Node  leftParent  =  n.getLastChild().cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLastChild().cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLastChild().cloneTree();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
76	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneNode();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().cloneNode();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
77	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().clonePath();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().clonePath();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().clonePath();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
78	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().parent.cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().parent.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().parent.cloneTree();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
79	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneOperator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneOperator();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().cloneOperator();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
80	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneBlock();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneBlock();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().cloneBlock();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
81	[BUG]  [BUGGY]  Node  left  =  parent.getPreviousChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getPreviousChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getPreviousChild();	  Node    left    =    rightParent.getPreviousChild();    	non-compiled	[CE]  	36	None	replace
82	[BUG]  [BUGGY]  Node  left  =  node.getPreviousChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getPreviousChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getPreviousChild();	  Node    left    =    rightParent.getPreviousChild();    	non-compiled	[CE]  	36	None	replace
83	[BUG]  [BUGGY]  Node  right  =  n.getPreviousChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getPreviousChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getPreviousChild();	  Node    left    =    rightParent.getPreviousChild();    	non-compiled	[CE]  	36	None	replace
84	[BUG]  [BUGGY]  Node  left  =  nParent.getLeftChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  nParent.getLeftChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  nParent.getLeftChild();	  Node    left    =    rightParent.getLeftChild();    	non-compiled	[CE]  	14	None	replace
85	[BUG]  [BUGGY]  Node  left  =  parent.getLeftChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getLeftChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getLeftChild();	  Node    left    =    rightParent.getLeftChild();    	non-compiled	[CE]  	14	None	replace
86	[BUG]  [BUGGY]  Node  left  =  node.getLeftChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getLeftChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getLeftChild();	  Node    left    =    rightParent.getLeftChild();    	non-compiled	[CE]  	14	None	replace
87	[BUG]  [BUGGY]  Node  leftParent  =  n.getOwnerCase();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getOwnerCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getOwnerCase();	  Node    leftParent    =    n.getLowerCase();    	non-compiled	[CE]  	28	None	replace
88	[BUG]  [BUGGY]  Node  leftParent  =  parent.getLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getLowerCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getLowerCase();	  Node    leftParent    =    n.getLowerCase();    	non-compiled	[CE]  	28	None	replace
89	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeadingCase();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLeadingCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeadingCase();	  Node    leftParent    =    n.getLowerCase();    	non-compiled	[CE]  	28	None	replace
90	[BUG]  [BUGGY]  Node  left  =  n.getLeadingFunction().getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingFunction().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingFunction().getLastChild();	  Node    left    =    n.getLeadingFunction();    	non-compiled	[CE]  	63	None	replace
91	[BUG]  [BUGGY]  Node  left  =  n.getLeadingFunction().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingFunction().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingFunction().getNext();	  Node    left    =    n.getLeadingFunction();    	non-compiled	[CE]  	63	None	replace
92	[BUG]  [BUGGY]  Node  left  =  n.getLeadingFunction().getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingFunction().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingFunction().getFirstChild();	  Node    left    =    n.getLeadingFunction();    	non-compiled	[CE]  	63	None	replace
93	[BUG]  [BUGGY]  Node  left  =  n.getUpperCase()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getUpperCase()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getUpperCase()  +  1;	  Node    left    =    n.getLowerCase()    +    1;    	non-compiled	[CE]  	52	None	replace
94	[BUG]  [BUGGY]  Node  left  =  rightParent.getLeadingChild().getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getLeadingChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLeadingChild().getLastChild();	  Node    left    =    n.getLeadingChild().getLastChild();    	non-compiled	[CE]  	49	None	replace
95	[BUG]  [BUGGY]  Node  right  =  n.getLeadingChild().getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getLeadingChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getLeadingChild().getLastChild();	  Node    left    =    n.getLeadingChild().getFirstChild();    	non-compiled	[CE]  	48	None	replace
96	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().getNextSibling();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingChild().getNextSibling();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().getNextSibling();	  Node    left    =    n.getLeadingChild().getFirstChild();    	non-compiled	[CE]  	48	None	replace
97	[BUG]  [BUGGY]  Node  leftParent  =  parent.getLeftChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getLeftChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getLeftChild();	  Node    leftParent    =    n.getLeftChild();    	non-compiled	[CE]  	30	None	replace
98	[BUG]  [BUGGY]  Node  leftParent  =  n.getLowerChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLowerChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLowerChild();	  Node    leftParent    =    n.getLeftChild();    	non-compiled	[CE]  	30	None	replace
99	[BUG]  [BUGGY]  Node  right  =  leftParent.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  leftParent.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  leftParent.removeFirstChild();	  Node    right    =    n.removeFirstChild();    	non-compiled	[CE]  	59	None	replace
100	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    n.removeFirstChild();    	non-compiled	[CE]  	59	None	replace
101	[BUG]  [BUGGY]  Node  right  =  n.removeLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.removeLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.removeLastChild();	  Node    right    =    n.removeFirstChild();    	non-compiled	[CE]  	59	None	replace
102	[BUG]  [BUGGY]  Node  right  =  node.removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  node.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  node.removeFirstChild();	  Node    right    =    n.removeFirstChild();    	non-compiled	[CE]  	59	None	replace
103	[BUG]  [BUGGY]  Node  left  =  rightParent.removeLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.removeLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.removeLastChild();	  Node    left    =    n.removeLastChild();    	non-compiled	[CE]  	20	None	replace
104	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getFirstChild();	  Node    leftParent    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	43	None	replace
105	[BUG]  [BUGGY]  Node  leftParent  =  parent.getFirstChild().getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.getFirstChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getFirstChild().getLastChild();	  Node    leftParent    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	43	None	replace
106	[BUG]  [BUGGY]  Node  leftParent  =  right.getFirstChild().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  right.getFirstChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  right.getFirstChild().getLastChild();	  Node    leftParent    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	43	None	replace
107	[BUG]  [BUGGY]  Node  right  =  n.getLastChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getLastChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getLastChild().getNext();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
108	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().getLastChild();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
109	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild().getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().getParent();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
110	[BUG]  [BUGGY]  Node  right  =  leftParent.getFirstChild().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  leftParent.getFirstChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  leftParent.getFirstChild().getNext();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
111	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getNext()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().getNext()  +  1;	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
112	[BUG]  [BUGGY]  Node  left  =  parent.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.removeFirstChild();	  Node    left    =    rightParent.removeFirstChild();    	non-compiled	[CE]  	19	None	replace
113	[BUG]  [BUGGY]  Node  left  =  n.getLeadingCase()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingCase()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingCase()  +  1;	  Node    left    =    n.getLeadingCase();    	non-compiled	[CE]  	51	None	replace
114	[BUG]  [BUGGY]  Node  left  =  n.getLeadingCase()  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingCase()  -  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingCase()  -  1;	  Node    left    =    n.getLeadingCase();    	non-compiled	[CE]  	51	None	replace
115	[BUG]  [BUGGY]  Node  left  =  rightParent.getLeadingCase();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getLeadingCase();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLeadingCase();	  Node    left    =    n.getLeadingCase();    	non-compiled	[CE]  	51	None	replace
116	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLastChild().cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().cloneTree();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
117	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().cloneNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().cloneNode();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().cloneNode();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
118	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().parent.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().parent.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().parent.cloneTree();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
119	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().clonePath();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().clonePath();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().clonePath();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
120	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().cloneOperator();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().cloneOperator();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().cloneOperator();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
121	[BUG]  [BUGGY]  Node  left  =  n.getNext().cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getNext().cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getNext().cloneTree();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
122	[BUG]  [BUGGY]  Node  leftParent  =  parent.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  parent.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.removeFirstChild();	  Node    leftParent    =    n.removeFirstChild();    	non-compiled	[CE]  	56	None	replace
123	[BUG]  [BUGGY]  Node  leftParent  =  right.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  right.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  right.removeFirstChild();	  Node    leftParent    =    n.removeFirstChild();    	non-compiled	[CE]  	56	None	replace
124	[BUG]  [BUGGY]  Node  leftParent  =  node.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  node.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  node.removeFirstChild();	  Node    leftParent    =    n.removeFirstChild();    	non-compiled	[CE]  	56	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.AND);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.AND);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.AND);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
131	[BUG]  [BUGGY]  Node  left  =  parent.getLeadingChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getLeadingChild();	  Node    left    =    rightParent.getLeadingChild();    	non-compiled	[CE]  	18	None	replace
132	[BUG]  [BUGGY]  Node  left  =  nParent.getLeadingChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  nParent.getLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  nParent.getLeadingChild();	  Node    left    =    rightParent.getLeadingChild();    	non-compiled	[CE]  	18	None	replace
133	[BUG]  [BUGGY]  Node  left  =  node.getLeadingChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getLeadingChild();	  Node    left    =    rightParent.getLeadingChild();    	non-compiled	[CE]  	18	None	replace
134	[BUG]  [BUGGY]  Node  left  =  n.removeLastChild()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.removeLastChild()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.removeLastChild()  +  1;	  Node    left    =    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	58	None	replace
135	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  1);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(n.getFirstChild(),  1);	  Node    left    =    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	58	None	replace
136	[BUG]  [BUGGY]  Node  left  =  rightParent.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  	22	None	replace
137	[BUG]  [BUGGY]  Node  left  =  parent.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  	22	None	replace
138	[BUG]  [BUGGY]  Node  left  =  rightParent.getPrevious();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getPrevious();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getPrevious();	  Node    left    =    n.getPrevious();    	non-compiled	[CE]  	24	None	replace
139	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().firstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild().firstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().firstChild();	  Node    left    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	54	None	replace
140	[BUG]  [BUGGY]  Node  leftParent  =  n.getConditionalParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getConditionalParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getConditionalParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
144	[BUG]  [BUGGY]  Node  leftParent  =  n.removeLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.removeLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.removeLastChild();	  Node    leftParent    =    n.removeFirstChild();    	non-compiled	[CE]  	56	None	replace
145	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeadingChild().parent;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLeadingChild().parent;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeadingChild().parent;	  Node    leftParent    =    n.getLeadingChild();    	non-compiled	[CE]  	47	None	replace
146	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeadingChild().getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLeadingChild().getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeadingChild().getParent();	  Node    leftParent    =    n.getLeadingChild();    	non-compiled	[CE]  	47	None	replace
147	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getPrevious();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().getPrevious();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getPrevious();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
148	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getConditionalParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().getConditionalParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getConditionalParent();	  Node    leftParent    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	42	None	replace
149	[BUG]  [BUGGY]  Node  left  =  n.replaceFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirstChild();	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
150	[BUG]  [BUGGY]  Node  left  =  n.replaceFirstChild(n.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirstChild(n.getFirstChild());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirstChild(n.getFirstChild());	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
151	[BUG]  [BUGGY]  Node  left  =  n.replaceChild(node,  newRoot);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceChild(node,  newRoot);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceChild(node,  newRoot);	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
152	[BUG]  [BUGGY]  Node  left  =  n.getlastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getlastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getlastChild();	  Node    left    =    rightParent.getLastChild();    	non-compiled	[CE]  	1	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  null);	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
154	[BUG]  [BUGGY]  Node  left  =  n.getLowerChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLowerChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLowerChild();	  Node    left    =    n.getOwnerChild();    	non-compiled	[CE]  	62	None	replace
155	[BUG]  [BUGGY]  Node  left  =  n.getOwnerChild().getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerChild().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerChild().getFirstChild();	  Node    left    =    n.getOwnerChild();    	non-compiled	[CE]  	62	None	replace
156	[BUG]  [BUGGY]  Node  left  =  n.getOwnerChild().getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerChild().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerChild().getLastChild();	  Node    left    =    n.getOwnerChild();    	non-compiled	[CE]  	62	None	replace
157	[BUG]  [BUGGY]  Node  left  =  n.getfirstChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getfirstChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getfirstChild().getNext();	  Node    left    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	40	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getFirstChild()  ==  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND  &&  n.getFirstChild()  ==  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
161	[BUG]  [BUGGY]  Node  left  =  parent.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  parent.getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getNext();	  Node    left    =    rightParent.getNext();    	non-compiled	[CE]  	23	None	replace
162	[BUG]  [BUGGY]  Node  left  =  node.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  node.getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getNext();	  Node    left    =    rightParent.getNext();    	non-compiled	[CE]  	23	None	replace
163	[BUG]  [BUGGY]  Node  left  =  n.getLeadingCase(n.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingCase(n.getLastChild());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingCase(n.getLastChild());	  Node    left    =    n.getLeadingCase();    	non-compiled	[CE]  	51	None	replace
164	[BUG]  [BUGGY]  Node  left  =  n.getLeadingCase(n.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingCase(n.getFirstChild());  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingCase(n.getFirstChild());	  Node    left    =    n.getLeadingCase();    	non-compiled	[CE]  	51	None	replace
165	[BUG]  [BUGGY]  Node  left  =  n.replaceFirstChild(right,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirstChild(right,  falseNode);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirstChild(right,  falseNode);	  Node    left    =    rightParent.removeFirstChild();    	non-compiled	[CE]  	19	None	replace
166	[BUG]  [BUGGY]  Node  leftParent  =  n.getfirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getfirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getfirstChild();	  Node    leftParent    =    right.getFirstChild();    	non-compiled	[CE]  	31	None	replace
167	[BUG]  [BUGGY]  Node  leftParent  =  n.getNextChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getNextChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getNextChild();	  Node    leftParent    =    n.getPreviousChild();    	non-compiled	[CE]  	46	None	replace
168	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase().getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase().getLastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase().getLastChild();	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
169	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase().getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase().getFirstChild();	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
170	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase().getNext();	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
171	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneParent();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().cloneParent();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
172	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().clonePosition();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().clonePosition();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().clonePosition();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
173	[BUG]  [BUGGY]  Node  left  =  rightParent.getFirstChild().getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  rightParent.getFirstChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getFirstChild().getNext();	  Node    left    =    n.getLastChild().getNext();    	non-compiled	[CE]  	37	None	replace
174	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.getFirstChild().getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getFirstChild().getNext();	  Node    left    =    n.getLastChild().getNext();    	non-compiled	[CE]  	37	None	replace
175	[BUG]  [BUGGY]  Node  rightParent  =  n.getPreviousChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getPreviousChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getPreviousChild();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
176	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getPrevious();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild().getPrevious();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().getPrevious();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
177	[BUG]  [BUGGY]  Node  left  =  n.cloneChildren();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.cloneChildren();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.cloneChildren();	  Node    left    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
178	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild().getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getFirstChild().getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getFirstChild().getFirstChild();	  Node    leftParent    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	43	None	replace
179	[BUG]  [BUGGY]  Node  right  =  n.getlastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getlastChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getlastChild();	  Node    right    =    leftParent.getLastChild();    	non-compiled	[CE]  	9	None	replace
180	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild()  *  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getFirstChild()  *  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild()  *  1;	  Node    left    =    n.getLastChild()    +    1;    	non-compiled	[CE]  	32	None	replace
181	[BUG]  [BUGGY]  Node  left  =  n.getLestChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLestChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLestChild();	  Node    left    =    n.getLastChild()    +    1;    	non-compiled	[CE]  	32	None	replace
182	[BUG]  [BUGGY]  Node  left  =  right.getLeadingChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.getLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getLeadingChild();	  Node    left    =    rightParent.getLeadingChild();    	non-compiled	[CE]  	18	None	replace
183	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeadingFunction();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLeadingFunction();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeadingFunction();	  Node    leftParent    =    n.getLowerCase();    	non-compiled	[CE]  	28	None	replace
184	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().removeFirstChild();	  Node    leftParent    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	43	None	replace
185	[BUG]  [BUGGY]  Node  left  =  n,  parent.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n,  parent.getFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n,  parent.getFirstChild();	  Node    left    =    nParent.getFirstChild();    	non-compiled	[CE]  	15	None	replace
186	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingChild().cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().cloneTree();	  Node    left    =    n.getLeadingChild().getLastChild();    	non-compiled	[CE]  	49	None	replace
187	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild().removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().removeFirstChild();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
188	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild().cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().cloneTree();	  Node    right    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	41	None	replace
189	[BUG]  [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.removeFirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
190	[BUG]  [BUGGY]  Node  right  =  n.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.cloneTree();	  Node    right    =    n.removeFirstChild();    	non-compiled	[CE]  	59	None	replace
191	[BUG]  [BUGGY]  Node  right  =  n.getNextSibling();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getNextSibling();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getNextSibling();	  Node    right    =    n.removeFirstChild();    	non-compiled	[CE]  	59	None	replace
192	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild().cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  n.getFirstChild().cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getFirstChild().cloneTree();	  Node    rightParent    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
193	[BUG]  [BUGGY]  Node  left  =  n.getOwnerSibling();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerSibling();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerSibling();	  Node    left    =    n.getOwner();    	non-compiled	[CE]  	64	None	replace
194	[BUG]  [BUGGY]  Node  left  =  n.addFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.addFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.addFirstChild();	  Node    left    =    rightParent.removeFirstChild();    	non-compiled	[CE]  	19	None	replace
195	[BUG]  [BUGGY]  Node  left  =  n.removeLeadingChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.removeLeadingChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.removeLeadingChild();	  Node    left    =    n.getLeadingChild()    +    1;    	non-compiled	[CE]  	65	None	replace
196	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.BLOCK;	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
197	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.AND;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.AND;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.AND;	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
198	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.THIS;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.THIS;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.THIS;	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
199	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase()  ||  n.getFirstChild().getType()  ==  Token.NAME;	  Node    left    =    n.getOwnerCase();    	non-compiled	[CE]  	34	None	replace
200	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneOp();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneOp();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().cloneOp();	  Node    leftParent    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	55	None	replace
201	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  right  =  n.getFirstChild()  +  1;  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild()  +  1;	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
202	[BUG]  [BUGGY]  Node  rightParent  =  parent.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  rightParent  =  parent.getParent();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  parent.getParent();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
203	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getNext();	  Node    left    =    rightParent.getNext();    	non-compiled	[CE]  	23	None	replace
204	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  newRoot);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  newRoot);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(n.getFirstChild(),  newRoot);	  Node    left    =    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	58	None	replace
205	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  trueNode);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(n.getFirstChild(),  trueNode);	  Node    left    =    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	58	None	replace
206	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(n.getFirstChild(),  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(n.getFirstChild(),  n);	  Node    left    =    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	58	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n  ||  n.getFirstChild()  ==  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  n  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getFirstChild()    ==    n);    	non-compiled	[CE]  	60	None	replace
208	[BUG]  [BUGGY]  Node  leftParent  =  n.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.cloneTree();	  Node    leftParent    =    n.removeFirstChild();    	non-compiled	[CE]  	56	None	replace
209	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeadingChildren();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  leftParent  =  n.getLeadingChildren();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeadingChildren();	  Node    leftParent    =    n.getLeadingChild();    	non-compiled	[CE]  	47	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.AND);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.AND);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.AND);	  Preconditions.checkState(n.getType()    ==    Token.AND);    	non-compiled	[CE]  	8	None	replace
211	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(node,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(node,  trueNode);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(node,  trueNode);	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
212	[BUG]  [BUGGY]  Node  left  =  n.replaceFirst(node,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.replaceFirst(node,  false);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.replaceFirst(node,  false);	  Node    left    =    node.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
213	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  right.removeFirstChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.removeFirstChild();	  Node    left    =    n.removeLastChild();    	non-compiled	[CE]  	20	None	replace
214	[BUG]  [BUGGY]  Node  left  =  n.getLeadingCondition();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getLeadingCondition();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingCondition();	  Node    left    =    n.getLeadingCase();    	non-compiled	[CE]  	51	None	replace
215	[BUG]  [BUGGY]  Node  left  =  n.getNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getNode();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getNode();	  Node    left    =    rightParent.getLowerCase();    	non-compiled	[CE]  	35	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	61	None	replace
218	[BUG]  [BUGGY]  Node  left  =  n.parent.cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.parent.cloneTree();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.parent.cloneTree();	  Node    left    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
219	[BUG]  [BUGGY]  Node  left  =  n.getpreviousChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {      [BUGGY]  Node  left  =  n.getpreviousChild();  [BUGGY]      Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getpreviousChild();	  Node    left    =    rightParent.getPreviousChild();    	non-compiled	[CE]  	36	None	replace
