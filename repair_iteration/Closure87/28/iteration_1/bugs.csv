bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
2	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getLastChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
3	[BUG]  [BUGGY]  Node  left  =  rightParent.getFirstChild();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  rightParent.getFirstChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getFirstChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
4	[BUG]  [BUGGY]  Node  left  =  n.getLeftChild();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getLeftChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeftChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
5	[BUG]  [BUGGY]  Node  left  =  n.getLowerCase();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getLowerCase();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLowerCase();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
6	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  [FE]              AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getNext();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getNext();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]    [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	  	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
8	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  leftParent  =  n.getFirstChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
9	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getNext();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
10	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.removeFirstChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
11	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getLeadingChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
12	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild()  +  1;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getFirstChild()  +  1;  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild()  +  1;	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
13	[BUG]  [BUGGY]  Node  left  =  n.getPreviousChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  [BUGGY]  Node  left  =  n.getPreviousChild();  [BUGGY]  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getPreviousChild();	Node  left  =  n.getFirstChild();  	non-compiled	[CE]  	55	None	replace
