bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  left  =  rightParent.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  Node  leftParent  =  n.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getParent();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getParent();	      	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  Node  rightParent  =  n.getParent();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  rightParent  =  n.getParent();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getParent();	      	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  rightParent  =  n.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.AND);  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.AND);	      	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  Node  right  =  leftParent.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  leftParent.getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  leftParent.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  Node  right  =  leftParent.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  leftParent.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  leftParent.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  Node  right  =  parent.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  parent.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  parent.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  Node  left  =  rightParent.getLeftChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.getLeftChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLeftChild();	  Node    left    =    n.getLeftChild();    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  Node  left  =  nParent.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  nParent.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  nParent.getFirstChild();	  Node    left    =    rightParent.getFirstChild();    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  Node  left  =  parent.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  parent.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  parent.getFirstChild();	  Node    left    =    rightParent.getFirstChild();    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  node.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.getFirstChild();	  Node    left    =    rightParent.getFirstChild();    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  Node  left  =  rightParent.getLeadingChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.getLeadingChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLeadingChild();	  Node    left    =    n.getLeadingChild();    	non-compiled	[CE]  	11	None	replace
19	[BUG]  [BUGGY]  Node  left  =  rightParent.removeFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.removeFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.removeFirstChild();	  Node    left    =    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  Node  left  =  n.removeLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.removeLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.removeLastChild();	  Node    left    =    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  Node  left  =  node.removeFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  node.removeFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  node.removeFirstChild();	  Node    left    =    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  Node  left  =  n.getParent();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getParent();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getParent();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  Node  left  =  rightParent.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.getNext();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  Node  left  =  n.getPrevious();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getPrevious();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getPrevious();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  Node  left  =  n.getNextSibling();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getNextSibling();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getNextSibling();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  Node  leftParent  =  n.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLastChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  Node  rightParent  =  n.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  rightParent  =  n.getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  rightParent  =  n.getLastChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  Node  leftParent  =  n.getLowerCase();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getLowerCase();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLowerCase();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  Node  leftParent  =  parent.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  parent.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  parent.getFirstChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeftChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getLeftChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeftChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  Node  leftParent  =  right.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  right.getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  right.getFirstChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  Node  left  =  n.getLastChild()  +  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLastChild()  +  1;  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild()  +  1;	  Node    left    =    n.getFirstChild()    +    1;    	non-compiled	[CE]  	12	None	replace
33	[BUG]  [BUGGY]  Node  left  =  n.getfirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getfirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getfirstChild();	  Node    left    =    n.getFirstChild()    +    1;    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  Node  left  =  n.getOwnerCase();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getOwnerCase();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerCase();	  Node    left    =    n.getLowerCase();    	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  Node  left  =  rightParent.getLowerCase();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.getLowerCase();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getLowerCase();	  Node    left    =    n.getLowerCase();    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  Node  left  =  rightParent.getPreviousChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  rightParent.getPreviousChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  rightParent.getPreviousChild();	  Node    left    =    n.getPreviousChild();    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().getNext();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLastChild().getNext();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLastChild().getNext();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getFirstChild().getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getLastChild();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getFirstChild().getParent();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getParent();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext()  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getFirstChild().getNext()  +  1;  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getNext()  +  1;	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getFirstChild().getNext();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getNext();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getFirstChild().getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().getLastChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getPrevious();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getFirstChild().getPrevious();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().getPrevious();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  Node  left  =  n.getNextChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getNextChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getNextChild();	  Node    left    =    n.getPreviousChild();    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  Node  leftParent  =  n.getPreviousChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getPreviousChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getPreviousChild();	  Node    left    =    n.getPreviousChild();    	non-compiled	[CE]  	13	None	replace
47	[BUG]  [BUGGY]  Node  leftParent  =  n.getLeadingChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getLeadingChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getLeadingChild();	  Node    left    =    n.getLeadingChild();    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLeadingChild().getFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().getFirstChild();	  Node    left    =    n.getLeadingChild();    	non-compiled	[CE]  	11	None	replace
49	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLeadingChild().getLastChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().getLastChild();	  Node    left    =    n.getLeadingChild();    	non-compiled	[CE]  	11	None	replace
50	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild().getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLeadingChild().getNext();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild().getNext();	  Node    left    =    n.getLeadingChild();    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  Node  left  =  n.getLeadingCase();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLeadingCase();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingCase();	  Node    left    =    n.getLowerCase();    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  Node  left  =  n.getLowerCase()  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLowerCase()  +  1;  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLowerCase()  +  1;	  Node    left    =    n.getLowerCase();    	non-compiled	[CE]  	5	None	replace
53	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getFirstChild().removeFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().removeFirstChild();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().cloneTree();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getFirstChild().cloneTree();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getFirstChild().cloneTree();	  Node    left    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneTree();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.getFirstChild().cloneTree();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.getFirstChild().cloneTree();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  Node  leftParent  =  n.removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  leftParent  =  n.removeFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  leftParent  =  n.removeFirstChild();	  Node    leftParent    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  Node  left  =  n.cloneTree();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.cloneTree();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.cloneTree();	  Node    left    =    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild()  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.removeFirstChild()  +  1;  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.removeFirstChild()  +  1;	  Node    left    =    n.removeFirstChild();    	non-compiled	[CE]  	10	None	replace
59	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getFirstChild()  ==  n);	      	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  Node  left  =  n.getOwnerChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getOwnerChild();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwnerChild();	  Node    left    =    n.getLeftChild();    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  Node  left  =  n.getLeadingFunction();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLeadingFunction();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingFunction();	  Node    left    =    n.getLowerCase();    	non-compiled	[CE]  	5	None	replace
64	[BUG]  [BUGGY]  Node  left  =  n.getOwner();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getOwner();  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getOwner();	  Node    left    =    n.getNext();    	non-compiled	[CE]  	6	None	replace
65	[BUG]  [BUGGY]  Node  left  =  n.getLeadingChild()  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {    [BUGGY]  Node  left  =  n.getLeadingChild()  +  1;  [BUGGY]    Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	713	713	1	replace	Node  left  =  n.getLeadingChild()  +  1;	  Node    left    =    n.getLeadingChild();    	non-compiled	[CE]  	11	None	replace
