bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n  ==  null?  null  :  n.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n  ==  null?  null  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n  ==  null?  null  :  n.getLastChild();	  return    n    ==    null?    null    :    n.getFirstChild();    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getLastChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getLastChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  return  n.getType()!=  Token.CALL?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()!=  Token.CALL?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()!=  Token.CALL?  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getLastChild()  :  n.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getLastChild()  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  n.getLastChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.BLOCK?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.BLOCK?  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getString()  :  n.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getString()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  n.getString()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  return  n.getType()!=  Token.BLOCK;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()!=  Token.BLOCK;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()!=  Token.BLOCK;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  return  n.cloneBlock();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.cloneBlock();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.cloneBlock();	  return    n.cloneTree();    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  return  n.clone();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.clone();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.clone();	  return    n.cloneTree();    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  return  n.getParent();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getParent();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getParent();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  return  n.getExpression();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getExpression();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getExpression();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.EXPR_RESULT;	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild().getLastChild();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  return  n.getFirstChild().getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild().getParent();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild().getParent();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild().getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild().getLastChild().getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild().getLastChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	13	None	replace
22	[BUG]  [BUGGY]  return  n.getFirstChild().getString();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild().getString();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild().getString();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	13	None	replace
23	[BUG]  [BUGGY]  return  n.getLastChild()  +  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getLastChild()  +  1;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getLastChild()  +  1;	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  return  getBlockExpression(n.getFirstChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  getBlockExpression(n.getFirstChild());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  getBlockExpression(n.getFirstChild());	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  return  getBlockExpression(n.getLastChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  getBlockExpression(n.getLastChild());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  getBlockExpression(n.getLastChild());	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  null  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getNext();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  null  :  n.getNext();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  return  n.getType()!=  Token.CALL?  null  :  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()!=  Token.CALL?  null  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()!=  Token.CALL?  null  :  n.getFirstChild();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getString();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getString();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  null  :  n.getString();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getChildCount();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  null  :  n.getChildCount();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  null  :  n.getChildCount();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
31	[BUG]  [BUGGY]  return  n.removeLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.removeLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.removeLastChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(isFoldableExpressBlock(n));	      	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	      	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	      	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  return  n.getFirstChild().getExpression();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild().getExpression();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild().getExpression();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
42	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getLastChild().getString().endsWith( "__ "));	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(!isFoldableExpressBlock(n));	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(!NodeUtil.isExpressionNode(n));	      	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  n.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.CALL?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  NodeUtil.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  NodeUtil.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  NodeUtil.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
47	[BUG]  [BUGGY]  return  n!=  null?  null  :  n.getType()  ==  Token.BLOCK;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n!=  null?  null  :  n.getType()  ==  Token.BLOCK;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n!=  null?  null  :  n.getType()  ==  Token.BLOCK;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null;	  return    n.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  return  n.getType()!=  Token.CALL?  null  :  n.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()!=  Token.CALL?  null  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()!=  Token.CALL?  null  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.removeFirstChild()  :  n.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.removeFirstChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  n.removeFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.CALL?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
51	[BUG]  [BUGGY]  return  n!=  null?  this  :  n.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n!=  null?  this  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n!=  null?  this  :  n.getLastChild();	  return    n!=    null?    null    :    n.getLastChild();    	non-compiled	[CE]  	10	None	replace
52	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  null;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  n.getFirstChild()  :  null;	  return    n.getType()    ==    Token.CALL?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  return  n  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK;	  return    n    ==    null?    null    :    n.getFirstChild();    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.GETPROP;	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  this  :  n.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n.getType()  ==  Token.CALL?  this  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n.getType()  ==  Token.CALL?  this  :  n.getFirstChild();	  return    n.getType()    ==    Token.CALL?    null    :    n.getFirstChild();    	non-compiled	[CE]  	4	None	replace
56	[BUG]  [BUGGY]  return  n!=  null?  null  :  n.getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return  n!=  null?  null  :  n.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return  n!=  null?  null  :  n.getNext();	  return    n!=    null?    null    :    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  return(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  return(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  return(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  return(n.getFirstChild()  ==  n)?  null  :  n.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return(n.getFirstChild()  ==  n)?  null  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return(n.getFirstChild()  ==  n)?  null  :  n.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  return(n.getFirstChild()  ==  null)?  null  :  n.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  return(n.getFirstChild()  ==  null)?  null  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	return(n.getFirstChild()  ==  null)?  null  :  n.getFirstChild();	  return    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	7	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);	      	non-compiled	[CE]  	7	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {  Preconditions.checkState(isFoldableExpressBlock(n));    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	545	545	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	7	None	replace
