bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  right);	  leftParent    =    tryMinimizeCondition(left,    parent);    	non-compiled	[CE]  	47	None	replace
2	[BUG]  [BUGGY]  LeftParent  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  LeftParent  =  tryMinimizeCondition(left,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	LeftParent  =  tryMinimizeCondition(left,  right);	  leftParent    =    tryMinimizeCondition(left,    parent);    	non-compiled	[CE]  	47	None	replace
3	[BUG]  [BUGGY]  leftParent  =  tryMaximizeCondition(left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMaximizeCondition(left,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMaximizeCondition(left,  right);	  leftParent    =    tryMinimizeCondition(left,    parent);    	non-compiled	[CE]  	47	None	replace
4	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  rightParent  =  tryMinimizeCondition(left,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	rightParent  =  tryMinimizeCondition(left,  right);	  leftParent    =    tryMinimizeCondition(left,    parent);    	non-compiled	[CE]  	47	None	replace
5	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent.getNext());  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent.getNext());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent.getNext());	  left    =    tryMinimizeCondition(left,    right.getNext());    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getNext(),  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getNext(),  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getNext(),  falseNode);	  left    =    tryMinimizeCondition(left,    right.getNext());    	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getParent());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getParent());	  left    =    tryMinimizeCondition(left,    right.getNext());    	non-compiled	[CE]  	33	None	replace
8	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  right  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  right  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  right  +  1);	  left    =    tryMaximizeCondition(left,    right);    	non-compiled	[CE]  	36	None	replace
9	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  right,  falseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  right,  falseNode);	  left    =    tryMaximizeCondition(left,    right);    	non-compiled	[CE]  	36	None	replace
10	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  rightParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  rightParent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  rightParent);	  left    =    tryMaximizeCondition(left,    right);    	non-compiled	[CE]  	36	None	replace
11	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  right  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  right  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  right  -  1);	  left    =    tryMaximizeCondition(left,    right);    	non-compiled	[CE]  	36	None	replace
12	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  right,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  right,  trueNode);	  left    =    tryMaximizeCondition(left,    right);    	non-compiled	[CE]  	36	None	replace
13	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.parent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.parent);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
14	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent.child);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent.child);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent.child);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
15	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.child  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.child  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.child  -  1);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
16	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.next);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.next);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.next);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
17	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.child  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.child  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.child  +  1);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
18	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  trueNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  trueNode);	  leftParent    =    tryMinimizeCondition(left,    falseNode);    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  falseNode,  trueNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  falseNode,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  falseNode,  trueNode);	  leftParent    =    tryMinimizeCondition(left,    falseNode);    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  falseNode);	  leftParent    =    tryMinimizeCondition(left,    falseNode);    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  false);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  false);	  left    =    tryMinimizeCondition(left,    this);    	non-compiled	[CE]  	56	None	replace
22	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(n.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(n.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(n.getLastChild());	  leftParent    =    tryMinimizeCondition(left.getLastChild());    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getLastChild(),  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getLastChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getLastChild(),  right);	  leftParent    =    tryMinimizeCondition(left.getLastChild());    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(n.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(n.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(n.getFirstChild());	  leftParent    =    tryMinimizeCondition(left.getLastChild());    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right.getFirstChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right.getFirstChild());	  leftParent    =    tryMinimizeCondition(left.getLastChild());    	non-compiled	[CE]  	10	None	replace
26	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.getLastChild());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right.getLastChild());	  leftParent    =    tryMinimizeCondition(left.getLastChild());    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  leftParent  =  tryMaximizeCondition(right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMaximizeCondition(right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMaximizeCondition(right);	  leftParent    =    tryMaximizeCondition(left);    	non-compiled	[CE]  	45	None	replace
28	[BUG]  [BUGGY]  leftParent  =  tryMaximizeCondition(left,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMaximizeCondition(left,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMaximizeCondition(left,  trueNode);	  leftParent    =    tryMaximizeCondition(left);    	non-compiled	[CE]  	45	None	replace
29	[BUG]  [BUGGY]  leftParent  =  tryMaximizeCondition(left,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMaximizeCondition(left,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMaximizeCondition(left,  n);	  leftParent    =    tryMaximizeCondition(left);    	non-compiled	[CE]  	45	None	replace
30	[BUG]  [BUGGY]  leftParent  =  tryMaximizeCondition(left,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMaximizeCondition(left,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMaximizeCondition(left,  falseNode);	  leftParent    =    tryMaximizeCondition(left);    	non-compiled	[CE]  	45	None	replace
31	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  newRoot);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  newRoot);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  newRoot);	  leftParent    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	52	None	replace
32	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  newRoot,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  newRoot,  parent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  newRoot,  parent);	  leftParent    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	52	None	replace
33	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  newRoot,  condition);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  newRoot,  condition);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  newRoot,  condition);	  leftParent    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	52	None	replace
34	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  newRoot,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  newRoot,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  newRoot,  right);	  leftParent    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	52	None	replace
35	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent,  falseNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent,  falseNode);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
36	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  falseNode,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  falseNode,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  falseNode,  trueNode);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
37	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  left,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  left,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  left,  falseNode);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
38	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  falseNode,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  falseNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  falseNode,  n);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
39	[BUG]  [BUGGY]  Left  left  =  tryMinimizeCondition(left,  right,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Left  left  =  tryMinimizeCondition(left,  right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Left  left  =  tryMinimizeCondition(left,  right,  trueNode);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
40	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left.getFirstChild());	  left    =    tryMaximizeCondition(left.getLastChild());    	non-compiled	[CE]  	37	None	replace
41	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(n.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(n.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(n.getLastChild());	  left    =    tryMaximizeCondition(left.getLastChild());    	non-compiled	[CE]  	37	None	replace
42	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left.getLastChild(),  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left.getLastChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left.getLastChild(),  right);	  left    =    tryMaximizeCondition(left.getLastChild());    	non-compiled	[CE]  	37	None	replace
43	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(n.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(n.getFirstChild());	  left    =    tryMaximizeCondition(left.getLastChild());    	non-compiled	[CE]  	37	None	replace
44	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  left);	  left    =    tryMinimizeCondition(n,    left);    	non-compiled	[CE]  	12	None	replace
45	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  left);	  left    =    tryMinimizeCondition(n,    left);    	non-compiled	[CE]  	12	None	replace
46	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  left);	  left    =    tryMinimizeCondition(n,    left);    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
48	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getLastChild(),  n);	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
49	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getLastChild(),  trueNode);	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
50	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getLastChild(),  falseNode);	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
51	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  n.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  n.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  n.getLastChild());	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
52	[BUG]  [BUGGY]  Node  leftParent  =  left.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  leftParent  =  left.getNext();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  leftParent  =  left.getNext();	  Node    leftParent    =    left.getParent();    	non-compiled	[CE]  	18	None	replace
53	[BUG]  [BUGGY]  Node  leftParent  =  left.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  leftParent  =  left.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  leftParent  =  left.getLastChild();	  Node    leftParent    =    left.getParent();    	non-compiled	[CE]  	18	None	replace
54	[BUG]  [BUGGY]  Node  leftParent  =  left.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  leftParent  =  left.getFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  leftParent  =  left.getFirstChild();	  Node    leftParent    =    left.getParent();    	non-compiled	[CE]  	18	None	replace
55	[BUG]  [BUGGY]  Node  leftParent  =  left.removeFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  leftParent  =  left.removeFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  leftParent  =  left.removeFirstChild();	  Node    leftParent    =    left.getParent();    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  Node  leftParent  =  left.cloneTree();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  leftParent  =  left.cloneTree();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  leftParent  =  left.cloneTree();	  Node    leftParent    =    left.getParent();    	non-compiled	[CE]  	18	None	replace
57	[BUG]  [BUGGY]  Node  leftParent  =  right.getParent();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  leftParent  =  right.getParent();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  leftParent  =  right.getParent();	  Node    leftParent    =    left.getParent();    	non-compiled	[CE]  	18	None	replace
58	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent,  trueNode);	  left    =    tryMinimizeCondition(left,    falseNode,    trueNode);    	non-compiled	[CE]  	40	None	replace
59	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode,  rightParent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode,  rightParent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  falseNode,  rightParent);	  left    =    tryMinimizeCondition(left,    falseNode,    trueNode);    	non-compiled	[CE]  	40	None	replace
60	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  falseNode,  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  falseNode,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  falseNode,  trueNode);	  left    =    tryMinimizeCondition(left,    falseNode,    trueNode);    	non-compiled	[CE]  	40	None	replace
61	[BUG]  [BUGGY]  Node  rightVal  =  left.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.getLastChild();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
62	[BUG]  [BUGGY]  Node  rightVal  =  left.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.getFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.getFirstChild();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
63	[BUG]  [BUGGY]  Node  rightVal  =  left.getParent();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.getParent();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.getParent();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
64	[BUG]  [BUGGY]  Node  rightVal  =  left.getString();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.getString();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.getString();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
65	[BUG]  [BUGGY]  Node  rightVal  =  left.getNext()  -  1;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.getNext()  -  1;  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.getNext()  -  1;	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
66	[BUG]  [BUGGY]  Node  rightVal  =  left.getPrevious();  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.getPrevious();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.getPrevious();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
67	[BUG]  [BUGGY]  Node  rightParent  =  left.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.getLastChild();	  Node    rightParent    =    left.getNext();    	non-compiled	[CE]  	16	None	replace
68	[BUG]  [BUGGY]  Node  rightParent  =  left.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.getString();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.getString();	  Node    rightParent    =    left.getNext();    	non-compiled	[CE]  	16	None	replace
69	[BUG]  [BUGGY]  Node  rightParent  =  left.getPrevious();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.getPrevious();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.getPrevious();	  Node    rightParent    =    left.getNext();    	non-compiled	[CE]  	16	None	replace
70	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext()  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext()  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext()  -  1);	  left    =    tryMinimizeCondition(left.getNext()    +    1);    	non-compiled	[CE]  	61	None	replace
71	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getParent()  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getParent()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getParent()  +  1);	  left    =    tryMinimizeCondition(left.getNext()    +    1);    	non-compiled	[CE]  	61	None	replace
72	[BUG]  [BUGGY]  Left  =  tryMinimizeCondition(left.getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Left  =  tryMinimizeCondition(left.getNext());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Left  =  tryMinimizeCondition(left.getNext());	  left    =    tryMinimizeCondition(left.getNext()    +    1);    	non-compiled	[CE]  	61	None	replace
73	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  newRoot);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  newRoot);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  newRoot);	  left    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	51	None	replace
74	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(leftParent,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(leftParent,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(leftParent,  trueNode);	  left    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	41	None	replace
75	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  trueNode,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  trueNode,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  trueNode,  falseNode);	  left    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	41	None	replace
76	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  leftParent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  leftParent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  leftParent);	  left    =    tryMinimizeCondition(left,    rightParent);    	non-compiled	[CE]  	2	None	replace
77	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightVal);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightVal);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightVal);	  left    =    tryMinimizeCondition(left,    rightParent);    	non-compiled	[CE]  	2	None	replace
78	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(n,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(n,  right);	  left    =    tryMinimizeCondition(right,    right);    	non-compiled	[CE]  	11	None	replace
79	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  right  =  tryMinimizeCondition(left,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	right  =  tryMinimizeCondition(left,  right);	  left    =    tryMinimizeCondition(right,    right);    	non-compiled	[CE]  	11	None	replace
80	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	17	None	replace
81	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  n.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	17	None	replace
82	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  n.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	17	None	replace
83	[BUG]  [BUGGY]  Node  right  =  leftParent.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  leftParent.getFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  leftParent.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	17	None	replace
84	[BUG]  [BUGGY]  Node  right  =  left.getString();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  left.getString();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  left.getString();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	17	None	replace
85	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  falseNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  falseNode);	  left    =    tryMinimizeCondition(left.getNext(),    trueNode);    	non-compiled	[CE]  	35	None	replace
86	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  trueNode,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  trueNode,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  trueNode,  falseNode);	  left    =    tryMinimizeCondition(left.getNext(),    trueNode);    	non-compiled	[CE]  	35	None	replace
87	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild(),  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild(),  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getLastChild(),  trueNode);	  left    =    tryMinimizeCondition(left.getNext(),    trueNode);    	non-compiled	[CE]  	35	None	replace
88	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getFirstChild(),  trueNode);	  left    =    tryMinimizeCondition(left.getNext(),    trueNode);    	non-compiled	[CE]  	35	None	replace
89	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  trueNode,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  trueNode,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  trueNode,  right);	  left    =    tryMinimizeCondition(left.getNext(),    trueNode);    	non-compiled	[CE]  	35	None	replace
90	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getString());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getString());	  left    =    tryMinimizeCondition(left.getParent());    	non-compiled	[CE]  	34	None	replace
91	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  left.getParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  left.getParent());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  left.getParent());	  left    =    tryMinimizeCondition(left.getParent());    	non-compiled	[CE]  	34	None	replace
92	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode  +  1);	  left    =    tryMinimizeCondition(left,    falseNode    +    1);    	non-compiled	[CE]  	58	None	replace
93	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent  +  1);	  left    =    tryMinimizeCondition(left,    falseNode    +    1);    	non-compiled	[CE]  	58	None	replace
94	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextNode()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextNode()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.nextNode()  +  1);	  left    =    tryMinimizeCondition(left,    falseNode    +    1);    	non-compiled	[CE]  	58	None	replace
95	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  falseNode  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  falseNode  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  falseNode  +  1);	  left    =    tryMinimizeCondition(left,    falseNode    +    1);    	non-compiled	[CE]  	58	None	replace
96	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right  *  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right  *  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right  *  1);	  left    =    tryMinimizeCondition(left,    falseNode    +    1);    	non-compiled	[CE]  	58	None	replace
97	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right.getLastChild());	  left    =    tryMinimizeCondition(left.getFirstChild());    	non-compiled	[CE]  	21	None	replace
98	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent  -  1);	  left    =    tryMinimizeCondition(left,    right    -    1);    	non-compiled	[CE]  	31	None	replace
99	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.next  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.next  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.next  -  1);	  left    =    tryMinimizeCondition(left,    right    -    1);    	non-compiled	[CE]  	31	None	replace
100	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  trueNode,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  trueNode,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  trueNode,  falseNode);	  leftParent    =    tryMinimizeCondition(left,    trueNode);    	non-compiled	[CE]  	7	None	replace
101	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  trueNode,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  trueNode,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  trueNode,  right);	  leftParent    =    tryMinimizeCondition(left,    trueNode);    	non-compiled	[CE]  	7	None	replace
102	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  trueNode,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  trueNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  trueNode,  n);	  leftParent    =    tryMinimizeCondition(left,    trueNode);    	non-compiled	[CE]  	7	None	replace
103	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right.getLastChild());	  leftParent    =    tryMinimizeCondition(left.getFirstChild());    	non-compiled	[CE]  	48	None	replace
104	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getNext());  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getNext());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getNext());	  leftParent    =    tryMinimizeCondition(left.getFirstChild());    	non-compiled	[CE]  	48	None	replace
105	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getFirstChild(),  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getFirstChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getFirstChild(),  right);	  leftParent    =    tryMinimizeCondition(left.getFirstChild());    	non-compiled	[CE]  	48	None	replace
106	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  right);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
107	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  n.cloneTree());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  n.cloneTree());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  n.cloneTree());	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
108	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  rightParent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  rightParent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  rightParent);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
109	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  newRoot);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  newRoot);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  newRoot);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
110	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  rightVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  rightVal);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  rightVal);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
111	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(leftParent,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(leftParent,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(leftParent,  falseNode);	  left    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	42	None	replace
112	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  n);	  leftParent    =    tryMinimizeCondition(left,    n);    	non-compiled	[CE]  	8	None	replace
113	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(n,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(n,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(n,  left);	  leftParent    =    tryMinimizeCondition(left,    n);    	non-compiled	[CE]  	8	None	replace
114	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  n.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  n.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  n.getFirstChild());	  left    =    tryMinimizeCondition(n.getFirstChild());    	non-compiled	[CE]  	25	None	replace
115	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  falseNode,  trueNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  falseNode,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  falseNode,  trueNode);	  left    =    tryMaximizeCondition(left,    falseNode);    	non-compiled	[CE]  	46	None	replace
116	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(right,  trueNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(right,  trueNode);	  left    =    tryMaximizeCondition(left,    falseNode);    	non-compiled	[CE]  	46	None	replace
117	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent,  n);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
118	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  n,  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  n,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  n,  trueNode);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
119	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(leftParent,  trueNode,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(leftParent,  trueNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(leftParent,  trueNode,  n);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
120	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  right,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  right,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  right,  n);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.AND);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.AND);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.AND);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()!=  Token.BLOCK);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()!=  Token.BLOCK);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.AND);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.AND);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.AND);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.BLOCK);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.BLOCK);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(right.getType()  ==  Token.BLOCK);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.NAME);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
127	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.cloneTree());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  right.cloneTree());	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
128	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
129	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  falseNode);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
130	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  left.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  left.cloneTree());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  left.cloneTree());	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
131	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  trueNode);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
132	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.cloneTree());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right.cloneTree());	  leftParent    =    tryMinimizeCondition(left,    right);    	non-compiled	[CE]  	5	None	replace
133	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right  +  1);	  leftParent    =    tryMinimizeCondition(left,    right);    	non-compiled	[CE]  	5	None	replace
134	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  left);	  leftParent    =    tryMinimizeCondition(left,    right);    	non-compiled	[CE]  	5	None	replace
135	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right,  falseNode);	  leftParent    =    tryMinimizeCondition(left,    right);    	non-compiled	[CE]  	5	None	replace
136	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.parent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right.parent);	  leftParent    =    tryMinimizeCondition(left,    right);    	non-compiled	[CE]  	5	None	replace
137	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right  -  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right  -  1);	  leftParent    =    tryMinimizeCondition(left,    right);    	non-compiled	[CE]  	5	None	replace
138	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  trueNode,  falseNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  trueNode,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  trueNode,  falseNode);	  left    =    tryMaximizeCondition(left,    trueNode);    	non-compiled	[CE]  	39	None	replace
139	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  trueNode,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  trueNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  trueNode,  n);	  left    =    tryMaximizeCondition(left,    trueNode);    	non-compiled	[CE]  	39	None	replace
140	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  trueNode,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  trueNode,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  trueNode,  right);	  left    =    tryMaximizeCondition(left,    trueNode);    	non-compiled	[CE]  	39	None	replace
141	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getLastChild()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getLastChild()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getLastChild()  +  1);	  leftParent    =    tryMinimizeCondition(left    +    1);    	non-compiled	[CE]  	60	None	replace
142	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left  +  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left  +  2);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left  +  2);	  leftParent    =    tryMinimizeCondition(left    +    1);    	non-compiled	[CE]  	60	None	replace
143	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  left  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  left  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  left  +  1);	  leftParent    =    tryMinimizeCondition(left    +    1);    	non-compiled	[CE]  	60	None	replace
144	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left  -  1);	  leftParent    =    tryMinimizeCondition(left    +    1);    	non-compiled	[CE]  	60	None	replace
145	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getFirstChild(),  right);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
146	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n.getLastChild(),  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(n.getLastChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(n.getLastChild(),  right);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n.getLastChild(),  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(n.getLastChild(),  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(n.getLastChild(),  left);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
148	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n.getFirstChild(),  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(n.getFirstChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(n.getFirstChild(),  right);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
149	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild(),  right,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild(),  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getLastChild(),  right,  falseNode);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
150	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getLastChild(),  left);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
151	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  n.getFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  n.getFirstChild();	  Node    rightParent    =    left.getFirstChild();    	non-compiled	[CE]  	19	None	replace
152	[BUG]  [BUGGY]  Node  rightParent  =  left.getType()  ==  Token.NAME?  left.getLastChild()  :  left.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.getType()  ==  Token.NAME?  left.getLastChild()  :  left.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.getType()  ==  Token.NAME?  left.getLastChild()  :  left.getLastChild();	  Node    rightParent    =    left.getFirstChild();    	non-compiled	[CE]  	19	None	replace
153	[BUG]  [BUGGY]  Node  rightParent  =  n.getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  n.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  n.getLastChild();	  Node    rightParent    =    left.getFirstChild();    	non-compiled	[CE]  	19	None	replace
154	[BUG]  [BUGGY]  Node  rightParent  =  left.getType()  ==  Token.AND?  left.getLastChild()  :  left.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.getType()  ==  Token.AND?  left.getLastChild()  :  left.getLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.getType()  ==  Token.AND?  left.getLastChild()  :  left.getLastChild();	  Node    rightParent    =    left.getFirstChild();    	non-compiled	[CE]  	19	None	replace
155	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild(),  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getLastChild(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
156	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getFirstChild(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
157	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getParent(),  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getParent(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getParent(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
158	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n.getNext(),  left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(n.getNext(),  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(n.getNext(),  left);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
159	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getNext(),  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getNext(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getNext(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
160	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getString(),  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getString(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getString(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
161	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  falseNode,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  falseNode,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode,  falseNode,  right);	  left    =    tryMinimizeCondition(left,    trueNode,    falseNode);    	non-compiled	[CE]  	1	None	replace
162	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode,  trueNode);	  left    =    tryMinimizeCondition(left,    trueNode,    falseNode);    	non-compiled	[CE]  	1	None	replace
163	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  falseNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  falseNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode,  falseNode,  n);	  left    =    tryMinimizeCondition(left,    trueNode,    falseNode);    	non-compiled	[CE]  	1	None	replace
164	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  trueNode,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  trueNode,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  trueNode,  falseNode);	  left    =    tryMinimizeCondition(left,    right,    trueNode);    	non-compiled	[CE]  	29	None	replace
165	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  trueNode,  condition);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  trueNode,  condition);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  trueNode,  condition);	  left    =    tryMinimizeCondition(left,    right,    trueNode);    	non-compiled	[CE]  	29	None	replace
166	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  null);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  null);	  left    =    tryMinimizeCondition(left,    right,    trueNode);    	non-compiled	[CE]  	29	None	replace
167	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  trueNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  trueNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  trueNode,  n);	  left    =    tryMinimizeCondition(left,    right,    trueNode);    	non-compiled	[CE]  	29	None	replace
168	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(right,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(right,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(right,  right);	  left    =    tryMaximizeCondition(left,    n);    	non-compiled	[CE]  	38	None	replace
169	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(n,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(n,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(n,  left);	  left    =    tryMaximizeCondition(left,    n);    	non-compiled	[CE]  	38	None	replace
170	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  right,  falseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  right,  falseNode);	  left    =    tryMinimizeCondition(left.getNext(),    right);    	non-compiled	[CE]  	32	None	replace
171	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  right,  trueNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  right,  trueNode);	  left    =    tryMinimizeCondition(left.getNext(),    right);    	non-compiled	[CE]  	32	None	replace
172	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  right  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  right  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  right  +  1);	  left    =    tryMinimizeCondition(left.getNext(),    right);    	non-compiled	[CE]  	32	None	replace
173	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getParent(),  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getParent(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getParent(),  right);	  left    =    tryMinimizeCondition(left.getNext(),    right);    	non-compiled	[CE]  	32	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()!=  Token.FUNCTION);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()!=  Token.FUNCTION);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(right.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.EMPTY);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.EMPTY);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.EMPTY);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EMPTY);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EMPTY);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.EMPTY);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()!=  Token.NAME);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()!=  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  left);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  right);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.NAME);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(right.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.AND);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.AND);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.AND);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
186	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getString());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getString());	  leftParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	6	None	replace
187	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree()  +  1);	  left    =    tryMinimizeCondition(left,    right    +    1);    	non-compiled	[CE]  	28	None	replace
188	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextToken()  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextToken()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.nextToken()  +  1);	  left    =    tryMinimizeCondition(left,    right    +    1);    	non-compiled	[CE]  	28	None	replace
189	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode,  right,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode,  right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  falseNode,  right,  trueNode);	  left    =    tryMinimizeCondition(left,    falseNode,    right);    	non-compiled	[CE]  	59	None	replace
190	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  falseNode,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  falseNode,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  falseNode,  left);	  left    =    tryMinimizeCondition(left,    falseNode,    right);    	non-compiled	[CE]  	59	None	replace
191	[BUG]  [BUGGY]  Node  rightParent  =  left.removeLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.removeLastChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.removeLastChild();	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	53	None	replace
192	[BUG]  [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  n.removeFirstChild();	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	53	None	replace
193	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  left.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  left.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  left.getLastChild());	  left    =    tryMinimizeCondition(left,    right.getFirstChild());    	non-compiled	[CE]  	49	None	replace
194	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  rightParent.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  rightParent.getFirstChild());	  left    =    tryMinimizeCondition(left,    right.getFirstChild());    	non-compiled	[CE]  	49	None	replace
195	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  right.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  right  =  tryMinimizeCondition(left,  right.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	right  =  tryMinimizeCondition(left,  right.getLastChild());	  left    =    tryMinimizeCondition(left,    right.getFirstChild());    	non-compiled	[CE]  	49	None	replace
196	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(n,  left.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(n,  left.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(n,  left.getFirstChild());	  left    =    tryMinimizeCondition(left,    right.getFirstChild());    	non-compiled	[CE]  	49	None	replace
197	[BUG]  [BUGGY]  Node  rightParent  =  n.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  n.getParent();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  n.getParent();	  Node    rightParent    =    left.getParent();    	non-compiled	[CE]  	14	None	replace
198	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  null);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  null);	  left    =    tryMinimizeCondition(left,    null);    	non-compiled	[CE]  	44	None	replace
199	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	15	None	replace
200	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  left.getParent();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	15	None	replace
201	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	15	None	replace
202	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  rightParent;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  left.getNext(),  rightParent;  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  left.getNext(),  rightParent;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	15	None	replace
203	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  right,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode,  right,  falseNode);	  left    =    tryMinimizeCondition(left,    trueNode,    right);    	non-compiled	[CE]  	3	None	replace
204	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  right,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  right,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode,  right,  n);	  left    =    tryMinimizeCondition(left,    trueNode,    right);    	non-compiled	[CE]  	3	None	replace
205	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  rightParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode,  rightParent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode,  rightParent);	  left    =    tryMinimizeCondition(left,    trueNode,    right);    	non-compiled	[CE]  	3	None	replace
206	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  right.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  right.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  right.getLastChild());	  left    =    tryMaximizeCondition(left.getLastChild());    	non-compiled	[CE]  	37	None	replace
207	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  REGEXP_FLAGS_RE);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  REGEXP_FLAGS_RE);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  REGEXP_FLAGS_RE);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
208	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneNode());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneNode());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneNode());	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
209	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getLastChild(),  trueNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getLastChild(),  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getLastChild(),  trueNode);	  leftParent    =    tryMinimizeCondition(left.getLastChild());    	non-compiled	[CE]  	10	None	replace
210	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.child);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.child);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right.child);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
211	[BUG]  [BUGGY]  Left  left  =  tryMinimizeCondition(left,  right,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Left  left  =  tryMinimizeCondition(left,  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Left  left  =  tryMinimizeCondition(left,  right,  falseNode);	  left    =    tryMinimizeCondition(left,    right,    trueNode);    	non-compiled	[CE]  	29	None	replace
212	[BUG]  [BUGGY]  Node  right  =  leftParent.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  leftParent.getNext();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  leftParent.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	15	None	replace
213	[BUG]  [BUGGY]  LeftParent  =  tryMinimizeCondition(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  LeftParent  =  tryMinimizeCondition(left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	LeftParent  =  tryMinimizeCondition(left);	  leftParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	6	None	replace
214	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	17	None	replace
215	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right,  n);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
216	[BUG]  [BUGGY]  LeftParent  =  tryMinimizeCondition(left,  trueNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  LeftParent  =  tryMinimizeCondition(left,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	LeftParent  =  tryMinimizeCondition(left,  trueNode);	  leftParent    =    tryMinimizeCondition(left,    falseNode);    	non-compiled	[CE]  	9	None	replace
217	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  rightParent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  rightParent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  rightParent);	  left    =    tryMinimizeCondition(left.getNext(),    right);    	non-compiled	[CE]  	32	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK,  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK,  left);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.GETPROP);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.GETPROP);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
220	[BUG]  [BUGGY]  LeftParent  leftParent  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  LeftParent  leftParent  =  tryMinimizeCondition(left,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	LeftParent  leftParent  =  tryMinimizeCondition(left,  right);	  leftParent    =    tryMinimizeCondition(left,    n);    	non-compiled	[CE]  	8	None	replace
221	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getFirstChild()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getFirstChild()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getFirstChild()  +  1);	  left    =    tryMinimizeCondition(left,    right    +    1);    	non-compiled	[CE]  	28	None	replace
222	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  falseNode,  n);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
223	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  parent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  parent);	  left    =    tryMinimizeCondition(left,    rightParent);    	non-compiled	[CE]  	2	None	replace
224	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  newRoot,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  newRoot,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  newRoot,  falseNode);	  left    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	51	None	replace
225	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(right,  parent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(right,  parent);	  leftParent    =    tryMinimizeCondition(left,    parent);    	non-compiled	[CE]  	47	None	replace
226	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  left.getNext(),  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  left.getNext(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  left.getNext(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
227	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  newRoot);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext(),  newRoot);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext(),  newRoot);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
228	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right,  trueNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right,  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right,  trueNode);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
229	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(right,  falseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(right,  falseNode);	  left    =    tryMaximizeCondition(left,    falseNode);    	non-compiled	[CE]  	46	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
232	[BUG]  [BUGGY]  Node  rightParent  =  left.replaceChild(left,  newRoot);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.replaceChild(left,  newRoot);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.replaceChild(left,  newRoot);	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	53	None	replace
233	[BUG]  [BUGGY]  Node  rightParent  =  left.replaceChild(left,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.replaceChild(left,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.replaceChild(left,  n);	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	53	None	replace
234	[BUG]  [BUGGY]  Node  rightParent  =  left.replaceChild(left,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.replaceChild(left,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.replaceChild(left,  falseNode);	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	53	None	replace
235	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right  -  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right  -  2);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right  -  2);	  left    =    tryMinimizeCondition(left,    right    -    1);    	non-compiled	[CE]  	31	None	replace
236	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getParent(),  trueNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getParent(),  trueNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getParent(),  trueNode);	  left    =    tryMinimizeCondition(left.getNext(),    trueNode);    	non-compiled	[CE]  	35	None	replace
237	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  right.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  right.cloneTree());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  right.cloneTree());	  left    =    tryMaximizeCondition(left,    right);    	non-compiled	[CE]  	36	None	replace
238	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  right.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  right.getFirstChild());	  left    =    tryMinimizeCondition(left,    right.getFirstChild());    	non-compiled	[CE]  	49	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
240	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext()  /  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getNext()  /  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext()  /  1);	  left    =    tryMinimizeCondition(left.getNext()    +    1);    	non-compiled	[CE]  	61	None	replace
241	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  right.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.getFirstChild(),  right.getLastChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getFirstChild(),  right.getLastChild());	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
242	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  null);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  null);	  leftParent    =    tryMinimizeCondition(left,    trueNode);    	non-compiled	[CE]  	7	None	replace
243	[BUG]  [BUGGY]  Node  rightVal  =  leftParent.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  leftParent.getNext();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  leftParent.getNext();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
244	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.removeFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.removeFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.removeFirstChild());	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
245	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  right.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  right.getFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  right.getFirstChild());	  left    =    tryMinimizeCondition(left,    right.getLastChild());    	non-compiled	[CE]  	23	None	replace
246	[BUG]  [BUGGY]  leftParent  =  tryMaximizeCondition(left  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMaximizeCondition(left  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMaximizeCondition(left  +  1);	  leftParent    =    tryMaximizeCondition(left);    	non-compiled	[CE]  	45	None	replace
247	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextChild(),  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextChild(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.nextChild(),  n);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
248	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.next(),  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.next(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.next(),  n);	  left    =    tryMinimizeCondition(left,    trueNode,    n);    	non-compiled	[CE]  	4	None	replace
249	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.next()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.next()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.next()  +  1);	  left    =    tryMinimizeCondition(left,    right    +    1);    	non-compiled	[CE]  	28	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.CATCH);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.CATCH);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.CATCH);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.THIS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.THIS);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.THIS);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	55	None	replace
252	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree()  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree()  -  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree()  -  1);	  left    =    tryMinimizeCondition(left,    right    -    1);    	non-compiled	[CE]  	31	None	replace
253	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right.getNext(),  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right.getNext(),  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right.getNext(),  n);	  left    =    tryMinimizeCondition(left.getNext(),    n);    	non-compiled	[CE]  	57	None	replace
254	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  this);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  this);	  leftParent    =    tryMinimizeCondition(left,    trueNode);    	non-compiled	[CE]  	7	None	replace
255	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  this);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  this);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  this);	  left    =    tryMinimizeCondition(left,    right,    trueNode);    	non-compiled	[CE]  	29	None	replace
256	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextNode  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.nextNode  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.nextNode  +  1);	  left    =    tryMinimizeCondition(left,    falseNode    +    1);    	non-compiled	[CE]  	58	None	replace
257	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left,  falseNode  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(left,  falseNode  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left,  falseNode  +  1);	  left    =    tryMaximizeCondition(left,    falseNode);    	non-compiled	[CE]  	46	None	replace
258	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  newRoot,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  newRoot,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  newRoot,  right);	  left    =    tryMinimizeCondition(left,    newRoot);    	non-compiled	[CE]  	51	None	replace
259	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right.getFirstChild(),  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right.getFirstChild(),  left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right.getFirstChild(),  left);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
260	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getFirstChild(),  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getFirstChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getFirstChild(),  right);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
261	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getLastChild(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getLastChild(),  right);	  left    =    tryMinimizeCondition(left.getLastChild(),    right);    	non-compiled	[CE]  	24	None	replace
262	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.removeFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.removeFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.removeFirstChild());	  leftParent    =    tryMinimizeCondition(left.getFirstChild());    	non-compiled	[CE]  	48	None	replace
263	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.getNext(),  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.getNext(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.getNext(),  right);	  left    =    tryMinimizeCondition(left.getNext(),    right);    	non-compiled	[CE]  	32	None	replace
264	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left,  falseNode  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left,  falseNode  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left,  falseNode  +  1);	  leftParent    =    tryMinimizeCondition(left,    falseNode);    	non-compiled	[CE]  	9	None	replace
265	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  falseNode  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  falseNode  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  falseNode  +  1);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
266	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  right,  falseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  right,  falseNode);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  right,  falseNode);	  left    =    tryMinimizeCondition(left,    right,    falseNode);    	non-compiled	[CE]  	27	None	replace
267	[BUG]  [BUGGY]  Node  rightParent  =  left.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.cloneTree();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.cloneTree();	  Node    rightParent    =    left.getNext();    	non-compiled	[CE]  	16	None	replace
268	[BUG]  [BUGGY]  Left  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Left  =  tryMinimizeCondition(left,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Left  =  tryMinimizeCondition(left,  right);	  left    =    tryMinimizeCondition(left,    rightParent);    	non-compiled	[CE]  	2	None	replace
269	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  left.getNext());  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  left.getNext());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  left.getNext());	  left    =    tryMinimizeCondition(left.getNext()    +    1);    	non-compiled	[CE]  	61	None	replace
270	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(right,  left.child);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(right,  left.child);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(right,  left.child);	  left    =    tryMinimizeCondition(left,    right.child);    	non-compiled	[CE]  	62	None	replace
271	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  false);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  false);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
272	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  right);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
273	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  this);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right.cloneTree(),  this);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right.cloneTree(),  this);	  left    =    tryMinimizeCondition(left,    right.cloneTree());    	non-compiled	[CE]  	43	None	replace
274	[BUG]  [BUGGY]  Node  rightParent  =  left.replaceChild(n,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightParent  =  left.replaceChild(n,  right);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightParent  =  left.replaceChild(n,  right);	  Node    rightParent    =    left.getParent();    	non-compiled	[CE]  	14	None	replace
275	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getFirstChild()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getFirstChild()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getFirstChild()  +  1);	  leftParent    =    tryMinimizeCondition(left    +    1);    	non-compiled	[CE]  	60	None	replace
276	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left.getString()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  tryMinimizeCondition(left.getString()  +  1);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left.getString()  +  1);	  leftParent    =    tryMinimizeCondition(left    +    1);    	non-compiled	[CE]  	60	None	replace
277	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.parent);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  right.parent);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
278	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.child);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.child);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  right.child);	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
279	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.nextChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left,  right,  right.nextChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right,  right.nextChild());	  left    =    tryMinimizeCondition(left,    right,    n);    	non-compiled	[CE]  	30	None	replace
280	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.removeFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMinimizeCondition(left.removeFirstChild());  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.removeFirstChild());	  left    =    tryMinimizeCondition(left.getParent());    	non-compiled	[CE]  	34	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	54	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.CATCH);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.CATCH);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.CATCH);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR);	  Preconditions.checkState(left.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
285	[BUG]  [BUGGY]  Node  rightVal  =  left.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  Node  rightVal  =  left.removeFirstChild();  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	Node  rightVal  =  left.removeFirstChild();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
286	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(right,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  left  =  tryMaximizeCondition(right,  n);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(right,  n);	  left    =    tryMaximizeCondition(left,    n);    	non-compiled	[CE]  	38	None	replace
287	[BUG]  [BUGGY]  leftParent  =  attemptMinimizeCondition(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();        [BUGGY]  leftParent  =  attemptMinimizeCondition(left);  [BUGGY]      right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  attemptMinimizeCondition(left);	  leftParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	6	None	replace
