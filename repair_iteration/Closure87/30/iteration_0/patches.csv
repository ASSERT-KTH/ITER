bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  right);  [CE]  [FE]    AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMinimizeCondition(left,  right);  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  right);	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
2	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild());  [CE]  [FE]      AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMinimizeCondition(left.getLastChild());  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getLastChild());	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
3	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  n);  [CE]  [FE]        AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMinimizeCondition(left,  n);  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  n);	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
4	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode);  [CE]  [FE]          AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMinimizeCondition(left,  trueNode);  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  trueNode);	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
5	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode);  [CE]  [FE]            AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode);  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left,  falseNode);	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
6	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  [CE]  [FE]              AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  leftParent  =  tryMinimizeCondition(left);  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	leftParent  =  tryMinimizeCondition(left);	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]    [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	  	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
8	[BUG]  [BUGGY]  left  =  tryMaximizeCondition(left);  [CE]  [FE]    AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMaximizeCondition(left);  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMaximizeCondition(left);	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
9	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left.getNext());  [CE]  [FE]      AssertionFailedError  [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    [BUGGY]  left  =  tryMinimizeCondition(left.getNext());  [BUGGY]  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	718	718	1	replace	left  =  tryMinimizeCondition(left.getNext());	left  =  tryMinimizeCondition(left);  	non-compiled	[CE]  	59	None	replace
