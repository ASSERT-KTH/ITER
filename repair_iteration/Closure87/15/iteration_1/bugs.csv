bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
2	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
3	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
4	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
5	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
6	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
7	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]    [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	  	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
8	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
9	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
10	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
11	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
12	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
13	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
14	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
15	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
16	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
17	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	29	None	replace
