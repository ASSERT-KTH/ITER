bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
2	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
3	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
4	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
5	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
6	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
7	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
8	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
9	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
10	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
11	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
12	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
13	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
14	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
15	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
16	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
17	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
18	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
19	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  }	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
20	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
21	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
22	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
23	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
24	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
25	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  input);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  input);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
26	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
27	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FU  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FU	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
28	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
29	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
30	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
31	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
32	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
33	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
34	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
35	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
36	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
37	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
38	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
39	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
40	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
41	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
42	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
43	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
44	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
45	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
46	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
47	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
48	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
49	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
50	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
51	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
52	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
53	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
54	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
55	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
56	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
57	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
58	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
59	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
60	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
61	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.ASSIGN)  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.ASSIGN)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.ASSIGN)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
62	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
63	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
64	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.ASSIGN)  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.ASSIGN)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input.getType()  ==  Token.ASSIGN)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
65	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.ASSIGN)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.ASSIGN)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  Predicate  <  Node>  input  =  input.getParent();  if(input.getType()  ==  Token.ASSIGN)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
66	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
67	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
68	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
69	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
70	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
71	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
72	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
73	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
74	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
75	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
76	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
77	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
78	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
79	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(!isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
80	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
81	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
82	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
83	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  n);	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
84	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
85	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
86	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
87	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
88	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.GETPROP)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.GETPROP)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.GETPROP)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
89	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
90	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
91	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
92	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
93	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
94	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
95	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(input,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
96	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
97	[BUG]  [BUGGY]  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
98	[BUG]  [BUGGY]  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
99	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
100	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
101	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
102	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
103	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_EXPRESSION_FLAGS);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
104	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
105	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(n  ==  null)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(n  ==  null)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
106	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
107	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
108	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(!isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    	non-compiled	[CE]  ')'  expected	5	None	replace
109	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(input,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
110	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(input,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
111	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignmentInExpression(n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignmentInExpression(n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignmentInExpression(n);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
112	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  input);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  input);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	      	non-compiled	[CE]  ')'  expected	7	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  NodeTraversal.traverse(compiler,  n,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	NodeTraversal.traverse(compiler,  n,  isPropertyAssignmentInExpressionPredicate);	      	non-compiled	[CE]  ')'  expected	7	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayActionPredicate(isPropertyAssignmentInExpressionPredicate));  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayActionPredicate(isPropertyAssignmentInExpressionPredicate));  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayActionPredicate(isPropertyAssignmentInExpressionPredicate));	      	non-compiled	[CE]  ')'  expected	7	None	replace
116	[BUG]  [BUGGY]  Predicate  predicate  =  input.getNext();  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  Predicate  predicate  =  input.getNext();  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	Predicate  predicate  =  input.getNext();	      	non-compiled	[CE]  ')'  expected	7	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  input,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  NodeTraversal.traverse(compiler,  input,  new  FoldArrayAction());  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	NodeTraversal.traverse(compiler,  input,  new  FoldArrayAction());	      	non-compiled	[CE]  ')'  expected	7	None	replace
118	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
119	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
120	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
121	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
122	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate  ||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
123	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
124	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
125	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTION  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTION  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTION	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
126	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
127	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
128	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
129	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  PROPERTY_AssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  PROPERTY_AssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  PROPERTY_AssignmentInExpressionPredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
130	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(input,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(input,  isLowerPrecedencePredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
131	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(input,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(input,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(input,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
132	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  isLowerPrecedencePredicate);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
133	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignment(n);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignment(n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignment(n);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
134	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  input);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  input);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
135	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  n);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
136	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate!=  null)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate!=  null)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate!=  null)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
137	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
138	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
139	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  n);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
140	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
141	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  input);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  input);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
142	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(input,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(input,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(input,  isPropertyAssignmentInExpressionPredicate,  n);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
143	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  input);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
144	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
145	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  input);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  input);	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
146	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_EXPRESSION_FLAGS);	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
147	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
148	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isLowerPrecedence(input,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
149	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  input);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isLowerPrecedence(n,  input);	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
150	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  return  false;  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
151	[BUG]  [BUGGY]  if(isLowerPrecedence(n)||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedence(n)||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedence(n)||  isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
152	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  Predicate  <  Node>  input  =  input.getParent();  return  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  Predicate  <  Node>  input  =  input.getParent();  return  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  Predicate  <  Node>  input  =  input.getParent();  return	  return    NodeUtil.isLowerPrecedence(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	15	None	replace
153	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	16	None	replace
154	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.ASSIGN)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.ASSIGN)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate.getType()  ==  Token.ASSIGN)  {  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate);  }	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
155	[BUG]  [BUGGY]  return  NodeUtil.isFunction(n,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isFunction(n,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isFunction(n,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
156	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  n,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	8	None	replace
157	[BUG]  [BUGGY]  return  NodeUtil.isFunction(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isFunction(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isFunction(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
158	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	13	None	replace
159	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
160	[BUG]  [BUGGY]  return  NodeUtil.hasAssignment(input,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasAssignment(input,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasAssignment(input,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
161	[BUG]  [BUGGY]  return  NodeUtil.isAssignmentOp(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isAssignmentOp(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isAssignmentOp(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasAssignment(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	17	None	replace
162	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	3	None	replace
163	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate,  n,  isLowerPrecedencePredicate);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate,    n);    	non-compiled	[CE]  ')'  expected	12	None	replace
164	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  if(isPropertyAssignmentInExpressionPredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	4	None	replace
165	[BUG]  [BUGGY]  return  NodeUtil.isValue(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isValue(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isValue(n,  isPropertyAssignmentInExpressionPredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
166	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasValue(n,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.hasValue(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	10	None	replace
167	[BUG]  [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.hasPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
168	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignmentInExpression(n,  isLowerPrecedencePredicate,  isPropertyAssignmentInExpressionPredicate);	  return    NodeUtil.hasPropertyAssignmentInExpression(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
169	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpressionPredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isPropertyAssignmentInExpressionPredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isPropertyAssignmentInExpressionPredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isPropertyAssignmentInExpressionPredicate)    {    return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
170	[BUG]  [BUGGY]  Predicate  <  Node>  n  =  input.getFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  Predicate  <  Node>  n  =  input.getFirstChild();  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	Predicate  <  Node>  n  =  input.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
171	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  input.getFirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  Predicate  <  Node>  input  =  input.getFirstChild();  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	Predicate  <  Node>  input  =  input.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
172	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null  ||  input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null  ||  input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null  ||  input.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
173	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null  ||  input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null  ||  input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null  ||  input.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
174	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
175	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getFirstChild();  if(input!=  null)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
176	[BUG]  [BUGGY]  return  NodeUtil.isPropertyAssignment(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.isPropertyAssignment(n,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.isPropertyAssignment(n,  isLowerPrecedencePredicate);	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
177	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  Predicate  <  Node>  input  =  input.getParent();  return  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  Predicate  <  Node>  input  =  input.getParent();  return  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasPropertyAssignment(n,  isPropertyAssignmentInExpressionPredicate);  }  else  {  Predicate  <  Node>  input  =  input.getParent();  return	  return    NodeUtil.hasPropertyAssignment(n,    isPropertyAssignmentInExpressionPredicate);    	non-compiled	[CE]  ')'  expected	14	None	replace
178	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS,  input);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  STANDARD_OBJECT_CONSTRUCTORS,  input);	  return    NodeUtil.has(n,    isPropertyAssignmentInExpressionPredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	6	None	replace
179	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {  Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };    [BUGGY]  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	654	655	1	replace	return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    isPropertyAssignmentInExpressionPredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
