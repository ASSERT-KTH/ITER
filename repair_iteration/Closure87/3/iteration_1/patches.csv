bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  n);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n));  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(n);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
32	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.getLastChild()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.getLastChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  cond.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  Node  assign  =  expr.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  assign  =  expr.getFirstChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  n.removeChild(expr.getLastChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  Node  assign  =  expr.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  assign  =  expr.getLastChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  expr.getFirstChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  n.removeChild(expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  n.removeChild(expr.getFirstChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  n.removeChild(expr);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  n.removeChild(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType());  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
55	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()),  n.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n));  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()),  cond.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()),  cond.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  n.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()),  n.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  expr.getLastChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  Node  and  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  n.getFirstChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  Node  and  =  expr.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  expr.getNext();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  Node  var  =  expr.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  var  =  expr.getFirstChild();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  expr.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  	9	None	replace
72	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  	9	None	replace
74	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()),  expr.copyInformationFrom(n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  	9	None	replace
75	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(expr,  expr);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(expr,  expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(expr,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	4	None	replace
77	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(parent);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	4	None	replace
78	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  	10	None	replace
79	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(expr);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(expr);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	4	None	replace
81	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(expr);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(expr);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	4	None	replace
82	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(n));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(n));  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.copyInformationFrom(n));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.copyInformationFrom(n));  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  	11	None	replace
85	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.copyInformationFrom(n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  	11	None	replace
86	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	3	None	replace
87	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  	2	None	replace
88	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  	2	None	replace
89	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n);    	non-compiled	[CE]  	10	None	replace
90	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	5	None	replace
91	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	5	None	replace
92	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(cond);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	5	None	replace
93	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  expr.getFirstChild().getNext();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getNext();	      	non-compiled	[CE]  	7	None	replace
94	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild();  n.removeChild(and);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  expr.getFirstChild();  n.removeChild(and);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild();  n.removeChild(and);	      	non-compiled	[CE]  	7	None	replace
95	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString();  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString();	      	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
97	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
98	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);    [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);  [BUGGY]    .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
