bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  	84	None	replace
2	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  n.copyInformationFrom(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  n.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  n.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  	84	None	replace
3	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  	84	None	replace
4	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  	84	None	replace
5	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  n.copyInformationFrom(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  n.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  n.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  	84	None	replace
6	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(expr));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(expr));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(expr));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  	84	None	replace
7	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  	60	None	replace
8	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  	60	None	replace
9	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  	60	None	replace
10	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  	60	None	replace
11	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  cond.copyInformationFrom(n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  	60	None	replace
12	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  	60	None	replace
13	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(cond);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.getFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getFirstChild()).copyInformationFrom(expr);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.getFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.getFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(expr,  expr);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(expr,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(expr,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.getFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	31	None	replace
17	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.nextChild()).copyInformationFrom(cond);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.nextChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.nextChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	31	None	replace
18	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	31	None	replace
19	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(cond);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	31	None	replace
20	[BUG]  [BUGGY]  Node  and  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  n.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  n.getLastChild();	  Node    and    =    expr.getLastChild();    	non-compiled	[CE]  	62	None	replace
21	[BUG]  [BUGGY]  Node  and  =  cond.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  cond.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  cond.getLastChild();	  Node    and    =    expr.getLastChild();    	non-compiled	[CE]  	62	None	replace
22	[BUG]  [BUGGY]  Node  and  =  expr.nextChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.nextChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.nextChild();	  Node    and    =    expr.getLastChild();    	non-compiled	[CE]  	62	None	replace
23	[BUG]  [BUGGY]  Node  and  =  parent.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  parent.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  parent.getLastChild();	  Node    and    =    expr.getLastChild();    	non-compiled	[CE]  	62	None	replace
24	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.cloneTree()).copyInformationFrom(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	69	None	replace
25	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
26	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
27	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  expr).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  expr).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  expr).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
28	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
29	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
30	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
31	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
32	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
33	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
34	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
35	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
36	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
37	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
38	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  assign);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  assign);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  assign);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
39	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  parent);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
40	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
41	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
42	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  cond.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
43	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
44	[BUG]  [BUGGY]  Node  and  =  cond.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  cond.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  cond.getFirstChild();	  Node    and    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
45	[BUG]  [BUGGY]  Node  AND  =  expr.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  AND  =  expr.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  AND  =  expr.getFirstChild();	  Node    and    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
46	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
47	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
48	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
49	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
50	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getLastChild().getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild().getNext();	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
51	[BUG]  [BUGGY]  Node  and  =  cond.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  cond.getFirstChild().getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  cond.getFirstChild().getNext();	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
52	[BUG]  [BUGGY]  Node  and  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  n.getFirstChild().getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  n.getFirstChild().getNext();	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
53	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  AND_PRECEDENCE;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  AND_PRECEDENCE;  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getNext(),  AND_PRECEDENCE;	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
54	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  OR_PRECEDENCE;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  OR_PRECEDENCE;  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getNext(),  OR_PRECEDENCE;	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
55	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  AND_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getNext(),  AND_PRECEDENCE);	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
56	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
58	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
59	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
62	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
63	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  expr.copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
64	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild(),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
65	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
66	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    n,    cond.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
67	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    cond.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
68	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  OR_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  expr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
71	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
72	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(expr,  expr);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(expr,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(expr,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
73	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.cloneTree()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.cloneTree()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.cloneTree()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
74	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(cond,  expr);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(cond,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(cond,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
75	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  expr.copyInformationFrom(n));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	82	None	replace
76	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(expr));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(expr));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(expr));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	82	None	replace
77	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  expr.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	82	None	replace
78	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  expr.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	82	None	replace
79	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
80	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
81	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
82	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
83	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
84	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getParent());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getParent());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getParent());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
85	[BUG]  [BUGGY]  Node  assign  =  n.getLastChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  n.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  n.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	44	None	replace
86	[BUG]  [BUGGY]  Node  assign  =  cond.getLastChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  cond.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  cond.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	44	None	replace
87	[BUG]  [BUGGY]  Node  assign  =  parent.getLastChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  parent.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  parent.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	44	None	replace
88	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  cond.getFirstChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	44	None	replace
89	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	85	None	replace
90	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	85	None	replace
91	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	85	None	replace
92	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  parent.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  parent.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  parent.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	54	None	replace
93	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	54	None	replace
94	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	54	None	replace
95	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
96	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
97	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
98	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
99	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
100	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  parent.getFirstChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
101	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
102	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
103	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
104	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.nextChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.nextChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.nextChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	28	None	replace
105	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	28	None	replace
106	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	40	None	replace
107	[BUG]  [BUGGY]  Node  and  =  cond.getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  cond.getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  cond.getNext();	  Node    and    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	64	None	replace
108	[BUG]  [BUGGY]  Node  and  =  n.getNext();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  n.getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  n.getNext();	  Node    and    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	64	None	replace
109	[BUG]  [BUGGY]  Node  and  =  expr.getNext()  -  1;  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getNext()  -  1;  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getNext()  -  1;	  Node    and    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	64	None	replace
110	[BUG]  [BUGGY]  Node  and  =  expr.getNext(),  cond);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getNext(),  cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getNext(),  cond);	  Node    and    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	64	None	replace
111	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getLastChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	36	None	replace
112	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	36	None	replace
113	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  n.getLastChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  n.getLastChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  n.getLastChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	36	None	replace
114	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  parent.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  parent.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  parent.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
115	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
116	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
117	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  cond.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
118	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.copyInformationFrom(n),  expr.cloneTree());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.copyInformationFrom(n),  expr.cloneTree());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.copyInformationFrom(n),  expr.cloneTree());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
119	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
120	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	73	None	replace
121	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	73	None	replace
122	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
123	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
124	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
125	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
126	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  AND_PRECEDENCE).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  AND_PRECEDENCE).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  AND_PRECEDENCE).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
127	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
128	[BUG]  [BUGGY]  n.removeChild(cond.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(cond.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(cond.getLastChild());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild(),  cond);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild(),  cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild(),  cond);	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
130	[BUG]  [BUGGY]  n.removeChild(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(parent.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(parent.getLastChild());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
131	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild(),  AND_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild(),  AND_PRECEDENCE);	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
132	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
133	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.cloneTree()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.cloneTree()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
134	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(cond);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
135	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
136	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
137	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
138	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
139	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
140	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
141	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getParent());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getParent());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getParent());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
142	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
143	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getType());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
144	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  parent);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
145	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
146	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
147	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(n,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(n,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(n,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
148	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  expr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    n);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
149	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
150	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
151	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
152	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
153	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
154	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.removeFirstChild(),  expr).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.removeFirstChild(),  expr).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond.removeFirstChild(),  expr).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
155	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
156	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n.removeFirstChild(),  cond).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n.removeFirstChild(),  cond).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n.removeFirstChild(),  cond).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
157	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.getFirstChild(),  expr).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.getFirstChild(),  expr).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond.getFirstChild(),  expr).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
158	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n.removeFirstChild(),  cond).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n.removeFirstChild(),  cond).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n.removeFirstChild(),  cond).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
159	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  cond).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  cond).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  cond).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
160	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  expr);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  	76	None	replace
161	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  elseOp);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  elseOp);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  elseOp);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  	76	None	replace
162	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  	76	None	replace
163	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(expr,  expr);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(expr,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(expr,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  	76	None	replace
164	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(expr,  n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  	76	None	replace
165	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	75	None	replace
166	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	75	None	replace
167	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(expr);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	75	None	replace
168	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	75	None	replace
169	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(n,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	18	None	replace
170	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	18	None	replace
171	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	18	None	replace
172	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  n.removeFirstChild()).copyInformationFrom(cond);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  n.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  assign,  n.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	39	None	replace
173	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  expr.removeFirstChild()).copyInformationFrom(cond);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  expr.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  assign,  expr.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	39	None	replace
174	[BUG]  [BUGGY]  Node  and  =  parent.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  parent.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  parent.getFirstChild();	  Node    and    =    expr.getFirstChild();    	non-compiled	[CE]  	45	None	replace
175	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  	23	None	replace
176	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getFirstChild()).copyInformationFrom(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.getFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	26	None	replace
177	[BUG]  [BUGGY]  n.removeChild(cond);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(cond);	  n.removeChild(expr);    	non-compiled	[CE]  	47	None	replace
178	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(parent);	  n.removeChild(expr);    	non-compiled	[CE]  	47	None	replace
179	[BUG]  [BUGGY]  n.removeChild(and);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(and);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(and);	  n.removeChild(expr);    	non-compiled	[CE]  	47	None	replace
180	[BUG]  [BUGGY]  n.removeChild(assign);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(assign);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(assign);	  n.removeChild(expr);    	non-compiled	[CE]  	47	None	replace
181	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  cond.copyInformationFrom(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    cond.copyInformationFrom(n);    	non-compiled	[CE]  	57	None	replace
182	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild(),  expr.copyInformationFrom(n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    cond.copyInformationFrom(n);    	non-compiled	[CE]  	57	None	replace
183	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  cond.copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    cond.copyInformationFrom(n);    	non-compiled	[CE]  	57	None	replace
184	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()),  cond.copyInformationFrom(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    cond.copyInformationFrom(n);    	non-compiled	[CE]  	57	None	replace
185	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  cond.copyInformationFrom(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    cond.copyInformationFrom(n);    	non-compiled	[CE]  	57	None	replace
186	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  cond.getFirstChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  cond.getFirstChild().getNext().getString();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  cond.getFirstChild().getNext().getString();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
187	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getLastChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getLastChild().getNext().getString();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getLastChild().getNext().getString();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
188	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLastChild().getString();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLastChild().getString();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
189	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  n.getFirstChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  n.getFirstChild().getNext().getString();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  n.getFirstChild().getNext().getString();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
190	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLineno();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLineno();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLineno();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
191	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  parent.getFirstChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  parent.getFirstChild().getNext().getString();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  parent.getFirstChild().getNext().getString();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
192	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(expr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
193	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent,  expr.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
194	[BUG]  [BUGGY]  Node  and  =  cond.getFirstChild();  n.removeChild(and);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  cond.getFirstChild();  n.removeChild(and);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  cond.getFirstChild();  n.removeChild(and);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
195	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(and);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(and);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild();  n.removeChild(and);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
196	[BUG]  [BUGGY]  Node  and  =  n.getFirstChild();  n.removeChild(and);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  n.getFirstChild();  n.removeChild(and);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  n.getFirstChild();  n.removeChild(and);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
197	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(assign);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(assign);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild();  n.removeChild(assign);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
198	[BUG]  [BUGGY]  Node  assign  =  expr.getFirstChild();  n.removeChild(assign);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  expr.getFirstChild();  n.removeChild(assign);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.getFirstChild();  n.removeChild(assign);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
199	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild();  n.removeChild(cond);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild();  n.removeChild(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild();  n.removeChild(cond);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
200	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  cond.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
201	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  parent.copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  parent.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  parent.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
202	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
203	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
204	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
205	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
206	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getType());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
207	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree()).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
208	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
209	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	97	None	replace
210	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  	97	None	replace
211	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  COND_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  COND_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  COND_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
212	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  cond.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  cond.getFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	65	None	replace
213	[BUG]  [BUGGY]  Node  var  =  expr.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  expr.getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  expr.getLastChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	65	None	replace
214	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  parent.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  parent.getFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
215	[BUG]  [BUGGY]  Node  var  =  expr.getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  expr.getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  expr.getNext();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
216	[BUG]  [BUGGY]  Node  var  =  node.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  node.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  node.getFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	65	None	replace
217	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);    	non-compiled	[CE]  	98	None	replace
218	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  SYNTHETIC).copyInformationFrom(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  SYNTHETIC).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  SYNTHETIC).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);    	non-compiled	[CE]  	98	None	replace
219	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(cond);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);    	non-compiled	[CE]  	98	None	replace
220	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	98	None	replace
221	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  parent.copyInformationFrom(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  parent.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  parent.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  	10	None	replace
222	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(expr));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(expr));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(expr));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  	10	None	replace
223	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  expr.copyInformationFrom(cond));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  expr.copyInformationFrom(cond));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  expr.copyInformationFrom(cond));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	10	None	replace
224	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  parent));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  parent));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  parent));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  	10	None	replace
225	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  expr.getLastChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  expr.getLastChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  assign,  expr.getLastChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.getLastChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	33	None	replace
226	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getLastChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.getLastChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.getLastChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    n,    expr.getLastChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	33	None	replace
227	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  expr.getLastChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  expr.getLastChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent,  expr.getLastChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.getLastChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	33	None	replace
228	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
229	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.cloneTree()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.cloneTree()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
230	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n,  cond);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n,  cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(n,  cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
231	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
232	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
233	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
234	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
235	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
236	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
237	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
238	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
239	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
240	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
241	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
242	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
243	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
244	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
245	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
246	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
247	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
248	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  cond.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    cond.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	24	None	replace
249	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.removeFirstChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.removeFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.removeFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
250	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
251	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
252	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
253	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
254	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
255	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.getFirstChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.getFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.getFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
256	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
257	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
258	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
259	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
260	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
261	[BUG]  [BUGGY]  n.removeChild(cond.getFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(cond.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(cond.getFirstChild());	  n.removeChild(expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
262	[BUG]  [BUGGY]  n.removeChild(parent.getFirstChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(parent.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(parent.getFirstChild());	  n.removeChild(expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
263	[BUG]  [BUGGY]  n.removeChild(expr.getString());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getString());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getString());	  n.removeChild(expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
264	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	87	None	replace
265	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.getLastChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	32	None	replace
266	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  cond.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	61	None	replace
267	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	61	None	replace
268	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
269	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  cond.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
270	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
271	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
272	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  STANDARD_OBJECT_CONSTRUCTORS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
273	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getParent());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getParent());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getParent());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
274	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
275	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
276	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
277	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLocalPart());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLocalPart());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLocalPart());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
278	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
279	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLineno());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLineno());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLineno());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
280	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
281	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
282	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
283	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
284	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild(),  expr.copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
285	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
286	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
287	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getParent()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getParent()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getParent()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
288	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getNext()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getNext()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getNext()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
289	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	34	None	replace
290	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	34	None	replace
291	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  parent.getLastChild()).copyInformationFrom(n,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  parent.getLastChild()).copyInformationFrom(n,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  parent.getLastChild()).copyInformationFrom(n,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	34	None	replace
292	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(parent,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(parent,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild()).copyInformationFrom(parent,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	34	None	replace
293	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	78	None	replace
294	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	78	None	replace
295	[BUG]  [BUGGY]  Node  assign  =  expr.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  expr.getNext();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.getNext();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	41	None	replace
296	[BUG]  [BUGGY]  Node  assign  =  expr.getAssignedChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  expr.getAssignedChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.getAssignedChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	41	None	replace
297	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  parent.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  parent.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  parent.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    parent.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	66	None	replace
298	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  parent.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  parent.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  parent.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    parent.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	66	None	replace
299	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.getFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.getFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    parent.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	66	None	replace
300	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(cond));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(cond));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(cond));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	56	None	replace
301	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(parent));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(parent));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(parent));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	56	None	replace
302	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
303	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
304	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
305	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
306	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
307	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
308	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
309	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
310	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLocalPart());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLocalPart());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getLocalPart());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
311	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
312	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	83	None	replace
313	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	83	None	replace
314	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  parent.removeFirstChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  parent.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  parent.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	79	None	replace
315	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  n.removeFirstChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  n.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  assign,  n.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	79	None	replace
316	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  expr.removeFirstChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  assign,  expr.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  assign,  expr.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	79	None	replace
317	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
318	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
319	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
320	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
321	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	59	None	replace
322	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	59	None	replace
323	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getTree(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	59	None	replace
324	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.getFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.getFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  cond.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr,    cond.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	35	None	replace
325	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  cond.getFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  cond.getFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  cond.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr,    cond.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	35	None	replace
326	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n.getFirstChild(),  expr).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n.getFirstChild(),  expr).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n.getFirstChild(),  expr).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
327	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  n).copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  n).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  n).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  	20	None	replace
328	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.getFirstChild(),  n).copyInformationFrom(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.getFirstChild(),  n).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond.getFirstChild(),  n).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  	20	None	replace
329	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
330	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
331	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent.getFirstChild(),  n).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent.getFirstChild(),  n).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent.getFirstChild(),  n).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
332	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
333	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
334	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
335	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
336	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
337	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
338	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
339	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	25	None	replace
340	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
341	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
342	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild(),  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild(),  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
343	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getLastChild(),  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
344	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
345	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild(),  expr.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild(),  expr.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getLastChild(),  expr.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
346	[BUG]  [BUGGY]  Node  and  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.removeFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.removeFirstChild();	  Node    and    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	62	None	replace
347	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getValue();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getValue();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getValue();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  ')'  expected	95	None	replace
348	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getIndex();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getIndex();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getIndex();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  ')'  expected	95	None	replace
349	[BUG]  [BUGGY]  Node  var  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  expr.removeFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  expr.removeFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
350	[BUG]  [BUGGY]  Node  var  =  expr.nextChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  expr.nextChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  expr.nextChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
351	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
352	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
353	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	53	None	replace
354	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	53	None	replace
355	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getType());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	53	None	replace
356	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  cond.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  cond.getLastChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  cond.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr,    cond.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	35	None	replace
357	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
358	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    parent.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	66	None	replace
359	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(returnNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	88	None	replace
360	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  n.copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	59	None	replace
361	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	39	None	replace
362	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild(),  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild(),  expr);	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
363	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild(),  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild(),  expr.getFirstChild());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
364	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild(),  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild(),  expr.getLastChild());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
365	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild(),  expr.cloneTree());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild(),  expr.cloneTree());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
366	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
367	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
368	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
369	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
370	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
371	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  SHORT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  SHORT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  SHORT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
372	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	55	None	replace
373	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_SYNTHETIC),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_SYNTHETIC),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_SYNTHETIC),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	55	None	replace
374	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
375	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
376	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
377	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
378	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
379	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(cond,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(cond,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(cond,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  ')'  expected	76	None	replace
380	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(parent,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(parent,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild()).copyInformationFrom(parent,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(expr,    expr);    	non-compiled	[CE]  ')'  expected	76	None	replace
381	[BUG]  [BUGGY]  Node  assign  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  expr.removeFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.removeFirstChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	44	None	replace
382	[BUG]  [BUGGY]  Node  assign  =  expr.nextChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  expr.nextChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  expr.nextChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	44	None	replace
383	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	83	None	replace
384	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  n.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  n.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild(),  n.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    n.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	84	None	replace
385	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	27	None	replace
386	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  returnNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  parent,  returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	27	None	replace
387	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	27	None	replace
388	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
389	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
390	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
391	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
392	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
393	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  SHORT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  SHORT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  SHORT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
394	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
395	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(cond,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
396	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  n.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
397	[BUG]  [BUGGY]  Node  and  =  expr.getParent();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getParent();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getParent();	  Node    and    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	64	None	replace
398	[BUG]  [BUGGY]  Node  and  =  expr.getNextChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getNextChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getNextChild();	  Node    and    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	64	None	replace
399	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.cloneTree()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.cloneTree()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	52	None	replace
400	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	60	None	replace
401	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	60	None	replace
402	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  parent.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  parent.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  parent.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	60	None	replace
403	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseOp.copyInformationFrom(n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseOp.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseOp.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
404	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getLastChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild().getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getLastChild();	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	93	None	replace
405	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	34	None	replace
406	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(parent));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(parent));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(parent));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	82	None	replace
407	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  cond.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  cond.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  cond.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
408	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(parent));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(parent));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(parent));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	10	None	replace
409	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n),  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n),  expr.cloneTree());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n),  expr.cloneTree());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	10	None	replace
410	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n),  parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n),  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n),  parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	10	None	replace
411	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseOp.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseOp.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseOp.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	10	None	replace
412	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	74	None	replace
413	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.getFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.getFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
414	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	31	None	replace
415	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
416	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
417	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
418	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  AND_PRECEDENCE).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  AND_PRECEDENCE).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  AND_PRECEDENCE).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	89	None	replace
419	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
420	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  elseOp.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  elseOp.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  elseOp.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
421	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
422	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
423	[BUG]  [BUGGY]  n.removeChild(child);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(child);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(child);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	47	None	replace
424	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  cond.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
425	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
426	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
427	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  returnNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
428	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  returnNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
429	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
430	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	98	None	replace
431	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
432	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
433	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  AND_PRECEDENCE),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
434	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.removeFirstChild()),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
435	[BUG]  [BUGGY]  Node  and  =  excr.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  excr.getFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  excr.getFirstChild();	  Node    and    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
436	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent,  expr.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	19	None	replace
437	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.getLastChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	19	None	replace
438	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	90	None	replace
439	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  STANDARD_OBJECT_CONSTRUCTORS,  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  STANDARD_OBJECT_CONSTRUCTORS,  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  STANDARD_OBJECT_CONSTRUCTORS,  expr.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	90	None	replace
440	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
441	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  returnNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  parent,  returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
442	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
443	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  returnNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	15	None	replace
444	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getLastChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	67	None	replace
445	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	67	None	replace
446	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	87	None	replace
447	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
448	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
449	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.cloneTree()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.cloneTree()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.cloneTree()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
450	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	61	None	replace
451	[BUG]  [BUGGY]  Node  assign  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  assign  =  n.removeFirstChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  assign  =  n.removeFirstChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	43	None	replace
452	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  parent,  n.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	79	None	replace
453	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	79	None	replace
454	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild();  n.removeChild(cond);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  ')'  expected	94	None	replace
455	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(And);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(And);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild();  n.removeChild(And);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  ')'  expected	94	None	replace
456	[BUG]  [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(expr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getLastChild();  n.removeChild(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getLastChild();  n.removeChild(expr);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  ')'  expected	94	None	replace
457	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  INVALID_REGULAR_EXPRESSION_FLAGS),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  INVALID_REGULAR_EXPRESSION_FLAGS),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  INVALID_REGULAR_EXPRESSION_FLAGS),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
458	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
459	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
460	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.addFirstChild(),  expr).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond.addFirstChild(),  expr).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond.addFirstChild(),  expr).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	91	None	replace
461	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
462	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
463	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS.cloneTree(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
464	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	54	None	replace
465	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  OR_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	23	None	replace
466	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.cloneTree()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.cloneTree()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
467	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
468	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  expr.nextChild(),  STANDARD_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
469	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	73	None	replace
470	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
471	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(returnNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	78	None	replace
472	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
473	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	75	None	replace
474	[BUG]  [BUGGY]  n.removeChild(expr.getNext());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getNext());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getNext());	  n.removeChild(expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
475	[BUG]  [BUGGY]  n.removeChild(expr.getType());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getType());	  n.removeChild(expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
476	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getNext()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
477	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getLastChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getLastChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getLastChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
478	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
479	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n.getFirstChild(),  n).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n.getFirstChild(),  n).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n.getFirstChild(),  n).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
480	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
481	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
482	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	91	None	replace
483	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  AND_PRECEDENCE).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  AND_PRECEDENCE).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  AND_PRECEDENCE).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.removeFirstChild(),    cond).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	91	None	replace
484	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	71	None	replace
485	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
486	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree()).copyInformationFrom(cond,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
487	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.cloneTree()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.cloneTree()).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.cloneTree()).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
488	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
489	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    cond.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	57	None	replace
490	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	31	None	replace
491	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	31	None	replace
492	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.nextChild()).copyInformationFrom(cond,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    n,    expr.nextChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	31	None	replace
493	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	77	None	replace
494	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  expr.getNext()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  expr.getNext()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  expr.getNext()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
495	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.getNext()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.getNext()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  cond.getNext()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.getNext()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	22	None	replace
496	[BUG]  [BUGGY]  Node  var  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  var  =  expr.cloneTree();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  var  =  expr.cloneTree();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
497	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
498	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
499	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  NON_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  NON_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  NON_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
500	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	69	None	replace
501	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	37	None	replace
502	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getParent());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getParent());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  parent,  expr.getParent());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	48	None	replace
503	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.getFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
504	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
505	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
506	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
507	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(parent,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
508	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(expr,  expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(expr,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(expr,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
509	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	75	None	replace
510	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(cond,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(cond,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.removeFirstChild()).copyInformationFrom(cond,  expr);	  Node    and    =    new    Node(Token.AND,    expr,    n.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	39	None	replace
511	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
512	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
513	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
514	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	40	None	replace
515	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	40	None	replace
516	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	40	None	replace
517	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n  +  1);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n  +  1);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
518	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
519	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  MISSING_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  MISSING_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  MISSING_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	96	None	replace
520	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
521	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
522	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STRICT_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
523	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	68	None	replace
524	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	83	None	replace
525	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	53	None	replace
526	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getChildCount());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getChildCount());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getChildCount());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	53	None	replace
527	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n,  expr.getType(),  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	53	None	replace
528	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	87	None	replace
529	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  expr.copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  expr.copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()),  expr.copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	28	None	replace
530	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	28	None	replace
531	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  cond).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	92	None	replace
532	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  n.getLastChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.getLastChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	32	None	replace
533	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  parent.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    parent.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	66	None	replace
534	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.removeFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    parent.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	66	None	replace
535	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
536	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.removeFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.removeFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
537	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(pr,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(pr,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(pr,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
538	[BUG]  [BUGGY]  n.addChildToFront(expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.addChildToFront(expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.addChildToFront(expr.getLastChild());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
539	[BUG]  [BUGGY]  n.removeChild(expr.getLastChild().getString());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  n.removeChild(expr.getLastChild().getString());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	n.removeChild(expr.getLastChild().getString());	  n.removeChild(expr.getLastChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
540	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
541	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
542	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	30	None	replace
543	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild().getNext(),  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getNext(),  OR_PRECEDENCE);	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	93	None	replace
544	[BUG]  [BUGGY]  Node  and  =  expr.getFirstChild().getParent();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getFirstChild().getParent();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getFirstChild().getParent();	  Node    and    =    expr.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	93	None	replace
545	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  n).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  n).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getLastChild(),  n).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
546	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n,  false).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n,  false).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.getFirstChild(),  n,  false).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    expr.getFirstChild(),    n).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	20	None	replace
547	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	60	None	replace
548	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE),  n.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE),  n.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE),  n.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_EXPRESSION_FLAGS),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	60	None	replace
549	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  STRICT_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
550	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
551	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
552	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp.copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp.copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp.copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild(),    expr.copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	81	None	replace
553	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
554	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()),  expr.copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()),  expr.copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()),  expr.copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()),    expr.copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	11	None	replace
555	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
556	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
557	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n,  parent,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	34	None	replace
558	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.removeFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.removeFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  n.removeFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
559	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  name1),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  name1),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  name1),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    n.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
560	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.cloneTree());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.cloneTree());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.cloneTree());	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
561	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.type);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.type);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
562	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  OR_PRECEDENCE),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  OR_PRECEDENCE),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  OR_PRECEDENCE),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	73	None	replace
563	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr.removeFirstChild(),  cond).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	67	None	replace
564	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	67	None	replace
565	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild()).copyInformationFrom(parent);    	non-compiled	[CE]  ')'  expected	67	None	replace
566	[BUG]  [BUGGY]  Node  and  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.cloneTree();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.cloneTree();	  Node    and    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	45	None	replace
567	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
568	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
569	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    n,    expr.cloneTree()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	21	None	replace
570	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
571	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.removeFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    n,    expr.removeFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	90	None	replace
572	[BUG]  [BUGGY]  Node  and  =  expr.getNext();  n.removeChild(and);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.getNext();  n.removeChild(and);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.getNext();  n.removeChild(and);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  ')'  expected	94	None	replace
573	[BUG]  [BUGGY]  Node  and  =  expr.removeFirstChild();  n.removeChild(and);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  expr.removeFirstChild();  n.removeChild(and);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  expr.removeFirstChild();  n.removeChild(and);	  Node    and    =    expr.getFirstChild();    n.removeChild(and);    	non-compiled	[CE]  ')'  expected	94	None	replace
574	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(pr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(pr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  n.copyInformationFrom(pr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getLastChild(),    n.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
575	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n,  expr.getFirstChild(),  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
576	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
577	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
578	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
579	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
580	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n),  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.copyInformationFrom(n),  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	12	None	replace
581	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.cloneTree()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.cloneTree()));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.copyInformationFrom(n,  expr.cloneTree()));	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	10	None	replace
582	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getLastChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getLastChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getLastChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
583	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
584	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getNext(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getNext(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getNext(),  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
585	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.copyInformationFrom(n));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.copyInformationFrom(n));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  expr.getFirstChild(),  expr.copyInformationFrom(n));	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
586	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  parent.removeFirstChild(),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  parent.removeFirstChild(),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  parent.removeFirstChild(),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    expr.removeFirstChild()),    expr.copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	72	None	replace
587	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(parent,  expr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.nextChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	27	None	replace
588	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
589	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(cond);	  Node    and    =    new    Node(Token.AND,    cond,    expr.next(),    STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	17	None	replace
590	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  returnNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  returnNode);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n,  parent,  returnNode);	  Node    and    =    new    Node(Token.AND,    cond,    expr.getFirstChild()).copyInformationFrom(n,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
591	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(cond));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(cond));  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.copyInformationFrom(cond));	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild(),    expr.copyInformationFrom(n));    	non-compiled	[CE]  ')'  expected	82	None	replace
592	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC),  expr.copyInformationFrom(n);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    STANDARD_OBJECT_SYNTHETIC).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	98	None	replace
593	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  n,  expr.getFirstChild()).copyInformationFrom(cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	23	None	replace
594	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(pr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(pr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(pr);	  Node    and    =    new    Node(Token.AND,    n,    expr.getFirstChild()).copyInformationFrom(cond);    	non-compiled	[CE]  ')'  expected	23	None	replace
595	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
596	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getType());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(parent,  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
597	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n,  expr.getType(),  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.next()).copyInformationFrom(n,    expr.getType());    	non-compiled	[CE]  ')'  expected	16	None	replace
598	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(parent);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(parent);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
599	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n  +  1);	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
600	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
601	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree(),    INVALID_REGULAR_EXPRESSION_FLAGS).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	97	None	replace
602	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString(),  OR_PRECEDENCE;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString(),  OR_PRECEDENCE;  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString(),  OR_PRECEDENCE;	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  ')'  expected	95	None	replace
603	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLastChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLastChild();  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getLastChild();	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  ')'  expected	95	None	replace
604	[BUG]  [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString(),  OR_PRECEDENCE);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	int  AND_PRECEDENCE  =  expr.getFirstChild().getNext().getString(),  OR_PRECEDENCE);	  int    AND_PRECEDENCE    =    expr.getFirstChild().getNext().getString();    	non-compiled	[CE]  ')'  expected	95	None	replace
605	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	49	None	replace
606	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(expr,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(expr,  expr.getFirstChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(expr,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	49	None	replace
607	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS).copyInformationFrom(n,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.cloneTree()).copyInformationFrom(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	49	None	replace
608	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.removeFirstChild()).copyInformationFrom(expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);      [BUGGY]  Node  and  =  new  Node(Token.AND,  expr,  cond.removeFirstChild()).copyInformationFrom(expr);  [BUGGY]      .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	310	311	1	replace	Node  and  =  new  Node(Token.AND,  expr,  cond.removeFirstChild()).copyInformationFrom(expr);	  Node    and    =    new    Node(Token.AND,    n,    cond.removeFirstChild()).copyInformationFrom(expr);    	non-compiled	[CE]  ')'  expected	38	None	replace
