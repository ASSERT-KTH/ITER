bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
2	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
3	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
4	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
5	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
6	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
8	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
9	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
10	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
11	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
12	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
13	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
14	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
15	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
16	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
17	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
18	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
19	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
20	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
21	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
22	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
23	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
24	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
25	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
26	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
27	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
28	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
29	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
30	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
31	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
32	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
33	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
34	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
35	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
36	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
37	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
38	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
40	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
41	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInEx	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
42	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
43	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
44	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
45	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
47	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	95	None	replace
48	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	95	None	replace
49	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	95	None	replace
50	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	95	None	replace
51	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	95	None	replace
52	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
53	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
54	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
55	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
56	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  >=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  >=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  >=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
57	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
58	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
59	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
60	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
61	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
62	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
63	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( "  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( "	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	19	None	replace
64	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
65	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  OR_PRECEDENCE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  OR_PRECEDENCE);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
66	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
67	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  AND_PRECEDENCE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  AND_PRECEDENCE);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
68	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
69	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_PREDICATE);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_PREDICATE);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
70	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  IS_LONG_PRECEDENCE);  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  IS_LONG_PRECEDENCE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  IS_LONG_PRECEDENCE);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
71	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
72	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
73	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
74	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
75	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  precedence);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
76	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
77	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isLowerPrecedencePredicate);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getString());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getString());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.NAME);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(input.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
83	[BUG]  [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
84	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
85	[BUG]  [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
86	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
87	[BUG]  [BUGGY]  Predicate  predicate  =  input.getNext();  if(isLowerPrecedencePredicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getNext();  if(isLowerPrecedencePredicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getNext();  if(isLowerPrecedencePredicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
88	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
89	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
90	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
91	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
92	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
93	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
94	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    precedence,    ISLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	88	None	replace
95	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    precedence,    ISLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	88	None	replace
96	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
97	[BUG]  [BUGGY]  if(previousence  ==  IS_LowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  IS_LowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  IS_LowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
98	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
99	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
100	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedencePredicate;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedencePredicate;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedencePredicate;  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
101	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
102	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
103	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
104	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
105	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
106	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
107	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
108	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
109	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
110	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
111	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
112	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
113	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
114	[BUG]  [BUGGY]  }  else  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
115	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
116	[BUG]  [BUGGY]  }  else  if(input.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
117	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
118	[BUG]  [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
119	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
120	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
121	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
122	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
123	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
124	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
125	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
126	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
127	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
128	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
129	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	99	None	replace
130	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	99	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	99	None	replace
132	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	99	None	replace
133	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	99	None	replace
134	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
135	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
136	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
137	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
138	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
139	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
140	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
141	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
142	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
143	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
144	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
145	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
146	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
147	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
148	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
149	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
150	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
151	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
152	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
153	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
154	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
155	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
156	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
157	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
158	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
159	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
160	[BUG]  [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
161	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
162	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
163	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
164	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
165	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
166	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
167	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
168	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
169	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
170	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
171	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
172	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
173	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
174	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
175	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
176	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
177	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
178	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
179	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
180	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
181	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
182	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
183	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
184	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
185	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
186	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
187	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
188	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
189	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
190	[BUG]  [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
191	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
192	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  Predicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  Predicate	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
193	[BUG]  [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE  ||  precedence  >  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE  ||  precedence  >  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE  ||  precedence  >  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
194	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  PredicatePredicate  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  PredicatePredicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  PredicatePredicate	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
195	[BUG]  [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE  ||  precedence  >  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PRED  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE  ||  precedence  >  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE  ||  precedence  >  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PRED	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
196	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
197	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
198	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
199	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
200	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
201	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
202	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
203	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
204	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
205	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
206	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
207	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
208	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  <  Node>  input  =  n.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  <  Node>  input  =  n.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
209	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
210	[BUG]  [BUGGY]  }  else  if(input.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	144	None	replace
211	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
212	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence);	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
213	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
214	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
215	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
216	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
217	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
218	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
219	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
220	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
221	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
222	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
223	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence),  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence),  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence),  isLowerPrecedencePredicate);	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(!isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(!isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(!isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence  +  1));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence  +  1));	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence  -  1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence  -  1));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence  -  1));	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence);	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
230	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
231	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
232	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
233	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
234	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
235	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
236	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
237	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
238	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
239	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
240	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
241	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
242	[BUG]  [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
243	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
244	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
245	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
246	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
247	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
248	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
249	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
250	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
251	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
252	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
253	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
254	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
255	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
256	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
257	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
258	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
259	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
260	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
261	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
262	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
263	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
264	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
265	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
266	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
267	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
268	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
269	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
270	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
271	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
272	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
273	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
274	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
275	[BUG]  [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
276	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
277	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
278	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
279	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
280	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
281	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
282	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
283	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
284	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
285	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
286	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
287	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
288	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
289	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
290	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
291	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
292	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
293	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRA  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRA	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
294	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
295	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
296	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
297	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
298	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
300	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  or_PRECEDENCE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  or_PRECEDENCE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  or_PRECEDENCE);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
301	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
302	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
303	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
304	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
305	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
306	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
307	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
308	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
309	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
310	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
311	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
312	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
313	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
314	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedencePredicate);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedence);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(n,  precedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
321	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
322	[BUG]  [BUGGY]  if(input  ==  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
323	[BUG]  [BUGGY]  if(input.getType()  ==  Token.NAME)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input.getType()  ==  Token.NAME)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input.getType()  ==  Token.NAME)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
324	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
325	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
326	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
327	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
328	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
329	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
330	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
331	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
332	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
333	[BUG]  [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
334	[BUG]  [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
335	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
336	[BUG]  [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
337	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
338	[BUG]  [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
339	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
340	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
341	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
342	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
343	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
344	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
345	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
346	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
347	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
348	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
349	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
350	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
351	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
352	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
353	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
354	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
355	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
356	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
357	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePre  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePre  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePre	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
358	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
359	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
360	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  <  Node>  input  =  n.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  <  Node>  input  =  n.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
361	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
362	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
363	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
364	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
365	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
366	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
367	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
368	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
369	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
370	[BUG]  [BUGGY]  if(input  ==  null)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
371	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
372	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
373	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	93	None	replace
374	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
375	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
376	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
377	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
378	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
379	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
380	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
381	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
382	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
383	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
384	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
385	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
386	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
387	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
388	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
389	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
390	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
391	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
392	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
393	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
394	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
395	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
396	[BUG]  [BUGGY]  if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
397	[BUG]  [BUGGY]  if(input.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
398	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
399	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
400	[BUG]  [BUGGY]  if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  input);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
401	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(!isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
402	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
403	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
404	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
405	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
406	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
407	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
408	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
409	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
410	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ==  null);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ==  null);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate  ==  null);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(!isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(!isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(!isLowerPrecedencePredicate);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate!=  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate!=  null);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate!=  null);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ==  false);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ==  false);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate  ==  false);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ==  n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate  ==  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate  ==  n);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
417	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
418	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
419	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
420	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
421	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
422	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
423	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
424	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
425	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
426	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
427	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
428	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
429	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
430	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
431	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(input.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedencePredicate);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
437	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
438	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
439	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
440	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
441	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
442	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
443	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
444	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
445	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
446	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
447	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
448	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
449	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
450	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
451	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
452	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
453	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
454	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
455	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
456	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
457	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
458	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(precedence,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	108	None	replace
459	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(precedence,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	108	None	replace
460	[BUG]  [BUGGY]  return  NodeUtil.has(precedence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(precedence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(precedence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(precedence,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	108	None	replace
461	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.has(precedence,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	108	None	replace
462	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
463	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
464	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
465	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
466	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
467	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
468	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
469	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
470	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
471	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
472	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
473	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
474	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
475	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
476	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
477	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
478	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
479	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
480	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
481	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
482	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
483	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
484	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
485	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
486	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
487	[BUG]  [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
488	[BUG]  [BUGGY]  if(previousence!=  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
489	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
490	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
491	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedence  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedence	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
492	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
493	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
494	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
495	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
496	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
497	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
498	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
499	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
500	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
501	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
502	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
503	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
504	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	122	None	replace
505	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	122	None	replace
506	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	122	None	replace
507	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	122	None	replace
508	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	122	None	replace
509	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
510	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
511	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
512	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
513	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
514	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
515	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FU	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
516	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
517	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
518	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
519	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
520	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
521	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
522	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
523	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
524	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
525	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
526	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
527	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  input.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  input.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  input.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
528	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getLastChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getLastChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getLastChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
529	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  getLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  getLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  getLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
530	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  node.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  node.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  node.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
531	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence;  }  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence;  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
532	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
533	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
534	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
536	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
537	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
538	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
539	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
540	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
541	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
542	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
543	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  input.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  input.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  input.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
544	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT);  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT);  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT);  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
547	[BUG]  [BUGGY]  if(predicence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(predicence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(predicence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
548	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(predicence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(predicence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(predicence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
549	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
550	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(predicence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(predicence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(predicence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
551	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
552	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
553	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
554	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
555	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
556	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
557	[BUG]  [BUGGY]  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
558	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EMPTY)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EMPTY)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EMPTY)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
559	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
560	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
561	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
562	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
563	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
564	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
565	[BUG]  [BUGGY]  if(input  ==  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
566	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
567	[BUG]  [BUGGY]  return  NodeUtil.has(n,  input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  input,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  input,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
568	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
569	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
570	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
571	[BUG]  [BUGGY]  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
572	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
573	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
574	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
575	[BUG]  [BUGGY]  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
576	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
577	[BUG]  [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
578	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
579	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
580	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
581	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
582	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
583	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
584	[BUG]  [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
585	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
586	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
587	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
588	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
589	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
590	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
591	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
592	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
593	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
594	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  IS_LOwerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  IS_LOwerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  IS_LOwerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
595	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
596	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
597	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
598	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
599	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
600	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
601	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
602	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
603	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
604	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
605	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
606	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
607	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
608	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
609	[BUG]  [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
610	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
611	[BUG]  [BUGGY]  if(input.getType()  ==  Token.NAME)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input.getType()  ==  Token.NAME)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input.getType()  ==  Token.NAME)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
612	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
613	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
614	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
615	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
616	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
617	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
618	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
619	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
620	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
621	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
622	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
623	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
624	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
625	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
626	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
627	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
628	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
629	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
630	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
631	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
632	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
633	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
634	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
635	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
636	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceIn  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceIn  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceIn	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
637	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
638	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
639	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
640	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
641	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
642	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
643	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRA  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRA	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
644	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
645	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
646	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
647	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
648	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
649	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
650	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
651	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
652	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
653	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
654	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
655	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
656	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
657	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
658	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedencePredicate);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
660	[BUG]  [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(input.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
661	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
664	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
665	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
666	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
667	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
668	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
669	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
670	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
671	[BUG]  [BUGGY]  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE;	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
672	[BUG]  [BUGGY]  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DONT_TRAVERSE_FUNCTIONS_PREDICATE;	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
673	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
674	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
675	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
676	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
677	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
678	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
679	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
680	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
681	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
682	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	18	None	replace
683	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	18	None	replace
684	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	18	None	replace
685	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	18	None	replace
686	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
687	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
688	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
689	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  IS_LowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  IS_LowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  IS_LowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
690	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
691	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
692	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
693	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
694	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
695	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
696	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
697	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
698	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
699	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
700	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
701	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
702	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
703	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
704	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
705	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
706	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
707	[BUG]  [BUGGY]  if(input  ==  null)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
708	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
709	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence);  }	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
710	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
711	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  OR_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
712	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
713	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  AND_PRECEDENCE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
714	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
715	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
716	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
717	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
718	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
719	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
720	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
721	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
722	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
723	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
724	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
725	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
726	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
727	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
728	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
729	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
730	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
731	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
732	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
733	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
734	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
735	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
736	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
737	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
738	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
739	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
740	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
741	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
742	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
743	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
744	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
745	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
746	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
747	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
748	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	81	None	replace
749	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
750	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
751	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
752	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
753	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
754	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence!=  DO  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence!=  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence!=  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
755	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
756	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
757	[BUG]  [BUGGY]  }  else  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
758	[BUG]  [BUGGY]  }  else  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
759	[BUG]  [BUGGY]  }  else  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
760	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
761	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
762	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
763	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
764	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
765	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
766	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
767	[BUG]  [BUGGY]  return  NodeUtil.has(input,  precedence,  IS_LowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  precedence,  IS_LowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  precedence,  IS_LowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
768	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n);  }	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
769	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
770	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
771	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
772	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
773	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
774	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
775	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(input,  n);	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
776	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
777	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(input);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.isLowerPrecedence(input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(input);	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
778	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input);  }	  return    NodeUtil.isLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	129	None	replace
779	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
780	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
781	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
782	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
783	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
784	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
785	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
786	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
787	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
788	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
789	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
790	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( "  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( "	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
791	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate!=  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate!=  false);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate!=  false);	  Preconditions.checkState(isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	152	None	replace
793	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
794	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
795	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	146	None	replace
796	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
797	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
798	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
799	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
800	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
801	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
802	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
803	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
804	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
805	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
806	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
807	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
808	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
809	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
810	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
811	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
812	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
813	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
814	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
815	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
816	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
817	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
818	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
819	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  >=  AND_PRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  >=  AND_PRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  >=  AND_PRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
820	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
821	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
822	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
823	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
824	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
825	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
826	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
827	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
828	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
829	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
830	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	148	None	replace
831	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
832	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  input))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
833	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
834	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  input);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  input);	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
835	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  input,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  input,  isLowerPrecedencePredicate);	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
836	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  IS_LowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  IS_LowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  IS_LowerPrecedencePredicate);	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
837	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
838	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
839	[BUG]  [BUGGY]  if(!previousence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!previousence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!previousence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
840	[BUG]  [BUGGY]  if(!previousence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!previousence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!previousence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
841	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
842	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
843	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
844	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
845	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	99	None	replace
846	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
847	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
848	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInExpression    	non-compiled	[CE]  ')'  expected	54	None	replace
849	[BUG]  [BUGGY]  if(n!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInExpression    	non-compiled	[CE]  ')'  expected	54	None	replace
850	[BUG]  [BUGGY]  if(n!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInExpression    	non-compiled	[CE]  ')'  expected	54	None	replace
851	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInExpression    	non-compiled	[CE]  ')'  expected	54	None	replace
852	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
853	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
854	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  IS_LowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  IS_LowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  IS_LowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
855	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
856	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
857	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
858	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInEx	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
859	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
860	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
861	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
862	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
863	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
864	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
865	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  AND_PRECEDENCE,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  AND_PRECEDENCE,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  AND_PRECEDENCE,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
866	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
867	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
868	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
869	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  input);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
870	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  OR_PRECEDENCE,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  OR_PRECEDENCE,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  OR_PRECEDENCE,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
871	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
872	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
873	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
874	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
875	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
876	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
877	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
878	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
879	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
880	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
881	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
882	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
883	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
884	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
885	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
886	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
887	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
888	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
889	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
890	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLo  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLo	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	72	None	replace
891	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
892	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
893	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
894	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
895	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
896	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
897	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
898	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
899	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
900	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  precedence  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  precedence  -  1);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  precedence  -  1);	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
901	[BUG]  [BUGGY]  if(previousence  ==  n)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  n)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  n)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
902	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence)+  1;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence)+  1;  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence)+  1;	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
903	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
904	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
905	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
906	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
907	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
908	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
909	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
910	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
911	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
912	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
913	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
914	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
915	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
916	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
917	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceIn  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceIn  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceIn	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
918	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
919	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
920	[BUG]  [BUGGY]  return  NodeUtil.has(input,  n,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  n,  precedence);	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
921	[BUG]  [BUGGY]  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
922	[BUG]  [BUGGY]  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	86	None	replace
923	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
924	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
925	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
926	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
927	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
928	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
929	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
930	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
931	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
932	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
933	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
934	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
935	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  n);	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
936	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
937	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	63	None	replace
938	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
939	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
940	[BUG]  [BUGGY]  return  NodeUtil.has(input,  n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  n,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  n,  isLowerPrecedencePredicate);	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
941	[BUG]  [BUGGY]  return  NodeUtil.has(input,  n,  IS_LowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  n,  IS_LowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  n,  IS_LowerPrecedencePredicate);	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
942	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
943	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
944	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
945	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
946	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
947	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
948	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
949	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  hasLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  hasLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  hasLowerPrecedenceInExpression(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
950	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
951	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
952	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
953	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
954	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
955	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
956	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
957	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
958	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
959	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
960	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
961	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
962	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
963	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
964	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
965	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
966	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
967	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
968	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
969	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
970	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
971	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
972	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
973	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
974	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVALID_REGULAR_E  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVALID_REGULAR_E  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVALID_REGULAR_E	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
975	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVALID_REGULAR_E  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVALID_REGULAR_E  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVALID_REGULAR_E	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
976	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRES  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRES  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRES	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
977	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRES  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRES  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  INVALID_REGULAR_EXPRES	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
978	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
979	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
980	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
981	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
982	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
983	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
984	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
985	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
986	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
987	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
988	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
989	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
990	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
991	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
992	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
993	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
994	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
995	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	126	None	replace
996	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
997	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
998	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
999	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
1000	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
1001	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  n);	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
1002	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
1003	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
1004	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
1005	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERS  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
1006	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
1007	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
1008	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
1009	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(!isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
1010	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
1011	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
1012	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1013	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1014	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1015	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
1016	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
1017	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1018	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1019	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1020	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1021	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1022	[BUG]  [BUGGY]  return  NodeUtil.has(input,  precedence,  ISLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  precedence,  ISLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  precedence,  ISLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    ISLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	88	None	replace
1023	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1024	[BUG]  [BUGGY]  if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1025	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedencePredicate);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
1026	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
1027	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	111	None	replace
1028	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
1029	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
1030	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
1031	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  n);	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
1032	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
1033	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
1034	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1035	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1036	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1037	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
1038	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
1039	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
1040	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
1041	[BUG]  [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1042	[BUG]  [BUGGY]  if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1043	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
1044	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    input);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
1045	[BUG]  [BUGGY]  if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	116	None	replace
1046	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  final  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  final  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  final  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	116	None	replace
1047	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
1048	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
1049	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
1050	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
1051	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
1052	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence)||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
1053	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  input))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  input))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  input))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
1054	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1055	[BUG]  [BUGGY]  parent!=  null  &&!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  parent!=  null  &&!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	parent!=  null  &&!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1056	[BUG]  [BUGGY]  parent  ==  null  &&!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  parent  ==  null  &&!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	parent  ==  null  &&!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1057	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1058	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1059	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedenceInExpression);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedenceInExpression);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedenceInExpression);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1060	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1061	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1062	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1063	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1064	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1065	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1066	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1067	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
1068	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
1069	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERS  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERS	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	93	None	replace
1070	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERS  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERS	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	93	None	replace
1071	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1072	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1073	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1074	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1075	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1076	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1077	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1078	[BUG]  [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1079	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1080	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1081	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasFinally(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
1082	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(isLowerPrecedencePredicate,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasFinally(isLowerPrecedencePredicate,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(isLowerPrecedencePredicate,  n);	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
1083	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
1084	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
1085	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
1086	[BUG]  [BUGGY]  return  NodeUtil.has(precedence,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(precedence,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(precedence,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(precedence,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	108	None	replace
1087	[BUG]  [BUGGY]  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  n);	  return    NodeUtil.has(precedence,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	108	None	replace
1088	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1089	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1090	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1091	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  >>  DO	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1092	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLo  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLo	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1093	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
1094	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
1095	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
1096	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
1097	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
1098	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
1099	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
1100	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
1101	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
1102	[BUG]  [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  return  false;  }	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  ')'  expected	149	None	replace
1103	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
1104	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
1105	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
1106	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
1107	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
1108	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
1109	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
1110	[BUG]  [BUGGY]  Preconditions.checkArgument(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
1111	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
1112	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1113	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1114	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1115	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1116	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	122	None	replace
1117	[BUG]  [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.NAME);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(input.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
1118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
1119	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  input);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  input);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
1120	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
1121	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
1122	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
1123	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
1124	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
1125	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
1126	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
1127	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
1128	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
1129	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
1130	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
1131	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
1132	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRA  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRA	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
1133	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
1134	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
1135	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  input);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
1136	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
1137	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
1138	[BUG]  [BUGGY]  Predicate  predicate  =  getLowerPrecedencePredicate(n);  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  getLowerPrecedencePredicate(n);  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  getLowerPrecedencePredicate(n);  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
1139	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedencePredicate);	  Preconditions.checkState(isLowerPrecedenceInExpression(n,    precedence));    	non-compiled	[CE]  ')'  expected	134	None	replace
1140	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  input);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
1141	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
1142	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
1143	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1144	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1145	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1146	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1147	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
1148	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
1149	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
1150	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1151	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1152	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1153	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1154	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1155	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
1156	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  isLowerPrecedencePredicate);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
1157	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  input,  precedence);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  input,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  input,  precedence);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
1158	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  input);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  input);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
1159	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  new  FoldArrayAction());	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
1160	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
1161	[BUG]  [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence!=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
1162	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
1163	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
1164	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
1165	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1166	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1167	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1168	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1169	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1170	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1171	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1172	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1173	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence);  }	  return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	18	None	replace
1174	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedence);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedence);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
1175	[BUG]  [BUGGY]  if(!isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
1176	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
1177	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(input,  precedence);	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
1178	[BUG]  [BUGGY]  if(previousence  ==  n)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  n)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  n)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
1179	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_PREDICATE  =  isLowerPrecedenceIn  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_PREDICATE  =  isLowerPrecedenceIn  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_PREDICATE  =  isLowerPrecedenceIn	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
1180	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedenceIn  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedenceIn  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedenceIn	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
1181	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1182	[BUG]  [BUGGY]  if(previousence  >=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1183	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1184	[BUG]  [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1185	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1186	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1187	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
1188	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isPRECEDENCE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
1189	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
1190	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
1191	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  precedence,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
1192	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  ISLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
1193	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  input);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence,  input);	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
1194	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedencePredicate);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
1195	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  isLowerPrecedencePredicate);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
1196	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
1197	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1198	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1199	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1200	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1201	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1202	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1203	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedencePredicate;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedencePredicate;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedencePredicate;  }	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1204	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1205	[BUG]  [BUGGY]  return  NodeUtil.has(input,  n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  n);	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1206	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedence  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  INVALID_REGULAR_EXPRESSION_FLAGS  =  isLowerPrecedence	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1207	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
1208	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
1209	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
1210	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
1211	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
1212	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedence)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
1213	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1214	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1215	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1216	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERS  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1217	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1218	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERS  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1219	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1220	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
1221	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
1222	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
1223	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
1224	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
1225	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
1226	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
1227	[BUG]  [BUGGY]  if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  input);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
1228	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  isLowerPrecedencePredicate);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
1229	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  input);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  input);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
1230	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n,  precedence);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    n);    	non-compiled	[CE]  ')'  expected	106	None	replace
1231	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLo  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLo	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
1232	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  previousence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  previousence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  previousence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
1233	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
1234	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  input);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
1235	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
1236	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
1237	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
1238	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
1239	[BUG]  [BUGGY]  if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    false;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
1240	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
1241	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	26	None	replace
1242	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  	34	None	replace
1243	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  	34	None	replace
1244	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	34	None	replace
1245	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1246	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1247	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1248	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	42	None	replace
1249	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1250	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1251	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1252	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	36	None	replace
1253	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    IS_LowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
1254	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  input.getString());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  input.getString());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  input.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
1255	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  input.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  input.getFirstChild());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  input.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	153	None	replace
1256	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
1257	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	138	None	replace
1258	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
1259	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
1260	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
1261	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null  ||  input.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
1262	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	79	None	replace
1263	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1264	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedence  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedence	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1265	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedenceIn  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedenceIn  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  isLowerPrecedenceIn	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1266	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1267	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  true;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	25	None	replace
1268	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
1269	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	61	None	replace
1270	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
1271	[BUG]  [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	13	None	replace
1272	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
1273	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
1274	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1275	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1276	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1277	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  	137	None	replace
1278	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS	  if(!isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
1279	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS	  if(!isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	48	None	replace
1280	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS	  if(!isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
1281	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
1282	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
1283	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
1284	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  return  false;  }	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	119	None	replace
1285	[BUG]  [BUGGY]  return  NodeUtil.precedence(n,  isLowerPrecedencePredicate);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.precedence(n,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.precedence(n,  isLowerPrecedencePredicate);	  return    NodeUtil.isLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  	119	None	replace
1286	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
1287	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
1288	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
1289	[BUG]  [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
1290	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	60	None	replace
1291	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
1292	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  	117	None	replace
1293	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	117	None	replace
1294	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    precedence);    	non-compiled	[CE]  	117	None	replace
1295	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  &&  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	10	None	replace
1296	[BUG]  [BUGGY]  if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	10	None	replace
1297	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
1298	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
1299	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	35	None	replace
1300	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	35	None	replace
1301	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_	  if(isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	35	None	replace
1302	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE,  isLowerPrecedencePredicate);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE,  isLowerPrecedencePredicate);	  return    NodeUtil.hasValue(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    	non-compiled	[CE]  	149	None	replace
1303	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
1304	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
1305	[BUG]  [BUGGY]  if(doNT_TRAVERSE_FUNCTIONS_PREDICATE!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(doNT_TRAVERSE_FUNCTIONS_PREDICATE!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(doNT_TRAVERSE_FUNCTIONS_PREDICATE!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
1306	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  else  {  doNT_TRAVERSE_FU  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	30	None	replace
1307	[BUG]  [BUGGY]  if(doNT_TRAVERSE_FUNCTIONS_PREDICATE  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(doNT_TRAVERSE_FUNCTIONS_PREDICATE  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(doNT_TRAVERSE_FUNCTIONS_PREDICATE  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	30	None	replace
1308	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	30	None	replace
1309	[BUG]  [BUGGY]  if(doNT_TRAVERSE_FUNCTIONS_PREDICATE!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(doNT_TRAVERSE_FUNCTIONS_PREDICATE!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(doNT_TRAVERSE_FUNCTIONS_PREDICATE!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERS	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	30	None	replace
1310	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	62	None	replace
1311	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	62	None	replace
1312	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERS  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERS	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	73	None	replace
1313	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	73	None	replace
1314	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  	122	None	replace
1315	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  	122	None	replace
1316	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  true;  }	  return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  	122	None	replace
1317	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  	72	None	replace
1318	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    precedence);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
1319	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	131	None	replace
1320	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  isLowerPrecedencePredicate);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(previousence,  n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	131	None	replace
1321	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  OR_PRECEDENCE);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  OR_PRECEDENCE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  OR_PRECEDENCE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(previousence,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  	131	None	replace
1322	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression  ||!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression  ||!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression  ||!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  	7	None	replace
1323	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
1324	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }	  if(!isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  	7	None	replace
1325	[BUG]  [BUGGY]  Predicate  predicate  =  input.getParent();  if(predicate!=  null)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getParent();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getParent();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
1326	[BUG]  [BUGGY]  Predicate  predicate  =  input.getFirstChild();  if(predicate!=  null)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getFirstChild();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getFirstChild();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
1327	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	125	None	replace
1328	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  	126	None	replace
1329	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  	126	None	replace
1330	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  	126	None	replace
1331	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  	126	None	replace
1332	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  +  1);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  	1	None	replace
1333	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  	31	None	replace
1334	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVAL  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVAL  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  INVAL	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  	31	None	replace
1335	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_E  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_E  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_E	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  	31	None	replace
1336	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGU  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGU	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    INVALID_REGULAR_EXPRESSION_FLAGS    	non-compiled	[CE]  ')'  expected	31	None	replace
1337	[BUG]  [BUGGY]  if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	11	None	replace
1338	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  	11	None	replace
1339	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  	95	None	replace
1340	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  	95	None	replace
1341	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  	95	None	replace
1342	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  	95	None	replace
1343	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1344	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1345	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	139	None	replace
1346	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
1347	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
1348	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
1349	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
1350	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
1351	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
1352	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
1353	[BUG]  [BUGGY]  Predicate  predicate  =  input.getPrevious();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getPrevious();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getPrevious();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
1354	[BUG]  [BUGGY]  Predicate  predicate  =  getLowerPrecedencePredicate();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  getLowerPrecedencePredicate();  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  getLowerPrecedencePredicate();  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
1355	[BUG]  [BUGGY]  Predicate  predicate  =  isLowerPrecedence;  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  isLowerPrecedence;  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  isLowerPrecedence;  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
1356	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedence;  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedence;  if(predicate!=  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedence;  if(predicate!=  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	114	None	replace
1357	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
1358	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
1359	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  new  Predicate  <  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  new  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  new  Predicate  <	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	124	None	replace
1360	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
1361	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	83	None	replace
1362	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
1363	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isL	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
1364	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLo	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	51	None	replace
1365	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
1366	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
1367	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(!isLowerPrecedenceInExpression)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	37	None	replace
1368	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  INVALID_REGULAR_EXPRESSION_FLAGS))  {  return  NodeUtil.hasLowerPrecedence(  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  INVALID_REGULAR_EXPRESSION_FLAGS))  {  return  NodeUtil.hasLowerPrecedence(  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  INVALID_REGULAR_EXPRESSION_FLAGS))  {  return  NodeUtil.hasLowerPrecedence(	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
1369	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  INVALID_REGULAR_EXPRESSION_FLAGS))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  INVALID_REGULAR_EXPRESSION_FLAGS))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence)&&  isLowerPrecedenceInExpression(n,  INVALID_REGULAR_EXPRESSION_FLAGS))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
1370	[BUG]  [BUGGY]  Preconditions.checkArgument(isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(isLowerPrecedenceInExpression(n,  precedence));	  if(isLowerPrecedenceInExpression(n,    precedence))    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
1371	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
1372	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
1373	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
1374	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	142	None	replace
1375	[BUG]  [BUGGY]  if(input!=  null)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
1376	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
1377	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
1378	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1379	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1380	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1381	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    <    Node>    input    =    input.get    	non-compiled	[CE]  ')'  expected	132	None	replace
1382	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
1383	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1384	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1385	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
1386	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
1387	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
1388	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  predicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  predicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  predicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
1389	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
1390	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  input);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  input);  }	  return    NodeUtil.hasLowerPrecedence(n,    input);    	non-compiled	[CE]  ')'  expected	127	None	replace
1391	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1392	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1393	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1394	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1395	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1396	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    else    {    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	32	None	replace
1397	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
1398	[BUG]  [BUGGY]  previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  &&  NodeUtil.hasLowerPrecedence(n,  precedence);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  &&  NodeUtil.hasLowerPrecedence(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  &&  NodeUtil.hasLowerPrecedence(n,  precedence);	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
1399	[BUG]  [BUGGY]  previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  &&  PredicateUtil.hasLowerPrecedence(n,  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  &&  PredicateUtil.hasLowerPrecedence(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  &&  PredicateUtil.hasLowerPrecedence(n,  precedence);	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
1400	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
1401	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
1402	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
1403	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
1404	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    Predicate    	non-compiled	[CE]  ')'  expected	24	None	replace
1405	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	100	None	replace
1406	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression  ||  isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
1407	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	91	None	replace
1408	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  doNT_TRAVERSE	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
1409	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedence	  if(previousence    ==    INVALID_REGULAR_EXPRESSION_FLAGS)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    isLowerPrecedenceInEx    	non-compiled	[CE]  ')'  expected	74	None	replace
1410	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
1411	[BUG]  [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedence)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedence);    	non-compiled	[CE]  ')'  expected	135	None	replace
1412	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  input.getFirstChild()  ==  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  input.getFirstChild()  ==  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  input.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
1413	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	110	None	replace
1414	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1415	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    ISLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1416	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  return  false;  }	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
1417	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate)&&  isLowerPrecedenceInExpression(n,  input);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate)&&  isLowerPrecedenceInExpression(n,  input);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate)&&  isLowerPrecedenceInExpression(n,  input);	  return    NodeUtil.hasValue(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	87	None	replace
1418	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1419	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1420	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
1421	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
1422	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	123	None	replace
1423	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
1424	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
1425	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  input.getFirstChild()  ==  n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  input.getFirstChild()  ==  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  input.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
1426	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getFirstChild());  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	155	None	replace
1427	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
1428	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
1429	[BUG]  [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input  ==  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
1430	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(input!=    null)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	39	None	replace
1431	[BUG]  [BUGGY]  Predicate  predicate  =  input.getFirstChild();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getFirstChild();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getFirstChild();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1432	[BUG]  [BUGGY]  Predicate  predicate  =  input.getParent();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getParent();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getParent();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1433	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
1434	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
1435	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
1436	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedence  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedence	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
1437	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA	  if(isLowerPrecedencePredicate)    {    if(previousence    >=    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
1438	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
1439	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(input,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
1440	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
1441	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
1442	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1443	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1444	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1445	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(n,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasFinally(n,  precedence,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(n,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	18	None	replace
1446	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
1447	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
1448	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	98	None	replace
1449	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  IS_LowerPrecedenceSyntax);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  PredicateTraversal.traverse(compiler,  n,  IS_LowerPrecedenceSyntax);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  IS_LowerPrecedenceSyntax);	  PredicateTraversal.traverse(compiler,    n,    precedence);    	non-compiled	[CE]  ')'  expected	156	None	replace
1450	[BUG]  [BUGGY]  }  else  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	144	None	replace
1451	[BUG]  [BUGGY]  }  else  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input.getType()  ==  Token.EXPR_RESULT)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    Il    	non-compiled	[CE]  ')'  expected	144	None	replace
1452	[BUG]  [BUGGY]  }  else  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
1453	[BUG]  [BUGGY]  }  else  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(previousence  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
1454	[BUG]  [BUGGY]  }  else  if(input.getType()  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  }  else  if(input.getType()  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(input.getType()  ==  precedence)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  }    else    if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	145	None	replace
1455	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	85	None	replace
1456	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
1457	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
1458	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
1459	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    Predicate    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE    =    input;    return    isLowerPrecedence    	non-compiled	[CE]  ')'  expected	151	None	replace
1460	[BUG]  [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  precedence)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
1461	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
1462	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(!isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
1463	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	93	None	replace
1464	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
1465	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
1466	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
1467	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(predicate,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    predicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	147	None	replace
1468	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  input.getFirstChild()  ==  n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  input.getFirstChild()  ==  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  input.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
1469	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
1470	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	154	None	replace
1471	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
1472	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  n,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
1473	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  doNT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
1474	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n)||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
1475	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1476	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1477	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInEx	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1478	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	150	None	replace
1479	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1480	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1481	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1482	[BUG]  [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredic  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredic  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredic	  if(!isLowerPrecedenceInExpression(n,    precedence))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	92	None	replace
1483	[BUG]  [BUGGY]  return  NodeUtil.precedence(n,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.precedence(n,  precedence,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.precedence(n,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    ISLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	88	None	replace
1484	[BUG]  [BUGGY]  return  NodeUtil.precedence(n,  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.precedence(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.precedence(n,  precedence);	  return    NodeUtil.has(n,    precedence,    ISLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	88	None	replace
1485	[BUG]  [BUGGY]  return  NodeUtil.has(previousence,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(previousence,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(previousence,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1486	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  input,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  input,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1487	[BUG]  [BUGGY]  return  NodeUtil.hasPrecedence(input,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasPrecedence(input,  n);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasPrecedence(input,  n);	  return    NodeUtil.has(n,    input,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	107	None	replace
1488	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doLowerPrecedenceInExpression(n,  precedence	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
1489	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  doLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
1490	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
1491	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  doLowerPrecedenceInEx  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  doLowerPrecedenceInEx	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
1492	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  doLowerPrecedenceInExpression(n,  precedence	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
1493	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    doLowerPrecedenceInExpression(n,    precedence    	non-compiled	[CE]  ')'  expected	20	None	replace
1494	[BUG]  [BUGGY]  return  NodeUtil.has(previousence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.has(previousence,  isLowerPrecedencePredicate);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(previousence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    IS_LowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	90	None	replace
1495	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	89	None	replace
1496	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
1497	[BUG]  [BUGGY]  Predicate  predicate  =  input.getParent();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getParent();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getParent();  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1498	[BUG]  [BUGGY]  Predicate  predicate  =  input.getFirstChild();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getFirstChild();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getFirstChild();  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    input.getNext();    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1499	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.precedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.precedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.precedence(n,  precedence);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
1500	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
1501	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1502	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRA	  if(isLowerPrecedencePredicate)    {    if(previousence    <    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
1503	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    doNT_TRAVERSE_FUNCTIONS_PREDICATE    =    true;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
1504	[BUG]  [BUGGY]  Predicate  predicate  =  input.getPrevious();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getPrevious();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getPrevious();  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
1505	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  predicate;  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  predicate;  if(predicate  ==  null)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  predicate;  if(predicate  ==  null)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
1506	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1507	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1508	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    return    false;    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1509	[BUG]  [BUGGY]  return  NodeUtil.hasPrecedence(input,  n,  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasPrecedence(input,  n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasPrecedence(input,  n,  precedence);	  return    NodeUtil.has(input,    n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	43	None	replace
1510	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
1511	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
1512	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
1513	[BUG]  [BUGGY]  if(input!=  null)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
1514	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
1515	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedence)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
1516	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDIC	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1517	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1518	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
1519	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  }	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
1520	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate    ||    isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    	non-compiled	[CE]  ')'  expected	143	None	replace
1521	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence;  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.hasLowerPrecedence(n,    precedence);    }    else    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	136	None	replace
1522	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence)||  PredicateUtil.hasLowerPrecedence(n,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence)||  PredicateUtil.hasLowerPrecedence(n,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence)||  PredicateUtil.hasLowerPrecedence(n,  precedence);	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
1523	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence)||  PredicateUtil.hasLowerPrecedence(n,  precedence  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence)||  PredicateUtil.hasLowerPrecedence(n,  precedence  -  1);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence)||  PredicateUtil.hasLowerPrecedence(n,  precedence  -  1);	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
1524	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	130	None	replace
1525	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence  +  1);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
1526	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  previousence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  previousence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  previousence);  }	  if(isLowerPrecedenceInExpression)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	118	None	replace
1527	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
1528	[BUG]  [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRA	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
1529	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FU	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
1530	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PRED)  {  if(!isLowerPrecedenceInExpression(n))  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE	  if(!isLowerPrecedenceInExpression(n))    {    if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PRED    	non-compiled	[CE]  ')'  expected	96	None	replace
1531	[BUG]  [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  return  NodeUtil.hasLowerPrecedence(input,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(input,    precedence);    	non-compiled	[CE]  ')'  expected	128	None	replace
1532	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
1533	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n))  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
1534	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    if(!isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
1535	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(n.getType()  ==  Token.NAME)  {  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return	  if(isLowerPrecedencePredicate)    {    Predicate    <    Node>    input    =    input.getNext();    if(input!=    null    ||    precedence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    isLowerPrecedenceInExpression    	non-compiled	[CE]  ')'  expected	54	None	replace
1536	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
1537	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()!=  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
1538	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EMPTY)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EMPTY)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EMPTY)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
1539	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  for(Node  n  :  n.getFirstChild().getNext())  {  return	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
1540	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
1541	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_	  if(isLowerPrecedencePredicate)    {    if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
1542	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  Predicate  <  Node>  input  =  input.get	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
1543	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  inVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  inVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  inVALID_REGULAR_EXPRESSION_FLAGS);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	84	None	replace
1544	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null  ||  isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
1545	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()!=  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
1546	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION  ||  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION  ||  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION  ||  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
1547	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.FUNCTION)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
1548	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  return  false;  }	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
1549	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS,  precedence);	  return    NodeUtil.hasFinally(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	141	None	replace
1550	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1551	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1552	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1553	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1554	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(previousence    ==    DONT_TRAVERSE_FUNCTIONS_PREDICATE)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	19	None	replace
1555	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null  &&  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null  &&  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null  &&  isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
1556	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.EXPR_RESULT)    {    if(!isLowerPrecedenceInExpression(n,    precedence))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
1557	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  predicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  predicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  predicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1558	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
1559	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(previousence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
1560	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
1561	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  +  1);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  +  1);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence  +  1);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
1562	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getParent())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getParent())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getParent())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  if(isLowerPrecedencePredicate)    {    for(Node    n    :    n.getFirstChild().getNext())    {    return    isLowerPrecedenceInExpression(n,    precedence);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
1563	[BUG]  [BUGGY]  Predicate  predicate  =  input.getPrevious();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  Predicate  predicate  =  input.getPrevious();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Predicate  predicate  =  input.getPrevious();  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	111	None	replace
1564	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  predicate;  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  predicate;  if(predicate  ==  null)  {  return  false;  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  predicate;  if(predicate  ==  null)  {  return  false;  }	  if(isLowerPrecedencePredicate)    {    Predicate    predicate    =    isLowerPrecedencePredicate;    if(predicate    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	111	None	replace
1565	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()!=  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()!=  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1566	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate.getFirstChild()!=  input)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate.getFirstChild()!=  input)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.NAME  &&  isLowerPrecedencePredicate.getFirstChild()!=  input)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1567	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME  ||  isLowerPrecedencePredicate.getType()  ==  Token.VAR)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME  ||  isLowerPrecedencePredicate.getType()  ==  Token.VAR)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.NAME  ||  isLowerPrecedencePredicate.getType()  ==  Token.VAR)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1568	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate.getType()    ==    Token.NAME)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1569	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate!=  null)  {  return  NodeUtil.hasLowerPrecedence(n,  predicate);  }	  if(isLowerPrecedencePredicate    ==    null)    {    return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
1570	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
1571	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
1572	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  input);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  input);  }  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(input,    ISLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	109	None	replace
1573	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
1574	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };      [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]      DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  ||  precedence  >  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.isLowerPrecedence(n,    precedence);    }    else    {    	non-compiled	[CE]  ')'  expected	121	None	replace
