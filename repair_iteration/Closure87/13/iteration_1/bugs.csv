bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
2	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
3	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
4	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
5	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
6	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
7	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]    [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	  	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
8	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
9	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
10	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
11	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
12	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  [BUGGY]  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  	non-compiled	[CE]  ')'  expected	25	None	replace
