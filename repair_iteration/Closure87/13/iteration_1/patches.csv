bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
2	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
3	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
5	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.FUNCTION)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
6	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.NAME)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
7	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
8	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
9	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
10	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
11	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  isLowerPrecedencePredicate);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
12	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
13	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
14	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
15	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
16	[BUG]  [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
17	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
18	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
19	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
20	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  doLowerPrecedenceInExpression(n,  precedence	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
21	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
22	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
24	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
25	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
26	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
27	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
28	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  ISLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
29	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
30	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
31	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  INVALID_REGULAR_EXPRESSION_FLAGS	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
32	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
33	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
34	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
35	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
36	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
37	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
38	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
39	[BUG]  [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(input!=  null)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
40	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
41	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
42	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
43	[BUG]  [BUGGY]  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
44	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  isLowerPrecedencePredicate);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
45	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  IS_LowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
46	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
47	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
48	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
49	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
50	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
51	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInEx  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInEx	      	non-compiled	[CE]  ')'  expected	7	None	replace
52	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
53	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
54	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInExpression  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInExpression  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  <  Node>  input  =  input.getNext();  if(input!=  null  ||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  isLowerPrecedenceInExpression	      	non-compiled	[CE]  ')'  expected	7	None	replace
55	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
56	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate.getType()  ==  Token.EXPR_RESULT)  {  if(!isLowerPrecedenceInExpression(n,  precedence))  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
57	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  for(Node  n  :  n.getFirstChild().getNext())  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
58	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
59	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
60	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
61	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
62	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
63	[BUG]  [BUGGY]  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
64	[BUG]  [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
65	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
66	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
67	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
68	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(previousence  >=  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
69	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(!isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
70	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
71	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
72	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
73	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  true;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
74	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  isLowerPrecedenceInEx	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
75	[BUG]  [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  INVALID_REGULAR_EXPRESSION_FLAGS)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  doNT_TRAVERSE_FUNCTIONS_PREDICATE  =  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
76	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression(n,  precedence))  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
77	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
78	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
79	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
80	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
81	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  isLowerPrecedencePredicate);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
82	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  precedence,  input);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
83	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
84	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
85	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	6	None	replace
86	[BUG]  [BUGGY]  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
87	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
88	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  ISLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
89	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence,  isLowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
90	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  IS_LowerPrecedencePredicate);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
91	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
92	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n,  precedence))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
93	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
94	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
95	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
96	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(!isLowerPrecedenceInExpression(n))  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PRED	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
97	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ==  null)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  }	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
98	[BUG]  [BUGGY]  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
99	[BUG]  [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
100	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
101	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
102	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
103	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
104	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  INVALID_REGULAR_EXPRESSION_FLAGS);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
105	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  precedence);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
106	[BUG]  [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(input,  isLowerPrecedencePredicate,  n);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
107	[BUG]  [BUGGY]  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
108	[BUG]  [BUGGY]  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.has(precedence,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
109	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
111	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
112	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
113	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate  ==  null)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
114	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  isLowerPrecedencePredicate;  if(predicate!=  null)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
115	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate  ==  null)  {  return  true;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
116	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  Predicate  predicate  =  input.getNext();  if(predicate!=  null)  {  return  false;  }	      	non-compiled	[CE]  ')'  expected	7	None	replace
117	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  precedence);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  precedence);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(n,  precedence);	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
118	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
119	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(input,  isLowerPrecedencePredicate);	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
120	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
121	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
122	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
123	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  ISLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
124	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  isLowerPrecedencePredicate);	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
125	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedenceInExpression)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
126	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
127	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  input);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  input);	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
128	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  precedence);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(input,  precedence);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(input,  precedence);	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
129	[BUG]  [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  input);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.isLowerPrecedence(n,  input);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.isLowerPrecedence(n,  input);	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
130	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  precedence  -  1);	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
131	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(previousence,  n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
132	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(input,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  Predicate  <  Node>  input  =  input.get	  return    NodeUtil.has(input,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	2	None	replace
133	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence));	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
135	[BUG]  [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasLowerPrecedence(n,  isLowerPrecedence);	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
136	[BUG]  [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(previousence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    precedence);    	non-compiled	[CE]  ')'  expected	8	None	replace
137	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
138	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  return  false;  }	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
139	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence	  return    NodeUtil.hasLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	11	None	replace
140	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.hasValue(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  return  false;  }	  return    NodeUtil.hasValue(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	9	None	replace
141	[BUG]  [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasFinally(n,  isLowerPrecedencePredicate,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.has(n,    isLowerPrecedencePredicate,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	10	None	replace
142	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
143	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate  ||  isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
144	[BUG]  [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  Il	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
145	[BUG]  [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  }  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	}  else  if(isLowerPrecedencePredicate)  {  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
146	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  input,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
147	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.has(n,  predicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }	  if(isLowerPrecedencePredicate)    {    return    NodeUtil.has(n,    isLowerPrecedencePredicate,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
148	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
149	[BUG]  [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	return  NodeUtil.hasValue(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);	  return    NodeUtil.has(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	4	None	replace
150	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  return  isLowerPrecedenceInExpression(n,  precedence);  }	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
151	[BUG]  [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	if(isLowerPrecedencePredicate)  {  return  NodeUtil.isLowerPrecedence(n,  precedence);  }  else  {  Predicate  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE  =  input;  return  isLowerPrecedence	  return    NodeUtil.isLowerPrecedence(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	12	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  Preconditions.checkState(isLowerPrecedencePredicate);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(isLowerPrecedencePredicate);	      	non-compiled	[CE]  ')'  expected	7	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ')'  expected	7	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ')'  expected	7	None	replace
156	[BUG]  [BUGGY]  PredicateTraversal.traverse(compiler,  n,  precedence);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {  Predicate<Node>  isLowerPrecedencePredicate  =  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };    [BUGGY]  PredicateTraversal.traverse(compiler,  n,  precedence);  [BUGGY]    DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	637	638	1	replace	PredicateTraversal.traverse(compiler,  n,  precedence);	      	non-compiled	[CE]  ')'  expected	7	None	replace
