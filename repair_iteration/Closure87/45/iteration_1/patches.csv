bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BLOCK)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.STRING)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild();  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Node  maybeExpr  =  n.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Node  n  =  n.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Node  maybeExpr  =  n.getLastChild();  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Node  maybeExpr  =  n.getLastChild();	      	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Node  n  =  n.getLastChild();	      	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Node  maybeExpr  =  n.getNext();  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Node  maybeExpr  =  n.getNext();	      	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getParent();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Node  maybeExpr  =  n.getParent();  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Node  maybeExpr  =  n.getParent();	      	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NAME)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
27	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
29	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
30	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CATCH)  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CATCH)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CATCH)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
31	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  if  (n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NEW)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NEW)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NEW)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NEW)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NEW)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NEW)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NEW  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.NEW  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.NEW  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NEW)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NEW)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NEW)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NEW)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NEW)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NEW)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NEW)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NEW)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NEW)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.isExtern())  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.isExtern())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.isExtern())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.BOOLEAN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.BOOLEAN)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.BOOLEAN)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BOOLEAN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BOOLEAN)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BOOLEAN)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.BOOLEAN)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.BOOLEAN)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.BOOLEAN)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BOOLEAN  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BOOLEAN  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BOOLEAN  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
49	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BOOLEAN)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BOOLEAN)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BOOLEAN)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
50	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CALL)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CALL)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CALL)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	3	None	replace
51	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	3	None	replace
52	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CALL)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CALL)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CALL)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	3	None	replace
53	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.SCRIPT)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.SCRIPT)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  if(n!=  null  &&  n.getType()!=  Token.BLOCK)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n!=  null  &&  n.getType()!=  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n!=  null  &&  n.getType()!=  Token.BLOCK)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.GETPROP)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLACK)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLACK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLACK)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  if  (n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CALL)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CALL)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CALL)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	3	None	replace
64	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
66	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLACK  ||  n.getType()  ==  Token.NEW)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLACK  ||  n.getType()  ==  Token.NEW)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLACK  ||  n.getType()  ==  Token.NEW)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NEW)    {    	non-compiled	[CE]  	6	None	replace
67	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if  (n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if  (n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	2	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	      	non-compiled	[CE]  	4	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  	4	None	replace
70	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.isExpressBlock())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.isExpressBlock())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.isExpressBlock())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
72	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
73	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.SCRIPT)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.SCRIPT)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.SCRIPT)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  	8	None	replace
74	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CATCH)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CATCH)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CATCH)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
75	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	4	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	4	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	4	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	Preconditions.checkState(n.hasOneChild());	      	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP)  {	  if    (n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FOR)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FOR)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FOR)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
82	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getChildCount()  >  1)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  &&  n.getChildCount()  >  1)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  &&  n.getChildCount()  >  1)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETPROP)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETPROP)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETPROP)  {	  if(n.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
85	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.CALL  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
86	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.FOR  &&  n.hasChildren())  {	  if(n.getType()    ==    Token.BLOCK    ||    n.hasChildren())    {    	non-compiled	[CE]  	7	None	replace
87	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.BOOLEAN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {    [BUGGY]  if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.BOOLEAN)  {  [BUGGY]    if  (n.hasOneChild())  {  Node  maybeExpr  =  n.getFirstChild();          [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	520	520	1	replace	if(n.getType()  ==  Token.LABEL  ||  n.getType()  ==  Token.BOOLEAN)  {	  if(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BOOLEAN)    {    	non-compiled	[CE]  	11	None	replace
