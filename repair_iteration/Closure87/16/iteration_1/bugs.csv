bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  parent.replaceChild(n,  newNode,  num);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
2	[BUG]  [BUGGY]  newNode.removeChild(parent);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  newNode.removeChild(parent);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeChild(parent);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
3	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  false);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  parent.replaceChild(n,  newNode,  false);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  false);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
4	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  this);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  parent.replaceChild(n,  newNode,  this);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  this);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
5	[BUG]  [BUGGY]    [CE]  [FE]            AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]    [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	  	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
6	[BUG]  [BUGGY]  parent.removeChild(newNode);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  parent.removeChild(newNode);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.removeChild(newNode);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
7	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  NodeUtil.removeChild(parent,  newNode);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  newNode);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
8	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  n);	parent.replaceChild(n,  newNode);  	non-compiled	[CE]  	31	None	replace
