bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.removeChild(parent,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.removeChild(parent,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.removeChild(parent,  newNode);	  parent.replaceChild(newNode,    newNode);    	non-compiled	[CE]  	38	None	replace
2	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  null);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  null);	  parent.replaceChild(n,    newNode,    num,    this);    	non-compiled	[CE]  	33	None	replace
3	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  1);	  parent.replaceChild(n,    newNode,    num,    this);    	non-compiled	[CE]  	33	None	replace
4	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  3);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  3);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  3);	  parent.replaceChild(n,    newNode,    num,    this);    	non-compiled	[CE]  	33	None	replace
5	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  getImmutableSet());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  getImmutableSet());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  getImmutableSet());	  parent.replaceChild(n,    newNode,    num,    this);    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  Node  n  =  newNode.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  newNode.getParent();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  newNode.getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  parent.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	15	None	replace
8	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  newNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  parent.replaceChild(n,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  parent.replaceChild(n,  newNode);	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  parent.getLastChild();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  *  2  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  *  2  -  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  *  2  -  1);	  parent.replaceChild(n,    newNode,    num    *    2);    	non-compiled	[CE]  	36	None	replace
11	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  /  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  /  2);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  /  2);	  parent.replaceChild(n,    newNode,    num    *    2);    	non-compiled	[CE]  	36	None	replace
12	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  -  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  -  2);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  -  2);	  parent.replaceChild(n,    newNode,    num    *    2);    	non-compiled	[CE]  	36	None	replace
13	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  *  2  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  *  2  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  *  2  +  1);	  parent.replaceChild(n,    newNode,    num    *    2);    	non-compiled	[CE]  	36	None	replace
14	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.removeChild(parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.removeChild(parent);	  parent.replaceChild(newNode,    n);    	non-compiled	[CE]  	37	None	replace
15	[BUG]  [BUGGY]  newNode.replaceChild(n,  parent,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  parent,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  parent,  false);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
16	[BUG]  [BUGGY]  newNode.replaceChild(parent,  newNode,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(parent,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(parent,  newNode,  false);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  newNode.removeChild(parent,  newNode,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.removeChild(parent,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeChild(parent,  newNode,  false);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
18	[BUG]  [BUGGY]  newNode.removeChild(parent,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.removeChild(parent,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeChild(parent,  newNode);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
19	[BUG]  [BUGGY]  newNode.removeChild(parent,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.removeChild(parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeChild(parent,  num);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  newNode.replaceChild(newNode,  n,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(newNode,  n,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(newNode,  n,  false);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.replaceChild(n,  parent);	  NodeUtil.replaceChild(newNode,    parent);    	non-compiled	[CE]  	41	None	replace
22	[BUG]  [BUGGY]  newNode.addChildToFront(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToFront(n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToFront(n);	  newNode.addChildToFront(parent);    	non-compiled	[CE]  	42	None	replace
23	[BUG]  [BUGGY]  newNode.addChildToFront(parent,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToFront(parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToFront(parent,  num);	  newNode.addChildToFront(parent);    	non-compiled	[CE]  	42	None	replace
24	[BUG]  [BUGGY]  newNode.addChildToFront(parent,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToFront(parent,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToFront(parent,  n);	  newNode.addChildToFront(parent);    	non-compiled	[CE]  	42	None	replace
25	[BUG]  [BUGGY]  newNode.addChildToBack(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToBack(n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToBack(n);	  newNode.addChildToFront(parent);    	non-compiled	[CE]  	42	None	replace
26	[BUG]  [BUGGY]  n.replaceChild(parent,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(parent,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(parent,  newNode);	  n.removeChild(newNode);    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(newNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
28	[BUG]  [BUGGY]  NodeUtil.redeclareVarsWithNumber(newNode,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsWithNumber(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsWithNumber(newNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
29	[BUG]  [BUGGY]  NodeUtil.removeVarsInsideBranch(newNode,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeVarsInsideBranch(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeVarsInsideBranch(newNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
30	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(parent,  num);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
31	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(parent,  n);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
32	[BUG]  [BUGGY]  NodeUtil.redeclareVarsAssign(newNode,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsAssign(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsAssign(newNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
33	[BUG]  [BUGGY]  Node  n  =  newNode.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  newNode.getLastChild();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  newNode.getLastChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  n.getFirstChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	14	None	replace
35	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(newNode,  num);	  NodeUtil.removeChild(newNode,    newNode);    	non-compiled	[CE]  	28	None	replace
36	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  parent.removeFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  num);	  NodeUtil.removeChild(n,    parent);    	non-compiled	[CE]  	26	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  num);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  node,  newNode);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  n);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
43	[BUG]  [BUGGY]  parent.replaceChild(newNode,  n,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(newNode,  n,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(newNode,  n,  true);	  parent.replaceChild(newNode,    n,    false);    	non-compiled	[CE]  	19	None	replace
44	[BUG]  [BUGGY]  parent.replaceChild(n,  n,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  n,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  n,  false);	  parent.replaceChild(newNode,    n,    false);    	non-compiled	[CE]  	19	None	replace
45	[BUG]  [BUGGY]  Node.removeChild(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.removeChild(parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.removeChild(parent);	  newNode.removeChild(newNode);    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  3);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  3);	  parent.replaceChild(n,    newNode,    0);    	non-compiled	[CE]  	23	None	replace
47	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  2);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  2);	  parent.replaceChild(n,    newNode,    0);    	non-compiled	[CE]  	23	None	replace
48	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  n,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(newNode,  n,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(newNode,  n,  parent);	  NodeUtil.removeChild(newNode,    n);    	non-compiled	[CE]  	24	None	replace
49	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.replaceChild(parent,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.replaceChild(parent,  n);	  NodeUtil.removeChild(newNode,    n);    	non-compiled	[CE]  	24	None	replace
50	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  num);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
51	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  parent);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
52	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n  +  1);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
53	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  0);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  0);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
54	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n,  parent);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
55	[BUG]  [BUGGY]  Node.putProp(Node.SOURCENAME_PROP,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.putProp(Node.SOURCENAME_PROP,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.putProp(Node.SOURCENAME_PROP,  num);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
56	[BUG]  [BUGGY]  newNode.addChildToFront(newNode,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToFront(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToFront(newNode,  parent);	  newNode.addChildToFront(newNode);    	non-compiled	[CE]  	5	None	replace
57	[BUG]  [BUGGY]  newNode.addChildToFront(newNode,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToFront(newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToFront(newNode,  n);	  newNode.addChildToFront(newNode);    	non-compiled	[CE]  	5	None	replace
58	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  -  3);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  -  3);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  -  3);	  parent.replaceChild(n,    newNode,    num    -    1);    	non-compiled	[CE]  	35	None	replace
59	[BUG]  [BUGGY]  n.replaceChild(n,  newNode,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(n,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(n,  newNode,  false);	  n.replaceChild(parent,    newNode,    false);    	non-compiled	[CE]  	20	None	replace
60	[BUG]  [BUGGY]  n.replaceChild(newNode,  parent,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(newNode,  parent,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(newNode,  parent,  false);	  n.replaceChild(parent,    newNode,    false);    	non-compiled	[CE]  	20	None	replace
61	[BUG]  [BUGGY]  n.replaceChild(parent,  newNode,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(parent,  newNode,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(parent,  newNode,  true);	  n.replaceChild(parent,    newNode,    false);    	non-compiled	[CE]  	20	None	replace
62	[BUG]  [BUGGY]  n.replaceChild(newNode,  newNode,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(newNode,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(newNode,  newNode,  false);	  n.replaceChild(parent,    newNode,    false);    	non-compiled	[CE]  	20	None	replace
63	[BUG]  [BUGGY]  n.replaceChild(newNode,  newNode,  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(newNode,  newNode,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(newNode,  newNode,  true);	  n.replaceChild(parent,    newNode,    false);    	non-compiled	[CE]  	20	None	replace
64	[BUG]  [BUGGY]  newNode.addChildToBack(newNode,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToBack(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToBack(newNode,  parent);	  newNode.addChildToBack(newNode);    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  newNode.addChildToBack(newNode,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToBack(newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToBack(newNode,  n);	  newNode.addChildToBack(newNode);    	non-compiled	[CE]  	2	None	replace
66	[BUG]  [BUGGY]  newNode.replaceChild(n,  newNode,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  newNode,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  newNode,  true);	  parent.replaceChild(n,    newNode,    true);    	non-compiled	[CE]  	16	None	replace
67	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
68	[BUG]  [BUGGY]  Node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
69	[BUG]  [BUGGY]  node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	node.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
70	[BUG]  [BUGGY]  newNode.setBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.setBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.setBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
71	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  true,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  true,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putBooleanProp(Node.SYNTHETIC_PROP,  true,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
72	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  reportCodeChange());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  reportCodeChange());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  reportCodeChange());	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
73	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  getImmutableSet());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  getImmutableSet());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  getImmutableSet());	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
74	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  getCodeChange(),  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  getCodeChange(),  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  getCodeChange(),  num);	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
75	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  getCharacterIndex());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  getCharacterIndex());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  getCharacterIndex());	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
76	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  getReturnType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  getReturnType());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  getReturnType());	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
77	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent,  num);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.getType());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.getType());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.getType());	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  1);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.num);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
83	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.name);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.name);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.name);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
84	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent);	  NodeUtil.removeChild(newNode);    	non-compiled	[CE]  	6	None	replace
85	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(n);	  NodeUtil.removeChild(newNode);    	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(newNode,  num);	  NodeUtil.redeclareVarsInsideBranch(n,    newNode);    	non-compiled	[CE]  	45	None	replace
87	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(newNode,  n);	  NodeUtil.redeclareVarsInsideBranch(n,    newNode);    	non-compiled	[CE]  	45	None	replace
88	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(parent,  newNode);	  NodeUtil.redeclareVarsInsideBranch(n,    newNode);    	non-compiled	[CE]  	45	None	replace
89	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(newNode,  newNode);	  NodeUtil.redeclareVarsInsideBranch(n,    newNode);    	non-compiled	[CE]  	45	None	replace
90	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  newNode,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(n,  newNode,  num);	  NodeUtil.redeclareVarsInsideBranch(n,    newNode);    	non-compiled	[CE]  	45	None	replace
91	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(newNode);	  NodeUtil.redeclareVarsInsideBranch(n);    	non-compiled	[CE]  	51	None	replace
92	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(parent);	  NodeUtil.redeclareVarsInsideBranch(n);    	non-compiled	[CE]  	51	None	replace
93	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  parent,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(newNode,  parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(newNode,  parent,  num);	  NodeUtil.removeChild(newNode,    parent);    	non-compiled	[CE]  	25	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  true);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  false,  num);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  false,  n);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  null,  newNode,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  null,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  null,  newNode,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  num);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  false);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
106	[BUG]  [BUGGY]  Node.removeChild(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.removeChild(n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.removeChild(n);	  Node.removeChild(newNode);    	non-compiled	[CE]  	4	None	replace
107	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.replaceChild(n,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.replaceChild(n,  newNode);	  NodeUtil.replaceChild(newNode,    n);    	non-compiled	[CE]  	27	None	replace
108	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  true);	  parent.replaceChild(n,    newNode,    num,    false);    	non-compiled	[CE]  	32	None	replace
109	[BUG]  [BUGGY]  n.replaceChild(parent,  newNode,  num,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(parent,  newNode,  num,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(parent,  newNode,  num,  false);	  parent.replaceChild(n,    newNode,    num,    false);    	non-compiled	[CE]  	32	None	replace
110	[BUG]  [BUGGY]  newNode.replaceChild(n,  newNode,  num,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  newNode,  num,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  newNode,  num,  true);	  parent.replaceChild(n,    newNode,    num,    false);    	non-compiled	[CE]  	32	None	replace
111	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  false,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  false,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  false,  true);	  parent.replaceChild(n,    newNode,    num,    false);    	non-compiled	[CE]  	32	None	replace
112	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  true,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  true,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  true,  num);	  parent.replaceChild(n,    newNode,    false,    num);    	non-compiled	[CE]  	17	None	replace
113	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  false,  num  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  false,  num  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  false,  num  +  1);	  parent.replaceChild(n,    newNode,    false,    num);    	non-compiled	[CE]  	17	None	replace
114	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  +  2);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  +  2);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  +  2);	  parent.replaceChild(n,    newNode,    num    +    1);    	non-compiled	[CE]  	31	None	replace
115	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  +  3);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  +  3);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  +  3);	  parent.replaceChild(n,    newNode,    num    +    1);    	non-compiled	[CE]  	31	None	replace
116	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  +  1,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  +  1,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  +  1,  newNode);	  parent.replaceChild(n,    newNode,    num    +    1);    	non-compiled	[CE]  	31	None	replace
117	[BUG]  [BUGGY]  newNode.replaceChild(n,  newNode,  num  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  newNode,  num  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  newNode,  num  +  1);	  parent.replaceChild(n,    newNode,    num    +    1);    	non-compiled	[CE]  	31	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME,  num);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()!=  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()!=  Token.NAME);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()!=  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.FUNCTION);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
124	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
125	[BUG]  [BUGGY]  Node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
126	[BUG]  [BUGGY]  node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	node.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
127	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCEENAME_PROP,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putBooleanProp(Node.SOURCEENAME_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putBooleanProp(Node.SOURCEENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
128	[BUG]  [BUGGY]  newNode.setBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.setBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.setBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
129	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  n,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  n,  num);	  NodeUtil.removeChild(parent,    newNode,    num);    	non-compiled	[CE]  	30	None	replace
130	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNode,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(n,  newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(n,  newNode,  num);	  NodeUtil.removeChild(parent,    newNode,    num);    	non-compiled	[CE]  	30	None	replace
131	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  newNode,  n);	  NodeUtil.removeChild(parent,    newNode,    num);    	non-compiled	[CE]  	30	None	replace
132	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  newNode,  num  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  newNode,  num  +  1);	  NodeUtil.removeChild(parent,    newNode,    num);    	non-compiled	[CE]  	30	None	replace
133	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  num,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.removeChild(parent,  num,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.removeChild(parent,  num,  newNode);	  NodeUtil.removeChild(parent,    newNode,    num);    	non-compiled	[CE]  	30	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  num);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  n);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  parent);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  this);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  null);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  null);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  null);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
141	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  newNode,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.replaceChild(parent,  newNode,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.replaceChild(parent,  newNode,  num);	  NodeUtil.replaceChild(parent,    newNode);    	non-compiled	[CE]  	40	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  n);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  oldNode,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  oldNode,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  oldNode,  newNode);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
144	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newNumber(Token.NAME,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
145	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
146	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  name);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
147	[BUG]  [BUGGY]  newNode.putIntProp(Node.SOURCENAME_PROP,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putIntProp(Node.SOURCENAME_PROP,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putIntProp(Node.SOURCENAME_PROP,  num);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  n,  true);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	39	None	replace
150	[BUG]  [BUGGY]  NodeUtil.redeclareVarsWithNumber(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsWithNumber(newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsWithNumber(newNode);	  NodeUtil.redeclareVarsInsideBranch(n);    	non-compiled	[CE]  	51	None	replace
151	[BUG]  [BUGGY]  NodeUtil.redeclareVarsToRemove(newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsToRemove(newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsToRemove(newNode);	  NodeUtil.redeclareVarsInsideBranch(n);    	non-compiled	[CE]  	51	None	replace
152	[BUG]  [BUGGY]  newNode.removeBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.removeBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
153	[BUG]  [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  n);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	11	None	replace
155	[BUG]  [BUGGY]  newNode.replaceChild(n,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  parent);	  newNode.removeChild(n);    	non-compiled	[CE]  	1	None	replace
156	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  *  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  *  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  *  1);	  parent.replaceChild(n,    newNode,    num    +    1);    	non-compiled	[CE]  	31	None	replace
157	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  +  4);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  +  4);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  +  4);	  parent.replaceChild(n,    newNode,    num    +    1);    	non-compiled	[CE]  	31	None	replace
158	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  -  1  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  -  1  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  -  1  +  1);	  parent.replaceChild(n,    newNode,    num    -    1);    	non-compiled	[CE]  	35	None	replace
159	[BUG]  [BUGGY]  Node  n  =  newNode.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  newNode.removeFirstChild();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  newNode.removeFirstChild();	  Node    n    =    newNode.getNext();    	non-compiled	[CE]  	13	None	replace
160	[BUG]  [BUGGY]  newNode.replaceChild(parent,  n,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(parent,  n,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(parent,  n,  false);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
161	[BUG]  [BUGGY]  Node.replaceChild(n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.replaceChild(n,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.replaceChild(n,  newNode);	  Node.removeChild(newNode);    	non-compiled	[CE]  	4	None	replace
162	[BUG]  [BUGGY]  Node.replaceChild(parent,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node.replaceChild(parent,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node.replaceChild(parent,  newNode);	  Node.removeChild(newNode);    	non-compiled	[CE]  	4	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	9	None	replace
165	[BUG]  [BUGGY]  NodeUtil.redeclareVarsRemoved(newNode,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsRemoved(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsRemoved(newNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
166	[BUG]  [BUGGY]  NodeUtil.redeclareVarsToRemove(newNode,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsToRemove(newNode,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsToRemove(newNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
167	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  node.getFirstChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	14	None	replace
168	[BUG]  [BUGGY]  newNode.addChildToBack(parent,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildToBack(parent,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildToBack(parent,  n);	  newNode.addChildToBack(parent);    	non-compiled	[CE]  	43	None	replace
169	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  *  3);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  *  3);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  *  3);	  parent.replaceChild(n,    newNode,    num    *    2);    	non-compiled	[CE]  	36	None	replace
170	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  *  4);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  *  4);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  *  4);	  parent.replaceChild(n,    newNode,    num    *    2);    	non-compiled	[CE]  	36	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME,  parent);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.GETPROP);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.GETPROP);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
173	[BUG]  [BUGGY]  Parent.replaceChild(n,  newNode,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Parent.replaceChild(n,  newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Parent.replaceChild(n,  newNode,  false);	  parent.replaceChild(n,    newNode,    true);    	non-compiled	[CE]  	16	None	replace
174	[BUG]  [BUGGY]  n.replaceChild(newNode,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.replaceChild(newNode,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.replaceChild(newNode,  false);	  n.replaceChild(parent,    newNode,    false);    	non-compiled	[CE]  	20	None	replace
175	[BUG]  [BUGGY]  Parent.replaceChild(n,  newNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Parent.replaceChild(n,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Parent.replaceChild(n,  newNode);	  parent.replaceChild(newNode,    n);    	non-compiled	[CE]  	37	None	replace
176	[BUG]  [BUGGY]  n.addChildToFront(newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  n.addChildToFront(newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	n.addChildToFront(newNode);	  n.removeChild(newNode);    	non-compiled	[CE]  	8	None	replace
177	[BUG]  [BUGGY]  newNode.setProp(Node.SOURCENAME_PROP,  n  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.setProp(Node.SOURCENAME_PROP,  n  +  1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.setProp(Node.SOURCENAME_PROP,  n  +  1);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
178	[BUG]  [BUGGY]  newNode.removeProp(Node.SOURCENAME_PROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.removeProp(Node.SOURCENAME_PROP);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeProp(Node.SOURCENAME_PROP);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
179	[BUG]  [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  0);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SYNTHETIC_PROP,  0);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
180	[BUG]  [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SYNTHETIC_PROP,  n);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
181	[BUG]  [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SYNTHETIC_PROP,  num);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	48	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  this);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	50	None	replace
183	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  Predicates.  <  Node>emptyList());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num,  Predicates.  <  Node>emptyList());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num,  Predicates.  <  Node>emptyList());	  parent.replaceChild(n,    newNode,    num,    this);    	non-compiled	[CE]  	33	None	replace
184	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  n  =  n.getNext();	  Node    n    =    newNode.getNext();    	non-compiled	[CE]  	13	None	replace
185	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent,  num);	  NodeUtil.redeclareVarsInsideBranch(n,    parent);    	non-compiled	[CE]  	44	None	replace
186	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCEFILE_PROP,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putBooleanProp(Node.SOURCEFILE_PROP,  true);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putBooleanProp(Node.SOURCEFILE_PROP,  true);	  newNode.removeChild(n);    	non-compiled	[CE]  	1	None	replace
187	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCEFILE_PROP,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCEFILE_PROP,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCEFILE_PROP,  n);	  newNode.removeChild(n);    	non-compiled	[CE]  	1	None	replace
188	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  newNode,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  NodeUtil.replaceChild(parent,  newNode,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	NodeUtil.replaceChild(parent,  newNode,  n);	  NodeUtil.replaceChild(parent,    newNode);    	non-compiled	[CE]  	40	None	replace
189	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  +  1,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  +  1,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  +  1,  false);	  parent.replaceChild(n,    newNode,    num,    false);    	non-compiled	[CE]  	32	None	replace
190	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n  *  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n  *  2);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n  *  2);	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
191	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n));  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n));	  newNode.putProp(Node.SOURCENAME_PROP,    n);    	non-compiled	[CE]  	47	None	replace
192	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCE_PROP,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.putBooleanProp(Node.SOURCE_PROP,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.putBooleanProp(Node.SOURCE_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	46	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkArgument(newNode.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkArgument(newNode.getType()  ==  Token.NAME);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkArgument(newNode.getType()  ==  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getFirstChild()!=  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getFirstChild()!=  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getFirstChild()!=  n);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.VAR);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.VAR);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	49	None	replace
196	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  getCode());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  getCode());  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  getCode());	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
197	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  getCode(),  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  getCode(),  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  getCode(),  num);	  parent.replaceChild(n,    newNode,    getCodeChange());    	non-compiled	[CE]  	21	None	replace
198	[BUG]  [BUGGY]  newNode.addChildrenToFront(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.addChildrenToFront(parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.addChildrenToFront(parent);	  newNode.addChildToFront(newNode);    	non-compiled	[CE]  	5	None	replace
199	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  parent);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
200	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	Node  newNode  =  Node.newNumber(Token.NAME,  n);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	12	None	replace
201	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  false,  num  +  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  false,  num  +  2);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  false,  num  +  2);	  parent.replaceChild(n,    newNode,    false,    num);    	non-compiled	[CE]  	17	None	replace
202	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  -  1,  newNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  num  -  1,  newNode);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  num  -  1,  newNode);	  parent.replaceChild(n,    newNode,    num    -    1);    	non-compiled	[CE]  	35	None	replace
203	[BUG]  [BUGGY]  newNode.replaceChild(n,  parent,  num,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  parent,  num,  false);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  parent,  num,  false);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
204	[BUG]  [BUGGY]  newNode.replaceChild(n,  parent,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.replaceChild(n,  parent,  num);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.replaceChild(n,  parent,  num);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
205	[BUG]  [BUGGY]  newNode.removeChild(parent,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  newNode.removeChild(parent,  n);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	newNode.removeChild(parent,  n);	  newNode.replaceChild(n,    newNode,    false);    	non-compiled	[CE]  	18	None	replace
206	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  -1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {      [BUGGY]  parent.replaceChild(n,  newNode,  -1);  [BUGGY]      reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	820	820	1	replace	parent.replaceChild(n,  newNode,  -1);	  parent.replaceChild(n,    newNode,    0);    	non-compiled	[CE]  	23	None	replace
