bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1B  :  0;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  1B  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1B  :  0;	  int    equivalentResult    =    result?    1L    :    0;    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  int  equivalentResult  =  result?  10.0  :  0;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  10.0  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  10.0  :  0;	  int    equivalentResult    =    result?    1L    :    0;    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  int  equivalentResult  =  result?  3  :  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  3  :  1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  3  :  1;	  int    equivalentResult    =    result?    3    :    0;    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  int  equivalentResult  =  result?  2  :  -1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  2  :  -1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  2  :  -1;	  int    equivalentResult    =    result?    1    :    -1;    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  int  equivalentResult  =  result?  3  :  -1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  3  :  -1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  3  :  -1;	  int    equivalentResult    =    result?    1    :    -1;    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  int  equivalentResult  =  result?  2  :  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  2  :  1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  2  :  1;	  int    equivalentResult    =    result?    2    :    0;    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  1;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  2;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  2;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  2;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  -1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  -1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  -1;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  :  0;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  :  0;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  3;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  3;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  3;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  2  :  0;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  nVal?  2  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  2  :  0;	  int    equivalentResult    =    nVal?    1    :    0;    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  1  :  -1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  nVal?  1  :  -1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  1  :  -1;	  int    equivalentResult    =    nVal?    1    :    0;    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  1L  :  0;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  nVal?  1L  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  1L  :  0;	  int    equivalentResult    =    nVal?    1    :    0;    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  Node  parent  =  nVal.getParent();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Node  parent  =  nVal.getParent();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.getParent();	      	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Node  rightParent  =  nVal.getParent();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getParent();	      	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  nVal);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  NodeUtil.removeChild(parent,  nVal);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(parent,  nVal);	      	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  boolean  equivalentResult  =  result.booleanValue();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  boolean  equivalentResult  =  result.booleanValue();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result.booleanValue();	      	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  nVal  =  nVal.getNext();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  nVal  =  nVal.getNext();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.getNext();	      	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  Node  next  =  nVal.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Node  next  =  nVal.getNext();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.getNext();	      	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  parent.replaceChild(n,  result);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  parent.replaceChild(n,  result);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  result);	      	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  int  equivalentResult  =  result?  4  :  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  4  :  1;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  4  :  1;	  int    equivalentResult    =    result?    4    :    0;    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  0;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  0;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1  :  -2;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  1  :  -2;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1  :  -2;	  int    equivalentResult    =    result?    1    :    -1;    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-6  :  0;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  1E-6  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-6  :  0;	  int    equivalentResult    =    result?    1L    :    0;    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Preconditions.checkState(result  ==  null);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  null);	      	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(result!=  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Preconditions.checkState(result!=  null);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result!=  null);	      	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  false);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Preconditions.checkState(result  ==  false);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  false);	      	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue?  1  :  0;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  nVal.intValue?  1  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue?  1  :  0;	  int    equivalentResult    =    nVal?    1    :    0;    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue()?  1  :  0;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  nVal.intValue()?  1  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue()?  1  :  0;	  int    equivalentResult    =    nVal?    1    :    0;    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  UNKNOWN;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  UNKNOWN;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  UNKNOWN;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  Node  leftParent  =  nVal.getParent();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Node  leftParent  =  nVal.getParent();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.getParent();	      	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  n.removeChild(parent);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  parent.replaceChild(n,  nVal);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  parent.replaceChild(n,  nVal);  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  nVal);	      	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  Node  rightParent  =  nVal.getNext();  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getNext();	      	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  int  equivalentResult  =  result?  8  :  0;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);    [BUGGY]  int  equivalentResult  =  result?  8  :  0;  [BUGGY]    return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  8  :  0;	  int    equivalentResult    =    result?    4    :    0;    	non-compiled	[CE]  	5	None	replace
