bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  4;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  4;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  4;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    1;    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(nVal!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(nVal!=  null);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(nVal!=  null);	  Preconditions.checkState(result!=    null);    	non-compiled	[CE]  	29	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(result!=  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result!=  false);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result!=  false);	  Preconditions.checkState(result!=    null);    	non-compiled	[CE]  	29	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(result  >=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  >=  null);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  >=  null);	  Preconditions.checkState(result!=    null);    	non-compiled	[CE]  	29	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  null,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  null,  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  null,  equivalentResult);	  Preconditions.checkState(result!=    null);    	non-compiled	[CE]  	29	None	replace
6	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  nVal,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(parent,  nVal,  result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(parent,  nVal,  result);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
7	[BUG]  [BUGGY]  NodeUtil.removeChild(nVal,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(nVal,  parent);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(nVal,  parent);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
8	[BUG]  [BUGGY]  NodeUtil.removeChild(leftParent,  nVal);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(leftParent,  nVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(leftParent,  nVal);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
9	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  result);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(parent,  result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(parent,  result);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
10	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  nVal,  equalResult);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(parent,  nVal,  equalResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(parent,  nVal,  equalResult);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
11	[BUG]  [BUGGY]  NodeUtil.removeChild(rightParent,  nVal);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(rightParent,  nVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(rightParent,  nVal);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
12	[BUG]  [BUGGY]  n.removeChild(result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(result);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
13	[BUG]  [BUGGY]  n.removeChild(rightParent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(rightParent);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(rightParent);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
14	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(right);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(right);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
15	[BUG]  [BUGGY]  n.removeChild(leftParent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(leftParent);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(leftParent);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
16	[BUG]  [BUGGY]  n.removeChild(parent,  result);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(parent,  result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(parent,  result);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
17	[BUG]  [BUGGY]  n.removeChild(rval);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(rval);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(rval);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
18	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getLastChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getLastChild();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
19	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getRightParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getRightParent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getRightParent();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
20	[BUG]  [BUGGY]  Node  rightParent  =  nVal.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.removeFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.removeFirstChild();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
21	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getFirstChild();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
22	[BUG]  [BUGGY]  Node  rightParent  =  nVal.cloneTree();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.cloneTree();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.cloneTree();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1  :  2;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1  :  2;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1  :  2;	  int    equivalentResult    =    result?    2    :    1;    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1  :  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1  :  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1  :  1;	  int    equivalentResult    =    result?    2    :    1;    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  int  equivalentResult  =  result?  0  :  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  0  :  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  0  :  1;	  int    equivalentResult    =    result?    2    :    1;    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  1;	  int    equivalentResult    =    result?    INVALID_REGULAR_EXPRESSION_FLAGS    :    0;    	non-compiled	[CE]  	24	None	replace
27	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  2;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  2;	  int    equivalentResult    =    result?    INVALID_REGULAR_EXPRESSION_FLAGS    :    0;    	non-compiled	[CE]  	24	None	replace
28	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  -1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  -1;	  int    equivalentResult    =    result?    INVALID_REGULAR_EXPRESSION_FLAGS    :    0;    	non-compiled	[CE]  	24	None	replace
29	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue()?  2  :  0;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue()?  2  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue()?  2  :  0;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
30	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue()?  1  :  -1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue()?  1  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue()?  1  :  -1;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
31	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue()?  3  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue()?  3  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue()?  3  :  0;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
32	[BUG]  [BUGGY]  int  equivalentResult  =  result.intValue()?  1  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result.intValue()?  1  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result.intValue()?  1  :  0;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
33	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue()?  1  :  2;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue()?  1  :  2;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue()?  1  :  2;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
34	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  STANDARD_OBJECT_CONSTRUCTORS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  	23	None	replace
35	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS  +  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS  +  1;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  	23	None	replace
36	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  	23	None	replace
37	[BUG]  [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_WITHOUT_ARGS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_WITHOUT_ARGS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  REGEXP_FLAGS_WITHOUT_ARGS  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  	23	None	replace
38	[BUG]  [BUGGY]  parent.replaceChild(n,  nVal,  result);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  nVal,  result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  nVal,  result);	  parent.replaceChild(n,    nVal);    	non-compiled	[CE]  	37	None	replace
39	[BUG]  [BUGGY]  parent.replaceChild(n,  nVal,  equalResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  nVal,  equalResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  nVal,  equalResult);	  parent.replaceChild(n,    nVal);    	non-compiled	[CE]  	37	None	replace
40	[BUG]  [BUGGY]  parent.replaceChild(n,  nVal,  equivalentResult);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  nVal,  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  nVal,  equivalentResult);	  parent.replaceChild(n,    nVal);    	non-compiled	[CE]  	37	None	replace
41	[BUG]  [BUGGY]  boolean  equivalentResult  =  nVal.booleanValue();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  nVal.booleanValue();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  nVal.booleanValue();	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
42	[BUG]  [BUGGY]  boolean  equivalentResult  =  result!=  null?  false  :  result.booleanValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result!=  null?  false  :  result.booleanValue();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result!=  null?  false  :  result.booleanValue();	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
43	[BUG]  [BUGGY]  boolean  equivalentResult  =  result  ==  null?  false  :  result.booleanValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result  ==  null?  false  :  result.booleanValue();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result  ==  null?  false  :  result.booleanValue();	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
44	[BUG]  [BUGGY]  boolean  equivalentResult  =  result!=  null?  result.booleanValue()  :  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result!=  null?  result.booleanValue()  :  false;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result!=  null?  result.booleanValue()  :  false;	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
45	[BUG]  [BUGGY]  nVal  =  nVal.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.getLastChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.getLastChild();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
46	[BUG]  [BUGGY]  nVal  =  nVal.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.getParent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.getParent();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
47	[BUG]  [BUGGY]  nVal  =  nVal.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.getFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.getFirstChild();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
48	[BUG]  [BUGGY]  nVal  =  nVal.getNext()  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.getNext()  +  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.getNext()  +  1;	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
49	[BUG]  [BUGGY]  nVal  =  nVal.getPrevious();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.getPrevious();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.getPrevious();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
50	[BUG]  [BUGGY]  nVal  =  nVal.removeFirst();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.removeFirst();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.removeFirst();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
51	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  2  :  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal?  2  :  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  2  :  1;	  int    equivalentResult    =    nVal?    2    :    0;    	non-compiled	[CE]  	12	None	replace
52	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  3  :  0;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal?  3  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  3  :  0;	  int    equivalentResult    =    nVal?    2    :    0;    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  Node  parent  =  nVal.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.getNext();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.getNext();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
54	[BUG]  [BUGGY]  Node  parent  =  nVal.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.getLastChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.getLastChild();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
55	[BUG]  [BUGGY]  Node  parent  =  nVal.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.getFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.getFirstChild();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
56	[BUG]  [BUGGY]  Node  parent  =  nVal.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.removeFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.removeFirstChild();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
57	[BUG]  [BUGGY]  Node  parent  =  leftParent.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  leftParent.getParent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  leftParent.getParent();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
58	[BUG]  [BUGGY]  Node  parent  =  nVal.getPrevious();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.getPrevious();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.getPrevious();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
59	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  10.0  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal?  10.0  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  10.0  :  0;	  int    equivalentResult    =    nVal?    1L    :    0;    	non-compiled	[CE]  	14	None	replace
60	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE  +  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE  +  1;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
61	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Integer.MAX_VALUE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Integer.MAX_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
62	[BUG]  [BUGGY]  Node  next  =  nVal.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.getLastChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.getLastChild();	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
63	[BUG]  [BUGGY]  Node  next  =  nVal.getNext()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.getNext()  +  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.getNext()  +  1;	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
64	[BUG]  [BUGGY]  Node  next  =  nVal.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.getParent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.getParent();	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
65	[BUG]  [BUGGY]  Node  next  =  nVal.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.getFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.getFirstChild();	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
66	[BUG]  [BUGGY]  Node  next  =  nVal.getNext()  ||  result;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.getNext()  ||  result;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.getNext()  ||  result;	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
67	[BUG]  [BUGGY]  Node  next  =  nVal.removeFirst();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.removeFirst();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.removeFirst();	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
68	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-7  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-7  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-7  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
69	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-5  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-5  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-5  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
70	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-1  :  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-1  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-1  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
71	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-8  :  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-8  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-8  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
72	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-3  :  0;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-3  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-3  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
73	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1  :  4;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1  :  4;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1  :  4;	  int    equivalentResult    =    result?    4    :    1;    	non-compiled	[CE]  	22	None	replace
74	[BUG]  [BUGGY]  int  equivalentResult  =  nVal?  2  :  -1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal?  2  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal?  2  :  -1;	  int    equivalentResult    =    nVal?    1    :    -1;    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue?  2  :  0;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue?  2  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue?  2  :  0;	  int    equivalentResult    =    nVal.intValue?    1    :    0;    	non-compiled	[CE]  	31	None	replace
76	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue?  1  :  -1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue?  1  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue?  1  :  -1;	  int    equivalentResult    =    nVal.intValue?    1    :    0;    	non-compiled	[CE]  	31	None	replace
77	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue?  3  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue?  3  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue?  3  :  0;	  int    equivalentResult    =    nVal.intValue?    1    :    0;    	non-compiled	[CE]  	31	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(nVal  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(nVal  ==  null);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(nVal  ==  null);	  Preconditions.checkState(result    ==    null);    	non-compiled	[CE]  	28	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  null,  rval);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  null,  rval);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  null,  rval);	  Preconditions.checkState(result    ==    null);    	non-compiled	[CE]  	28	None	replace
80	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getRight();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getRight();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getRight();	  Node    rightParent    =    nVal.getNext();    	non-compiled	[CE]  	38	None	replace
81	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getLowerCase();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getLowerCase();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getLowerCase();	  Node    rightParent    =    nVal.getNext();    	non-compiled	[CE]  	38	None	replace
82	[BUG]  [BUGGY]  Node  rightParent  =  nVal.removeFirst();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.removeFirst();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.removeFirst();	  Node    rightParent    =    nVal.getNext();    	non-compiled	[CE]  	38	None	replace
83	[BUG]  [BUGGY]  int  equivalentResult  =  result?  7  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  7  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  7  :  0;	  int    equivalentResult    =    result?    8    :    0;    	non-compiled	[CE]  	39	None	replace
84	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1F  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1F  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1F  :  0;	  int    equivalentResult    =    result?    1B    :    0;    	non-compiled	[CE]  	1	None	replace
85	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E  :  0;	  int    equivalentResult    =    result?    1B    :    0;    	non-compiled	[CE]  	1	None	replace
86	[BUG]  [BUGGY]  int  equivalentResult  =  result?  10.0  :  -1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  10.0  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  10.0  :  -1;	  int    equivalentResult    =    result?    10.0    :    0;    	non-compiled	[CE]  	2	None	replace
87	[BUG]  [BUGGY]  int  equivalentResult  =  result?  20.0  :  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  20.0  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  20.0  :  0;	  int    equivalentResult    =    result?    10.0    :    0;    	non-compiled	[CE]  	2	None	replace
88	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1000  :  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1000  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1000  :  0;	  int    equivalentResult    =    result?    10.0    :    0;    	non-compiled	[CE]  	2	None	replace
89	[BUG]  [BUGGY]  int  equivalentResult  =  result?  10.0  :  2;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  10.0  :  2;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  10.0  :  2;	  int    equivalentResult    =    result?    10.0    :    0;    	non-compiled	[CE]  	2	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  true);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  true);	  Preconditions.checkState(result    ==    false);    	non-compiled	[CE]  	30	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(result!=  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result!=  true);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result!=  true);	  Preconditions.checkState(result    ==    false);    	non-compiled	[CE]  	30	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  false,  rval);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  false,  rval);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  false,  rval);	  Preconditions.checkState(result    ==    false);    	non-compiled	[CE]  	30	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  false,  result);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  false,  result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  false,  result);	  Preconditions.checkState(result    ==    false);    	non-compiled	[CE]  	30	None	replace
94	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  nVal;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  nVal;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  nVal;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    UNKNOWN;    	non-compiled	[CE]  	34	None	replace
95	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  OR_PRECEDENCE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  OR_PRECEDENCE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  OR_PRECEDENCE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    UNKNOWN;    	non-compiled	[CE]  	34	None	replace
96	[BUG]  [BUGGY]  int  equivalentResult  =  result?  UNKNOWN  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  UNKNOWN  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  UNKNOWN  :  STANDARD_OBJECT_CONSTRUCTORS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    UNKNOWN;    	non-compiled	[CE]  	34	None	replace
97	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  CONSTRUCTORS;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  CONSTRUCTORS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  CONSTRUCTORS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    UNKNOWN;    	non-compiled	[CE]  	34	None	replace
98	[BUG]  [BUGGY]  parent.replaceChild(n,  rval);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  rval);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  rval);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
99	[BUG]  [BUGGY]  parent.replaceChild(n,  OR_PRECEDENCE);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  OR_PRECEDENCE);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  OR_PRECEDENCE);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
100	[BUG]  [BUGGY]  parent.replaceChild(n,  equalResult);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  equalResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  equalResult);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
101	[BUG]  [BUGGY]  parent.replaceChild(n,  newRoot);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  newRoot);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  newRoot);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
102	[BUG]  [BUGGY]  parent.replaceChild(n,  result,  rval);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  result,  rval);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  result,  rval);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
103	[BUG]  [BUGGY]  int  equivalentResult  =  result  &  STANDARD_OBJECT_CONSTRUCTORS  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  &  STANDARD_OBJECT_CONSTRUCTORS  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  &  STANDARD_OBJECT_CONSTRUCTORS  :  0;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
104	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  :  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  :  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  :  1;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
105	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  1;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
106	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  1  :  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  1  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  1  :  0;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
107	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  -  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  -  1;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
108	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  nVal  :  0;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  nVal  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  |  nVal  :  0;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Integer.MIN_VALUE;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Integer.MIN_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Integer.MIN_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
110	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE  +  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE  +  1;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
111	[BUG]  [BUGGY]  int  equivalentResult  =  result?  Integer.MIN_VALUE  :  Integer.MIN_VALUE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  Integer.MIN_VALUE  :  Integer.MIN_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  Integer.MIN_VALUE  :  Integer.MIN_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
112	[BUG]  [BUGGY]  Node  leftParent  =  nVal.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  nVal.getLastChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.getLastChild();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
113	[BUG]  [BUGGY]  Node  leftParent  =  nVal.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  nVal.getNext();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.getNext();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
114	[BUG]  [BUGGY]  Node  leftParent  =  nVal.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  nVal.getFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.getFirstChild();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
115	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  rightVal.getParent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  rightVal.getParent();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
116	[BUG]  [BUGGY]  Node  leftParent  =  nVal.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  nVal.cloneTree();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.cloneTree();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
117	[BUG]  [BUGGY]  Node  leftParent  =  nVal.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  nVal.removeFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.removeFirstChild();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
118	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  nVal  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  nVal  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  nVal  :  0;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
119	[BUG]  [BUGGY]  int  equivalentResult  =  result?  Integer.MAX_VALUE  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  Integer.MAX_VALUE  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  Integer.MAX_VALUE  :  STANDARD_OBJECT_CONSTRUCTORS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
120	[BUG]  [BUGGY]  int  equivalentResult  =  result?  SHORT_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  SHORT_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  SHORT_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
121	[BUG]  [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_RE  :  Integer.MAX_VALUE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_RE  :  Integer.MAX_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  REGEXP_FLAGS_RE  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
122	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getString();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getString();	  Node    rightParent    =    nVal.getNext();    	non-compiled	[CE]  	38	None	replace
123	[BUG]  [BUGGY]  int  equivalentResult  =  result?  0  :  -1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  0  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  0  :  -1;	  int    equivalentResult    =    result?    3    :    -1;    	non-compiled	[CE]  	5	None	replace
124	[BUG]  [BUGGY]  Node  leftParent  =  nVal.removeFirst();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  leftParent  =  nVal.removeFirst();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  leftParent  =  nVal.removeFirst();	  Node    leftParent    =    nVal.getParent();    	non-compiled	[CE]  	35	None	replace
125	[BUG]  [BUGGY]  n.replaceChild(nVal,  result);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.replaceChild(nVal,  result);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.replaceChild(nVal,  result);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
126	[BUG]  [BUGGY]  int  equivalentResult  =  result?  Integer.MIN_VALUE  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  Integer.MIN_VALUE  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  Integer.MIN_VALUE  :  STANDARD_OBJECT_CONSTRUCTORS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
127	[BUG]  [BUGGY]  int  equivalentResult  =  result?  SHORT_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  SHORT_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  SHORT_OBJECT_CONSTRUCTORS  :  Integer.MIN_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
128	[BUG]  [BUGGY]  int  equivalentResult  =  result?  AND_PRECEDENCE  :  Integer.MIN_VALUE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  AND_PRECEDENCE  :  Integer.MIN_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  AND_PRECEDENCE  :  Integer.MIN_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
129	[BUG]  [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_RE  :  0;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_RE  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  REGEXP_FLAGS_RE  :  0;	  int    equivalentResult    =    result?    INVALID_REGULAR_EXPRESSION_FLAGS    :    0;    	non-compiled	[CE]  	24	None	replace
130	[BUG]  [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_WITHOUT_ARGS  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  REGEXP_FLAGS_WITHOUT_ARGS  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  REGEXP_FLAGS_WITHOUT_ARGS  :  0;	  int    equivalentResult    =    result?    INVALID_REGULAR_EXPRESSION_FLAGS    :    0;    	non-compiled	[CE]  	24	None	replace
131	[BUG]  [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  REGEXP_FLAGS_RE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  REGEXP_FLAGS_RE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  INVALID_REGULAR_EXPRESSION_FLAGS  :  REGEXP_FLAGS_RE;	  int    equivalentResult    =    result?    INVALID_REGULAR_EXPRESSION_FLAGS    :    0;    	non-compiled	[CE]  	24	None	replace
132	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    1;    	non-compiled	[CE]  	7	None	replace
133	[BUG]  [BUGGY]  boolean  equivalentResult  =  result!=  null  &&  result.booleanValue();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result!=  null  &&  result.booleanValue();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result!=  null  &&  result.booleanValue();	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
134	[BUG]  [BUGGY]  boolean  equivalentResult  =  result  ==  null  &&  result.booleanValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result  ==  null  &&  result.booleanValue();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result  ==  null  &&  result.booleanValue();	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
135	[BUG]  [BUGGY]  boolean  equivalentResult  =  result.booleanValue()  ||  result.booleanValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result.booleanValue()  ||  result.booleanValue();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result.booleanValue()  ||  result.booleanValue();	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
136	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  UNKNOWN  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  UNKNOWN  +  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  UNKNOWN  +  1;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    UNKNOWN;    	non-compiled	[CE]  	34	None	replace
137	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  nVal,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  NodeUtil.removeChild(parent,  nVal,  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	NodeUtil.removeChild(parent,  nVal,  equivalentResult);	  NodeUtil.removeChild(parent,    nVal);    	non-compiled	[CE]  	17	None	replace
138	[BUG]  [BUGGY]  Node  rightParent  =  nVal.getGrandparent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  nVal.getGrandparent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  nVal.getGrandparent();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
139	[BUG]  [BUGGY]  int  equivalentResult  =  result?  30.0  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  30.0  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  30.0  :  0;	  int    equivalentResult    =    result?    10.0    :    0;    	non-compiled	[CE]  	2	None	replace
140	[BUG]  [BUGGY]  int  equivalentResult  =  result?  0.0  :  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  0.0  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  0.0  :  0;	  int    equivalentResult    =    result?    10.0    :    0;    	non-compiled	[CE]  	2	None	replace
141	[BUG]  [BUGGY]  Node  parent  =  nVal.cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.cloneTree();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.cloneTree();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
142	[BUG]  [BUGGY]  Node  parent  =  nVal.removeFirst();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  parent  =  nVal.removeFirst();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  parent  =  nVal.removeFirst();	  Node    parent    =    nVal.getParent();    	non-compiled	[CE]  	15	None	replace
143	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue  >  1?  1  :  0;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue  >  1?  1  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue  >  1?  1  :  0;	  int    equivalentResult    =    nVal.intValue?    1    :    0;    	non-compiled	[CE]  	31	None	replace
144	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-4  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-4  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-4  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
145	[BUG]  [BUGGY]  parent.replaceChild(n,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  this);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  this);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
146	[BUG]  [BUGGY]  parent.removeChild(nVal);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.removeChild(nVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.removeChild(nVal);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(result!=  null,  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result!=  null,  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result!=  null,  equivalentResult);	  Preconditions.checkState(result!=    null);    	non-compiled	[CE]  	29	None	replace
148	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  nVal.intValue()?  1  :  0;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  nVal.intValue()?  1  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  nVal.intValue()?  1  :  0;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
149	[BUG]  [BUGGY]  parent.replaceChild(nVal,  nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(nVal,  nVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(nVal,  nVal);	  parent.replaceChild(n,    nVal);    	non-compiled	[CE]  	37	None	replace
150	[BUG]  [BUGGY]  int  equivalentResult  =  result?  CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  	23	None	replace
151	[BUG]  [BUGGY]  int  equivalentResult  =  result?  0  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  0  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  0  :  0;	  int    equivalentResult    =    result?    8    :    0;    	non-compiled	[CE]  	39	None	replace
152	[BUG]  [BUGGY]  int  equivalentResult  =  result?  2  :  3;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  2  :  3;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  2  :  3;	  int    equivalentResult    =    result?    2    :    1;    	non-compiled	[CE]  	6	None	replace
153	[BUG]  [BUGGY]  int  equivalentResult  =  result?  2  :  4;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  2  :  4;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  2  :  4;	  int    equivalentResult    =    result?    2    :    1;    	non-compiled	[CE]  	6	None	replace
154	[BUG]  [BUGGY]  parent.replaceChild(n,  equalVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  equalVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  equalVal);	  parent.replaceChild(n,    nVal);    	non-compiled	[CE]  	37	None	replace
155	[BUG]  [BUGGY]  int  equivalentResult  =  result?  4  :  -1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  4  :  -1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  4  :  -1;	  int    equivalentResult    =    result?    2    :    -1;    	non-compiled	[CE]  	4	None	replace
156	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1M  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1M  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1M  :  0;	  int    equivalentResult    =    result?    1B    :    0;    	non-compiled	[CE]  	1	None	replace
157	[BUG]  [BUGGY]  int  equivalentResult  =  result?  8  :  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  8  :  1;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  8  :  1;	  int    equivalentResult    =    result?    4    :    1;    	non-compiled	[CE]  	22	None	replace
158	[BUG]  [BUGGY]  Node  rightParent  =  leftVal.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  rightParent  =  leftVal.getParent();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  rightParent  =  leftVal.getParent();	  Node    rightParent    =    nVal.getParent();    	non-compiled	[CE]  	16	None	replace
159	[BUG]  [BUGGY]  n.removeChild(rightVal);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(rightVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(rightVal);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
160	[BUG]  [BUGGY]  n.removeChild(nVal);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(nVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(nVal);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
161	[BUG]  [BUGGY]  n.removeChild(parent,  equivalentResult);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  n.removeChild(parent,  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	n.removeChild(parent,  equivalentResult);	  n.removeChild(parent);    	non-compiled	[CE]  	36	None	replace
162	[BUG]  [BUGGY]  nVal  =  nVal.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  nVal  =  nVal.cloneTree();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	nVal  =  nVal.cloneTree();	  nVal    =    nVal.getNext();    	non-compiled	[CE]  	19	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkArgument(result  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkArgument(result  ==  null);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkArgument(result  ==  null);	  Preconditions.checkState(result    ==    null);    	non-compiled	[CE]  	28	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  null  ||  nVal.getType()  ==  Token.NUMBER);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  null  ||  nVal.getType()  ==  Token.NUMBER);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  null  ||  nVal.getType()  ==  Token.NUMBER);	  Preconditions.checkState(result    ==    null);    	non-compiled	[CE]  	28	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkArgument(result!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkArgument(result!=  null);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkArgument(result!=  null);	  Preconditions.checkState(result    ==    null);    	non-compiled	[CE]  	28	None	replace
166	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
167	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  default?  STANDARD_OBJECT_CONSTRUCTORS  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  default?  STANDARD_OBJECT_CONSTRUCTORS  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  default?  STANDARD_OBJECT_CONSTRUCTORS  :  0;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
168	[BUG]  [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  +  1  :  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  +  1  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result  |  STANDARD_OBJECT_CONSTRUCTORS  +  1  :  0;	  int    equivalentResult    =    result    |    STANDARD_OBJECT_CONSTRUCTORS    :    0;    	non-compiled	[CE]  	10	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(result  ==  false,  equivalentResult);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result  ==  false,  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result  ==  false,  equivalentResult);	  Preconditions.checkState(result    ==    false);    	non-compiled	[CE]  	30	None	replace
170	[BUG]  [BUGGY]  boolean  equivalentResult  =  result!=  null?  result.booleanValue()  :  true;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  boolean  equivalentResult  =  result!=  null?  result.booleanValue()  :  true;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	boolean  equivalentResult  =  result!=  null?  result.booleanValue()  :  true;	  boolean    equivalentResult    =    result.booleanValue();    	non-compiled	[CE]  	18	None	replace
171	[BUG]  [BUGGY]  int  equivalentResult  =  result?  3  :  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  3  :  2;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  3  :  2;	  int    equivalentResult    =    result?    3    :    1;    	non-compiled	[CE]  	3	None	replace
172	[BUG]  [BUGGY]  int  equivalentResult  =  result?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
173	[BUG]  [BUGGY]  int  equivalentResult  =  result?  MISSING_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  MISSING_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  MISSING_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
174	[BUG]  [BUGGY]  int  equivalentResult  =  result?  MAX_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  MAX_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  MAX_OBJECT_CONSTRUCTORS  :  Integer.MAX_VALUE;	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	25	None	replace
175	[BUG]  [BUGGY]  int  equivalentResult  =  nVal.intValue()?  4  :  0;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  nVal.intValue()?  4  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  nVal.intValue()?  4  :  0;	  int    equivalentResult    =    nVal.intValue()?    1    :    0;    	non-compiled	[CE]  	32	None	replace
176	[BUG]  [BUGGY]  parent.replaceChild(n,  next);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  parent.replaceChild(n,  next);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	parent.replaceChild(n,  next);	  parent.replaceChild(n,    result);    	non-compiled	[CE]  	21	None	replace
177	[BUG]  [BUGGY]  int  equivalentResult  =  result?  1E-9  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  1E-9  :  0;  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  1E-9  :  0;	  int    equivalentResult    =    result?    1E-6    :    0;    	non-compiled	[CE]  	27	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(result!=  null  &&  equivalentResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Preconditions.checkState(result!=  null  &&  equivalentResult);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Preconditions.checkState(result!=  null  &&  equivalentResult);	  Preconditions.checkState(result!=    null);    	non-compiled	[CE]  	29	None	replace
179	[BUG]  [BUGGY]  Node  next  =  nVal.cloneTree();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.cloneTree();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.cloneTree();	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
180	[BUG]  [BUGGY]  Node  next  =  nVal.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  Node  next  =  nVal.removeFirstChild();  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	Node  next  =  nVal.removeFirstChild();	  Node    next    =    nVal.getNext();    	non-compiled	[CE]  	20	None	replace
181	[BUG]  [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.parseInt(nVal);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  return  n;  }  default:  TernaryValue  nVal  =  NodeUtil.getBooleanValue(n);  if  (nVal  !=  TernaryValue.UNKNOWN)  {  boolean  result  =  nVal.toBoolean(true);      [BUGGY]  int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.parseInt(nVal);  [BUGGY]      return  maybeReplaceChildWithNumber(n,  parent,  equivalentResult);  }  return  n;  }  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	803	803	1	replace	int  equivalentResult  =  result?  STANDARD_OBJECT_CONSTRUCTORS  :  Integer.parseInt(nVal);	  int    equivalentResult    =    result?    STANDARD_OBJECT_CONSTRUCTORS    :    Integer.MIN_VALUE;    	non-compiled	[CE]  	33	None	replace
